// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riak.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riak.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MapField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapField_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapField_MapFieldType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtFetchResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtFetchResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DtFetchResp_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CounterOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapUpdate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MapUpdate_FlagOp_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MapOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DtUpdateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DtUpdateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetClientIdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetClientIdResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetClientIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetClientIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListBucketsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListBucketsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListBucketsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListBucketsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListKeysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListKeysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListKeysResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListKeysResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbMapRedReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbMapRedReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbMapRedResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbMapRedResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpbIndexReq_IndexQueryType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexBodyResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexBodyResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCSBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCSBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCSBucketResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCSBucketResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbIndexObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbIndexObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterUpdateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterUpdateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCounterGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCounterGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketKeyPreflistReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketKeyPreflistResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbBucketKeyPreflistItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbBucketKeyPreflistItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCoverageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCoverageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCoverageResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCoverageResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCoverageEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCoverageEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbErrorResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbErrorResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetServerInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetServerInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbResetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbResetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketTypeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketTypeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetBucketTypeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetBucketTypeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbModFun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbModFun_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbCommitHook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbCommitHook_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbBucketProps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbBucketProps_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpbBucketProps_RpbReplMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RpbAuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbAuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbToggleEncodingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbToggleEncodingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbToggleEncodingResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbToggleEncodingResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSearchDoc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSearchDoc_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSearchQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSearchQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSearchQueryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSearchQueryResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsQueryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsQueryResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsTtbPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsTtbPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsPutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsPutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsDelResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsDelResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsInterpolation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsInterpolation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsColumnDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsColumnDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsListKeysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsListKeysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsListKeysResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsListKeysResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCoverageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCoverageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCoverageResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCoverageResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsCoverageEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsCoverageEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* TsRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TsRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaIndexGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaIndexGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaIndexGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaIndexGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaIndexPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaIndexPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaIndexDeleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaIndexDeleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaSchema_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaSchema_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaSchemaPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaSchemaPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaSchemaGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaSchemaGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbYokozunaSchemaGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbYokozunaSchemaGetResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TsColumnType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_riak_2eproto() {
  protobuf_AddDesc_riak_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "riak.proto");
  GOOGLE_CHECK(file != NULL);
  MapField_descriptor_ = file->message_type(0);
  static const int MapField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapField, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapField, type_),
  };
  MapField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapField_descriptor_,
      MapField::default_instance_,
      MapField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapField));
  MapField_MapFieldType_descriptor_ = MapField_descriptor_->enum_type(0);
  MapEntry_descriptor_ = file->message_type(1);
  static const int MapEntry_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, counter_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, set_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, register_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, flag_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, map_value_),
  };
  MapEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapEntry_descriptor_,
      MapEntry::default_instance_,
      MapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapEntry));
  DtFetchReq_descriptor_ = file->message_type(2);
  static const int DtFetchReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, basic_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, notfound_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, include_context_),
  };
  DtFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtFetchReq_descriptor_,
      DtFetchReq::default_instance_,
      DtFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtFetchReq));
  DtValue_descriptor_ = file->message_type(3);
  static const int DtValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtValue, counter_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtValue, set_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtValue, map_value_),
  };
  DtValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtValue_descriptor_,
      DtValue::default_instance_,
      DtValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtValue));
  DtFetchResp_descriptor_ = file->message_type(4);
  static const int DtFetchResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchResp, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchResp, value_),
  };
  DtFetchResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtFetchResp_descriptor_,
      DtFetchResp::default_instance_,
      DtFetchResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtFetchResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtFetchResp));
  DtFetchResp_DataType_descriptor_ = DtFetchResp_descriptor_->enum_type(0);
  CounterOp_descriptor_ = file->message_type(5);
  static const int CounterOp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterOp, increment_),
  };
  CounterOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterOp_descriptor_,
      CounterOp::default_instance_,
      CounterOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterOp));
  SetOp_descriptor_ = file->message_type(6);
  static const int SetOp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOp, adds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOp, removes_),
  };
  SetOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetOp_descriptor_,
      SetOp::default_instance_,
      SetOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetOp));
  MapUpdate_descriptor_ = file->message_type(7);
  static const int MapUpdate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, counter_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, set_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, register_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, flag_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, map_op_),
  };
  MapUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapUpdate_descriptor_,
      MapUpdate::default_instance_,
      MapUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapUpdate));
  MapUpdate_FlagOp_descriptor_ = MapUpdate_descriptor_->enum_type(0);
  MapOp_descriptor_ = file->message_type(8);
  static const int MapOp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOp, removes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOp, updates_),
  };
  MapOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapOp_descriptor_,
      MapOp::default_instance_,
      MapOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapOp));
  DtOp_descriptor_ = file->message_type(9);
  static const int DtOp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtOp, counter_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtOp, set_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtOp, map_op_),
  };
  DtOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtOp_descriptor_,
      DtOp::default_instance_,
      DtOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtOp));
  DtUpdateReq_descriptor_ = file->message_type(10);
  static const int DtUpdateReq_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, return_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, include_context_),
  };
  DtUpdateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtUpdateReq_descriptor_,
      DtUpdateReq::default_instance_,
      DtUpdateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtUpdateReq));
  DtUpdateResp_descriptor_ = file->message_type(11);
  static const int DtUpdateResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateResp, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateResp, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateResp, counter_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateResp, set_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateResp, map_value_),
  };
  DtUpdateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DtUpdateResp_descriptor_,
      DtUpdateResp::default_instance_,
      DtUpdateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DtUpdateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DtUpdateResp));
  RpbGetClientIdResp_descriptor_ = file->message_type(12);
  static const int RpbGetClientIdResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, client_id_),
  };
  RpbGetClientIdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetClientIdResp_descriptor_,
      RpbGetClientIdResp::default_instance_,
      RpbGetClientIdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetClientIdResp));
  RpbSetClientIdReq_descriptor_ = file->message_type(13);
  static const int RpbSetClientIdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, client_id_),
  };
  RpbSetClientIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetClientIdReq_descriptor_,
      RpbSetClientIdReq::default_instance_,
      RpbSetClientIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetClientIdReq));
  RpbGetReq_descriptor_ = file->message_type(14);
  static const int RpbGetReq_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, basic_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, notfound_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, if_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, deletedvclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, type_),
  };
  RpbGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetReq_descriptor_,
      RpbGetReq::default_instance_,
      RpbGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetReq));
  RpbGetResp_descriptor_ = file->message_type(15);
  static const int RpbGetResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, unchanged_),
  };
  RpbGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetResp_descriptor_,
      RpbGetResp::default_instance_,
      RpbGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetResp));
  RpbPutReq_descriptor_ = file->message_type(16);
  static const int RpbPutReq_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, return_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, if_not_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, if_none_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, return_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, asis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, type_),
  };
  RpbPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPutReq_descriptor_,
      RpbPutReq::default_instance_,
      RpbPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPutReq));
  RpbPutResp_descriptor_ = file->message_type(17);
  static const int RpbPutResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, key_),
  };
  RpbPutResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPutResp_descriptor_,
      RpbPutResp::default_instance_,
      RpbPutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPutResp));
  RpbDelReq_descriptor_ = file->message_type(18);
  static const int RpbDelReq_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, rw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, sloppy_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, type_),
  };
  RpbDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbDelReq_descriptor_,
      RpbDelReq::default_instance_,
      RpbDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbDelReq));
  RpbListBucketsReq_descriptor_ = file->message_type(19);
  static const int RpbListBucketsReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, type_),
  };
  RpbListBucketsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListBucketsReq_descriptor_,
      RpbListBucketsReq::default_instance_,
      RpbListBucketsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListBucketsReq));
  RpbListBucketsResp_descriptor_ = file->message_type(20);
  static const int RpbListBucketsResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, buckets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, done_),
  };
  RpbListBucketsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListBucketsResp_descriptor_,
      RpbListBucketsResp::default_instance_,
      RpbListBucketsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListBucketsResp));
  RpbListKeysReq_descriptor_ = file->message_type(21);
  static const int RpbListKeysReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, type_),
  };
  RpbListKeysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListKeysReq_descriptor_,
      RpbListKeysReq::default_instance_,
      RpbListKeysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListKeysReq));
  RpbListKeysResp_descriptor_ = file->message_type(22);
  static const int RpbListKeysResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, done_),
  };
  RpbListKeysResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListKeysResp_descriptor_,
      RpbListKeysResp::default_instance_,
      RpbListKeysResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListKeysResp));
  RpbMapRedReq_descriptor_ = file->message_type(23);
  static const int RpbMapRedReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, content_type_),
  };
  RpbMapRedReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbMapRedReq_descriptor_,
      RpbMapRedReq::default_instance_,
      RpbMapRedReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbMapRedReq));
  RpbMapRedResp_descriptor_ = file->message_type(24);
  static const int RpbMapRedResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, done_),
  };
  RpbMapRedResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbMapRedResp_descriptor_,
      RpbMapRedResp::default_instance_,
      RpbMapRedResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbMapRedResp));
  RpbIndexReq_descriptor_ = file->message_type(25);
  static const int RpbIndexReq_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, qtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, range_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, range_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, return_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, max_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, term_regex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, pagination_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, cover_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, return_body_),
  };
  RpbIndexReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexReq_descriptor_,
      RpbIndexReq::default_instance_,
      RpbIndexReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexReq));
  RpbIndexReq_IndexQueryType_descriptor_ = RpbIndexReq_descriptor_->enum_type(0);
  RpbIndexResp_descriptor_ = file->message_type(26);
  static const int RpbIndexResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, done_),
  };
  RpbIndexResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexResp_descriptor_,
      RpbIndexResp::default_instance_,
      RpbIndexResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexResp));
  RpbIndexBodyResp_descriptor_ = file->message_type(27);
  static const int RpbIndexBodyResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, done_),
  };
  RpbIndexBodyResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexBodyResp_descriptor_,
      RpbIndexBodyResp::default_instance_,
      RpbIndexBodyResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexBodyResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexBodyResp));
  RpbCSBucketReq_descriptor_ = file->message_type(28);
  static const int RpbCSBucketReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, start_incl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, end_incl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, max_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, cover_context_),
  };
  RpbCSBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCSBucketReq_descriptor_,
      RpbCSBucketReq::default_instance_,
      RpbCSBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCSBucketReq));
  RpbCSBucketResp_descriptor_ = file->message_type(29);
  static const int RpbCSBucketResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, continuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, done_),
  };
  RpbCSBucketResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCSBucketResp_descriptor_,
      RpbCSBucketResp::default_instance_,
      RpbCSBucketResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCSBucketResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCSBucketResp));
  RpbIndexObject_descriptor_ = file->message_type(30);
  static const int RpbIndexObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, object_),
  };
  RpbIndexObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbIndexObject_descriptor_,
      RpbIndexObject::default_instance_,
      RpbIndexObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbIndexObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbIndexObject));
  RpbContent_descriptor_ = file->message_type(31);
  static const int RpbContent_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, content_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, vtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, last_mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, last_mod_usecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, usermeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, indexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, deleted_),
  };
  RpbContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbContent_descriptor_,
      RpbContent::default_instance_,
      RpbContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbContent));
  RpbLink_descriptor_ = file->message_type(32);
  static const int RpbLink_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, tag_),
  };
  RpbLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbLink_descriptor_,
      RpbLink::default_instance_,
      RpbLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbLink));
  RpbCounterUpdateReq_descriptor_ = file->message_type(33);
  static const int RpbCounterUpdateReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, returnvalue_),
  };
  RpbCounterUpdateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterUpdateReq_descriptor_,
      RpbCounterUpdateReq::default_instance_,
      RpbCounterUpdateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterUpdateReq));
  RpbCounterUpdateResp_descriptor_ = file->message_type(34);
  static const int RpbCounterUpdateResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateResp, value_),
  };
  RpbCounterUpdateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterUpdateResp_descriptor_,
      RpbCounterUpdateResp::default_instance_,
      RpbCounterUpdateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterUpdateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterUpdateResp));
  RpbCounterGetReq_descriptor_ = file->message_type(35);
  static const int RpbCounterGetReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, basic_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, notfound_ok_),
  };
  RpbCounterGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterGetReq_descriptor_,
      RpbCounterGetReq::default_instance_,
      RpbCounterGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterGetReq));
  RpbCounterGetResp_descriptor_ = file->message_type(36);
  static const int RpbCounterGetResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetResp, value_),
  };
  RpbCounterGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCounterGetResp_descriptor_,
      RpbCounterGetResp::default_instance_,
      RpbCounterGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCounterGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCounterGetResp));
  RpbGetBucketKeyPreflistReq_descriptor_ = file->message_type(37);
  static const int RpbGetBucketKeyPreflistReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, type_),
  };
  RpbGetBucketKeyPreflistReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketKeyPreflistReq_descriptor_,
      RpbGetBucketKeyPreflistReq::default_instance_,
      RpbGetBucketKeyPreflistReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketKeyPreflistReq));
  RpbGetBucketKeyPreflistResp_descriptor_ = file->message_type(38);
  static const int RpbGetBucketKeyPreflistResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistResp, preflist_),
  };
  RpbGetBucketKeyPreflistResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketKeyPreflistResp_descriptor_,
      RpbGetBucketKeyPreflistResp::default_instance_,
      RpbGetBucketKeyPreflistResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketKeyPreflistResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketKeyPreflistResp));
  RpbBucketKeyPreflistItem_descriptor_ = file->message_type(39);
  static const int RpbBucketKeyPreflistItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, primary_),
  };
  RpbBucketKeyPreflistItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbBucketKeyPreflistItem_descriptor_,
      RpbBucketKeyPreflistItem::default_instance_,
      RpbBucketKeyPreflistItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketKeyPreflistItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbBucketKeyPreflistItem));
  RpbCoverageReq_descriptor_ = file->message_type(40);
  static const int RpbCoverageReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, min_partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, replace_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, unavailable_cover_),
  };
  RpbCoverageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCoverageReq_descriptor_,
      RpbCoverageReq::default_instance_,
      RpbCoverageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCoverageReq));
  RpbCoverageResp_descriptor_ = file->message_type(41);
  static const int RpbCoverageResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageResp, entries_),
  };
  RpbCoverageResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCoverageResp_descriptor_,
      RpbCoverageResp::default_instance_,
      RpbCoverageResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCoverageResp));
  RpbCoverageEntry_descriptor_ = file->message_type(42);
  static const int RpbCoverageEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, keyspace_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, cover_context_),
  };
  RpbCoverageEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCoverageEntry_descriptor_,
      RpbCoverageEntry::default_instance_,
      RpbCoverageEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCoverageEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCoverageEntry));
  RpbErrorResp_descriptor_ = file->message_type(43);
  static const int RpbErrorResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errcode_),
  };
  RpbErrorResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbErrorResp_descriptor_,
      RpbErrorResp::default_instance_,
      RpbErrorResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbErrorResp));
  RpbGetServerInfoResp_descriptor_ = file->message_type(44);
  static const int RpbGetServerInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, server_version_),
  };
  RpbGetServerInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetServerInfoResp_descriptor_,
      RpbGetServerInfoResp::default_instance_,
      RpbGetServerInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetServerInfoResp));
  RpbPair_descriptor_ = file->message_type(45);
  static const int RpbPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, value_),
  };
  RpbPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPair_descriptor_,
      RpbPair::default_instance_,
      RpbPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPair));
  RpbGetBucketReq_descriptor_ = file->message_type(46);
  static const int RpbGetBucketReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, type_),
  };
  RpbGetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketReq_descriptor_,
      RpbGetBucketReq::default_instance_,
      RpbGetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketReq));
  RpbGetBucketResp_descriptor_ = file->message_type(47);
  static const int RpbGetBucketResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, props_),
  };
  RpbGetBucketResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketResp_descriptor_,
      RpbGetBucketResp::default_instance_,
      RpbGetBucketResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketResp));
  RpbSetBucketReq_descriptor_ = file->message_type(48);
  static const int RpbSetBucketReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, props_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, type_),
  };
  RpbSetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetBucketReq_descriptor_,
      RpbSetBucketReq::default_instance_,
      RpbSetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetBucketReq));
  RpbResetBucketReq_descriptor_ = file->message_type(49);
  static const int RpbResetBucketReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, type_),
  };
  RpbResetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbResetBucketReq_descriptor_,
      RpbResetBucketReq::default_instance_,
      RpbResetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbResetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbResetBucketReq));
  RpbGetBucketTypeReq_descriptor_ = file->message_type(50);
  static const int RpbGetBucketTypeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketTypeReq, type_),
  };
  RpbGetBucketTypeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketTypeReq_descriptor_,
      RpbGetBucketTypeReq::default_instance_,
      RpbGetBucketTypeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketTypeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketTypeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketTypeReq));
  RpbSetBucketTypeReq_descriptor_ = file->message_type(51);
  static const int RpbSetBucketTypeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, props_),
  };
  RpbSetBucketTypeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetBucketTypeReq_descriptor_,
      RpbSetBucketTypeReq::default_instance_,
      RpbSetBucketTypeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketTypeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetBucketTypeReq));
  RpbModFun_descriptor_ = file->message_type(52);
  static const int RpbModFun_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, function_),
  };
  RpbModFun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbModFun_descriptor_,
      RpbModFun::default_instance_,
      RpbModFun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbModFun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbModFun));
  RpbCommitHook_descriptor_ = file->message_type(53);
  static const int RpbCommitHook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, modfun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, name_),
  };
  RpbCommitHook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbCommitHook_descriptor_,
      RpbCommitHook::default_instance_,
      RpbCommitHook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbCommitHook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbCommitHook));
  RpbBucketProps_descriptor_ = file->message_type(54);
  static const int RpbBucketProps_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, allow_mult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, last_write_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, precommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, has_precommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, postcommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, has_postcommit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, chash_keyfun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, linkfun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, old_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, young_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, big_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, small_vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, pr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, pw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, rw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, basic_quorum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, notfound_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, backend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, search_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, repl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, search_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, consistent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, write_once_),
  };
  RpbBucketProps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbBucketProps_descriptor_,
      RpbBucketProps::default_instance_,
      RpbBucketProps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbBucketProps));
  RpbBucketProps_RpbReplMode_descriptor_ = RpbBucketProps_descriptor_->enum_type(0);
  RpbAuthReq_descriptor_ = file->message_type(55);
  static const int RpbAuthReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, password_),
  };
  RpbAuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbAuthReq_descriptor_,
      RpbAuthReq::default_instance_,
      RpbAuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbAuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbAuthReq));
  RpbToggleEncodingReq_descriptor_ = file->message_type(56);
  static const int RpbToggleEncodingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingReq, use_native_),
  };
  RpbToggleEncodingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbToggleEncodingReq_descriptor_,
      RpbToggleEncodingReq::default_instance_,
      RpbToggleEncodingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbToggleEncodingReq));
  RpbToggleEncodingResp_descriptor_ = file->message_type(57);
  static const int RpbToggleEncodingResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingResp, use_native_),
  };
  RpbToggleEncodingResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbToggleEncodingResp_descriptor_,
      RpbToggleEncodingResp::default_instance_,
      RpbToggleEncodingResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbToggleEncodingResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbToggleEncodingResp));
  RpbSearchDoc_descriptor_ = file->message_type(58);
  static const int RpbSearchDoc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchDoc, fields_),
  };
  RpbSearchDoc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSearchDoc_descriptor_,
      RpbSearchDoc::default_instance_,
      RpbSearchDoc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchDoc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchDoc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSearchDoc));
  RpbSearchQueryReq_descriptor_ = file->message_type(59);
  static const int RpbSearchQueryReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, fl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, presort_),
  };
  RpbSearchQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSearchQueryReq_descriptor_,
      RpbSearchQueryReq::default_instance_,
      RpbSearchQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSearchQueryReq));
  RpbSearchQueryResp_descriptor_ = file->message_type(60);
  static const int RpbSearchQueryResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, docs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, num_found_),
  };
  RpbSearchQueryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSearchQueryResp_descriptor_,
      RpbSearchQueryResp::default_instance_,
      RpbSearchQueryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSearchQueryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSearchQueryResp));
  TsQueryReq_descriptor_ = file->message_type(61);
  static const int TsQueryReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, cover_context_),
  };
  TsQueryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsQueryReq_descriptor_,
      TsQueryReq::default_instance_,
      TsQueryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsQueryReq));
  TsQueryResp_descriptor_ = file->message_type(62);
  static const int TsQueryResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, done_),
  };
  TsQueryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsQueryResp_descriptor_,
      TsQueryResp::default_instance_,
      TsQueryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsQueryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsQueryResp));
  TsGetReq_descriptor_ = file->message_type(63);
  static const int TsGetReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, timeout_),
  };
  TsGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsGetReq_descriptor_,
      TsGetReq::default_instance_,
      TsGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsGetReq));
  TsGetResp_descriptor_ = file->message_type(64);
  static const int TsGetResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, rows_),
  };
  TsGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsGetResp_descriptor_,
      TsGetResp::default_instance_,
      TsGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsGetResp));
  TsPutReq_descriptor_ = file->message_type(65);
  static const int TsPutReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, rows_),
  };
  TsPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsPutReq_descriptor_,
      TsPutReq::default_instance_,
      TsPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsPutReq));
  TsTtbPutReq_descriptor_ = file->message_type(66);
  static const int TsTtbPutReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, rows_),
  };
  TsTtbPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsTtbPutReq_descriptor_,
      TsTtbPutReq::default_instance_,
      TsTtbPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsTtbPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsTtbPutReq));
  TsPutResp_descriptor_ = file->message_type(67);
  static const int TsPutResp_offsets_[1] = {
  };
  TsPutResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsPutResp_descriptor_,
      TsPutResp::default_instance_,
      TsPutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsPutResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsPutResp));
  TsDelReq_descriptor_ = file->message_type(68);
  static const int TsDelReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, timeout_),
  };
  TsDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsDelReq_descriptor_,
      TsDelReq::default_instance_,
      TsDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsDelReq));
  TsDelResp_descriptor_ = file->message_type(69);
  static const int TsDelResp_offsets_[1] = {
  };
  TsDelResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsDelResp_descriptor_,
      TsDelResp::default_instance_,
      TsDelResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsDelResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsDelResp));
  TsInterpolation_descriptor_ = file->message_type(70);
  static const int TsInterpolation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, interpolations_),
  };
  TsInterpolation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsInterpolation_descriptor_,
      TsInterpolation::default_instance_,
      TsInterpolation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsInterpolation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsInterpolation));
  TsColumnDescription_descriptor_ = file->message_type(71);
  static const int TsColumnDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, type_),
  };
  TsColumnDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsColumnDescription_descriptor_,
      TsColumnDescription::default_instance_,
      TsColumnDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsColumnDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsColumnDescription));
  TsRow_descriptor_ = file->message_type(72);
  static const int TsRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRow, cells_),
  };
  TsRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsRow_descriptor_,
      TsRow::default_instance_,
      TsRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsRow));
  TsCell_descriptor_ = file->message_type(73);
  static const int TsCell_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, varchar_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, sint64_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, timestamp_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, boolean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, double_value_),
  };
  TsCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCell_descriptor_,
      TsCell::default_instance_,
      TsCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCell));
  TsListKeysReq_descriptor_ = file->message_type(74);
  static const int TsListKeysReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, timeout_),
  };
  TsListKeysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsListKeysReq_descriptor_,
      TsListKeysReq::default_instance_,
      TsListKeysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsListKeysReq));
  TsListKeysResp_descriptor_ = file->message_type(75);
  static const int TsListKeysResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, done_),
  };
  TsListKeysResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsListKeysResp_descriptor_,
      TsListKeysResp::default_instance_,
      TsListKeysResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsListKeysResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsListKeysResp));
  TsCoverageReq_descriptor_ = file->message_type(76);
  static const int TsCoverageReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, replace_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, unavailable_cover_),
  };
  TsCoverageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCoverageReq_descriptor_,
      TsCoverageReq::default_instance_,
      TsCoverageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCoverageReq));
  TsCoverageResp_descriptor_ = file->message_type(77);
  static const int TsCoverageResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageResp, entries_),
  };
  TsCoverageResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCoverageResp_descriptor_,
      TsCoverageResp::default_instance_,
      TsCoverageResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCoverageResp));
  TsCoverageEntry_descriptor_ = file->message_type(78);
  static const int TsCoverageEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, cover_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, range_),
  };
  TsCoverageEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsCoverageEntry_descriptor_,
      TsCoverageEntry::default_instance_,
      TsCoverageEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsCoverageEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsCoverageEntry));
  TsRange_descriptor_ = file->message_type(79);
  static const int TsRange_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, field_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, lower_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, lower_bound_inclusive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, upper_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, upper_bound_inclusive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, desc_),
  };
  TsRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TsRange_descriptor_,
      TsRange::default_instance_,
      TsRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TsRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TsRange));
  RpbYokozunaIndex_descriptor_ = file->message_type(80);
  static const int RpbYokozunaIndex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndex, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndex, schema_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndex, n_val_),
  };
  RpbYokozunaIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaIndex_descriptor_,
      RpbYokozunaIndex::default_instance_,
      RpbYokozunaIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaIndex));
  RpbYokozunaIndexGetReq_descriptor_ = file->message_type(81);
  static const int RpbYokozunaIndexGetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexGetReq, name_),
  };
  RpbYokozunaIndexGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaIndexGetReq_descriptor_,
      RpbYokozunaIndexGetReq::default_instance_,
      RpbYokozunaIndexGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaIndexGetReq));
  RpbYokozunaIndexGetResp_descriptor_ = file->message_type(82);
  static const int RpbYokozunaIndexGetResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexGetResp, index_),
  };
  RpbYokozunaIndexGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaIndexGetResp_descriptor_,
      RpbYokozunaIndexGetResp::default_instance_,
      RpbYokozunaIndexGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaIndexGetResp));
  RpbYokozunaIndexPutReq_descriptor_ = file->message_type(83);
  static const int RpbYokozunaIndexPutReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexPutReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexPutReq, timeout_),
  };
  RpbYokozunaIndexPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaIndexPutReq_descriptor_,
      RpbYokozunaIndexPutReq::default_instance_,
      RpbYokozunaIndexPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaIndexPutReq));
  RpbYokozunaIndexDeleteReq_descriptor_ = file->message_type(84);
  static const int RpbYokozunaIndexDeleteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexDeleteReq, name_),
  };
  RpbYokozunaIndexDeleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaIndexDeleteReq_descriptor_,
      RpbYokozunaIndexDeleteReq::default_instance_,
      RpbYokozunaIndexDeleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexDeleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaIndexDeleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaIndexDeleteReq));
  RpbYokozunaSchema_descriptor_ = file->message_type(85);
  static const int RpbYokozunaSchema_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchema, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchema, content_),
  };
  RpbYokozunaSchema_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaSchema_descriptor_,
      RpbYokozunaSchema::default_instance_,
      RpbYokozunaSchema_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchema, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchema, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaSchema));
  RpbYokozunaSchemaPutReq_descriptor_ = file->message_type(86);
  static const int RpbYokozunaSchemaPutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaPutReq, schema_),
  };
  RpbYokozunaSchemaPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaSchemaPutReq_descriptor_,
      RpbYokozunaSchemaPutReq::default_instance_,
      RpbYokozunaSchemaPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaSchemaPutReq));
  RpbYokozunaSchemaGetReq_descriptor_ = file->message_type(87);
  static const int RpbYokozunaSchemaGetReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaGetReq, name_),
  };
  RpbYokozunaSchemaGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaSchemaGetReq_descriptor_,
      RpbYokozunaSchemaGetReq::default_instance_,
      RpbYokozunaSchemaGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaSchemaGetReq));
  RpbYokozunaSchemaGetResp_descriptor_ = file->message_type(88);
  static const int RpbYokozunaSchemaGetResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaGetResp, schema_),
  };
  RpbYokozunaSchemaGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbYokozunaSchemaGetResp_descriptor_,
      RpbYokozunaSchemaGetResp::default_instance_,
      RpbYokozunaSchemaGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbYokozunaSchemaGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbYokozunaSchemaGetResp));
  TsColumnType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_riak_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapField_descriptor_, &MapField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapEntry_descriptor_, &MapEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtFetchReq_descriptor_, &DtFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtValue_descriptor_, &DtValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtFetchResp_descriptor_, &DtFetchResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterOp_descriptor_, &CounterOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetOp_descriptor_, &SetOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapUpdate_descriptor_, &MapUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapOp_descriptor_, &MapOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtOp_descriptor_, &DtOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtUpdateReq_descriptor_, &DtUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DtUpdateResp_descriptor_, &DtUpdateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetClientIdResp_descriptor_, &RpbGetClientIdResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetClientIdReq_descriptor_, &RpbSetClientIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetReq_descriptor_, &RpbGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetResp_descriptor_, &RpbGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPutReq_descriptor_, &RpbPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPutResp_descriptor_, &RpbPutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbDelReq_descriptor_, &RpbDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListBucketsReq_descriptor_, &RpbListBucketsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListBucketsResp_descriptor_, &RpbListBucketsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListKeysReq_descriptor_, &RpbListKeysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListKeysResp_descriptor_, &RpbListKeysResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbMapRedReq_descriptor_, &RpbMapRedReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbMapRedResp_descriptor_, &RpbMapRedResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexReq_descriptor_, &RpbIndexReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexResp_descriptor_, &RpbIndexResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexBodyResp_descriptor_, &RpbIndexBodyResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCSBucketReq_descriptor_, &RpbCSBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCSBucketResp_descriptor_, &RpbCSBucketResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbIndexObject_descriptor_, &RpbIndexObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbContent_descriptor_, &RpbContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbLink_descriptor_, &RpbLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterUpdateReq_descriptor_, &RpbCounterUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterUpdateResp_descriptor_, &RpbCounterUpdateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterGetReq_descriptor_, &RpbCounterGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCounterGetResp_descriptor_, &RpbCounterGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketKeyPreflistReq_descriptor_, &RpbGetBucketKeyPreflistReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketKeyPreflistResp_descriptor_, &RpbGetBucketKeyPreflistResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbBucketKeyPreflistItem_descriptor_, &RpbBucketKeyPreflistItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCoverageReq_descriptor_, &RpbCoverageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCoverageResp_descriptor_, &RpbCoverageResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCoverageEntry_descriptor_, &RpbCoverageEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbErrorResp_descriptor_, &RpbErrorResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetServerInfoResp_descriptor_, &RpbGetServerInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPair_descriptor_, &RpbPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketReq_descriptor_, &RpbGetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketResp_descriptor_, &RpbGetBucketResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetBucketReq_descriptor_, &RpbSetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbResetBucketReq_descriptor_, &RpbResetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketTypeReq_descriptor_, &RpbGetBucketTypeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetBucketTypeReq_descriptor_, &RpbSetBucketTypeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbModFun_descriptor_, &RpbModFun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbCommitHook_descriptor_, &RpbCommitHook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbBucketProps_descriptor_, &RpbBucketProps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbAuthReq_descriptor_, &RpbAuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbToggleEncodingReq_descriptor_, &RpbToggleEncodingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbToggleEncodingResp_descriptor_, &RpbToggleEncodingResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSearchDoc_descriptor_, &RpbSearchDoc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSearchQueryReq_descriptor_, &RpbSearchQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSearchQueryResp_descriptor_, &RpbSearchQueryResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsQueryReq_descriptor_, &TsQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsQueryResp_descriptor_, &TsQueryResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsGetReq_descriptor_, &TsGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsGetResp_descriptor_, &TsGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsPutReq_descriptor_, &TsPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsTtbPutReq_descriptor_, &TsTtbPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsPutResp_descriptor_, &TsPutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsDelReq_descriptor_, &TsDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsDelResp_descriptor_, &TsDelResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsInterpolation_descriptor_, &TsInterpolation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsColumnDescription_descriptor_, &TsColumnDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsRow_descriptor_, &TsRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCell_descriptor_, &TsCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsListKeysReq_descriptor_, &TsListKeysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsListKeysResp_descriptor_, &TsListKeysResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCoverageReq_descriptor_, &TsCoverageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCoverageResp_descriptor_, &TsCoverageResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsCoverageEntry_descriptor_, &TsCoverageEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TsRange_descriptor_, &TsRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaIndex_descriptor_, &RpbYokozunaIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaIndexGetReq_descriptor_, &RpbYokozunaIndexGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaIndexGetResp_descriptor_, &RpbYokozunaIndexGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaIndexPutReq_descriptor_, &RpbYokozunaIndexPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaIndexDeleteReq_descriptor_, &RpbYokozunaIndexDeleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaSchema_descriptor_, &RpbYokozunaSchema::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaSchemaPutReq_descriptor_, &RpbYokozunaSchemaPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaSchemaGetReq_descriptor_, &RpbYokozunaSchemaGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbYokozunaSchemaGetResp_descriptor_, &RpbYokozunaSchemaGetResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_riak_2eproto() {
  delete MapField::default_instance_;
  delete MapField_reflection_;
  delete MapEntry::default_instance_;
  delete MapEntry_reflection_;
  delete DtFetchReq::default_instance_;
  delete DtFetchReq_reflection_;
  delete DtValue::default_instance_;
  delete DtValue_reflection_;
  delete DtFetchResp::default_instance_;
  delete DtFetchResp_reflection_;
  delete CounterOp::default_instance_;
  delete CounterOp_reflection_;
  delete SetOp::default_instance_;
  delete SetOp_reflection_;
  delete MapUpdate::default_instance_;
  delete MapUpdate_reflection_;
  delete MapOp::default_instance_;
  delete MapOp_reflection_;
  delete DtOp::default_instance_;
  delete DtOp_reflection_;
  delete DtUpdateReq::default_instance_;
  delete DtUpdateReq_reflection_;
  delete DtUpdateResp::default_instance_;
  delete DtUpdateResp_reflection_;
  delete RpbGetClientIdResp::default_instance_;
  delete RpbGetClientIdResp_reflection_;
  delete RpbSetClientIdReq::default_instance_;
  delete RpbSetClientIdReq_reflection_;
  delete RpbGetReq::default_instance_;
  delete RpbGetReq_reflection_;
  delete RpbGetResp::default_instance_;
  delete RpbGetResp_reflection_;
  delete RpbPutReq::default_instance_;
  delete RpbPutReq_reflection_;
  delete RpbPutResp::default_instance_;
  delete RpbPutResp_reflection_;
  delete RpbDelReq::default_instance_;
  delete RpbDelReq_reflection_;
  delete RpbListBucketsReq::default_instance_;
  delete RpbListBucketsReq_reflection_;
  delete RpbListBucketsResp::default_instance_;
  delete RpbListBucketsResp_reflection_;
  delete RpbListKeysReq::default_instance_;
  delete RpbListKeysReq_reflection_;
  delete RpbListKeysResp::default_instance_;
  delete RpbListKeysResp_reflection_;
  delete RpbMapRedReq::default_instance_;
  delete RpbMapRedReq_reflection_;
  delete RpbMapRedResp::default_instance_;
  delete RpbMapRedResp_reflection_;
  delete RpbIndexReq::default_instance_;
  delete RpbIndexReq_reflection_;
  delete RpbIndexResp::default_instance_;
  delete RpbIndexResp_reflection_;
  delete RpbIndexBodyResp::default_instance_;
  delete RpbIndexBodyResp_reflection_;
  delete RpbCSBucketReq::default_instance_;
  delete RpbCSBucketReq_reflection_;
  delete RpbCSBucketResp::default_instance_;
  delete RpbCSBucketResp_reflection_;
  delete RpbIndexObject::default_instance_;
  delete RpbIndexObject_reflection_;
  delete RpbContent::default_instance_;
  delete RpbContent_reflection_;
  delete RpbLink::default_instance_;
  delete RpbLink_reflection_;
  delete RpbCounterUpdateReq::default_instance_;
  delete RpbCounterUpdateReq_reflection_;
  delete RpbCounterUpdateResp::default_instance_;
  delete RpbCounterUpdateResp_reflection_;
  delete RpbCounterGetReq::default_instance_;
  delete RpbCounterGetReq_reflection_;
  delete RpbCounterGetResp::default_instance_;
  delete RpbCounterGetResp_reflection_;
  delete RpbGetBucketKeyPreflistReq::default_instance_;
  delete RpbGetBucketKeyPreflistReq_reflection_;
  delete RpbGetBucketKeyPreflistResp::default_instance_;
  delete RpbGetBucketKeyPreflistResp_reflection_;
  delete RpbBucketKeyPreflistItem::default_instance_;
  delete RpbBucketKeyPreflistItem_reflection_;
  delete RpbCoverageReq::default_instance_;
  delete RpbCoverageReq_reflection_;
  delete RpbCoverageResp::default_instance_;
  delete RpbCoverageResp_reflection_;
  delete RpbCoverageEntry::default_instance_;
  delete RpbCoverageEntry_reflection_;
  delete RpbErrorResp::default_instance_;
  delete RpbErrorResp_reflection_;
  delete RpbGetServerInfoResp::default_instance_;
  delete RpbGetServerInfoResp_reflection_;
  delete RpbPair::default_instance_;
  delete RpbPair_reflection_;
  delete RpbGetBucketReq::default_instance_;
  delete RpbGetBucketReq_reflection_;
  delete RpbGetBucketResp::default_instance_;
  delete RpbGetBucketResp_reflection_;
  delete RpbSetBucketReq::default_instance_;
  delete RpbSetBucketReq_reflection_;
  delete RpbResetBucketReq::default_instance_;
  delete RpbResetBucketReq_reflection_;
  delete RpbGetBucketTypeReq::default_instance_;
  delete RpbGetBucketTypeReq_reflection_;
  delete RpbSetBucketTypeReq::default_instance_;
  delete RpbSetBucketTypeReq_reflection_;
  delete RpbModFun::default_instance_;
  delete RpbModFun_reflection_;
  delete RpbCommitHook::default_instance_;
  delete RpbCommitHook_reflection_;
  delete RpbBucketProps::default_instance_;
  delete RpbBucketProps_reflection_;
  delete RpbAuthReq::default_instance_;
  delete RpbAuthReq_reflection_;
  delete RpbToggleEncodingReq::default_instance_;
  delete RpbToggleEncodingReq_reflection_;
  delete RpbToggleEncodingResp::default_instance_;
  delete RpbToggleEncodingResp_reflection_;
  delete RpbSearchDoc::default_instance_;
  delete RpbSearchDoc_reflection_;
  delete RpbSearchQueryReq::default_instance_;
  delete RpbSearchQueryReq_reflection_;
  delete RpbSearchQueryResp::default_instance_;
  delete RpbSearchQueryResp_reflection_;
  delete TsQueryReq::default_instance_;
  delete TsQueryReq_reflection_;
  delete TsQueryResp::default_instance_;
  delete TsQueryResp_reflection_;
  delete TsGetReq::default_instance_;
  delete TsGetReq_reflection_;
  delete TsGetResp::default_instance_;
  delete TsGetResp_reflection_;
  delete TsPutReq::default_instance_;
  delete TsPutReq_reflection_;
  delete TsTtbPutReq::default_instance_;
  delete TsTtbPutReq_reflection_;
  delete TsPutResp::default_instance_;
  delete TsPutResp_reflection_;
  delete TsDelReq::default_instance_;
  delete TsDelReq_reflection_;
  delete TsDelResp::default_instance_;
  delete TsDelResp_reflection_;
  delete TsInterpolation::default_instance_;
  delete TsInterpolation_reflection_;
  delete TsColumnDescription::default_instance_;
  delete TsColumnDescription_reflection_;
  delete TsRow::default_instance_;
  delete TsRow_reflection_;
  delete TsCell::default_instance_;
  delete TsCell_reflection_;
  delete TsListKeysReq::default_instance_;
  delete TsListKeysReq_reflection_;
  delete TsListKeysResp::default_instance_;
  delete TsListKeysResp_reflection_;
  delete TsCoverageReq::default_instance_;
  delete TsCoverageReq_reflection_;
  delete TsCoverageResp::default_instance_;
  delete TsCoverageResp_reflection_;
  delete TsCoverageEntry::default_instance_;
  delete TsCoverageEntry_reflection_;
  delete TsRange::default_instance_;
  delete TsRange_reflection_;
  delete RpbYokozunaIndex::default_instance_;
  delete RpbYokozunaIndex_reflection_;
  delete RpbYokozunaIndexGetReq::default_instance_;
  delete RpbYokozunaIndexGetReq_reflection_;
  delete RpbYokozunaIndexGetResp::default_instance_;
  delete RpbYokozunaIndexGetResp_reflection_;
  delete RpbYokozunaIndexPutReq::default_instance_;
  delete RpbYokozunaIndexPutReq_reflection_;
  delete RpbYokozunaIndexDeleteReq::default_instance_;
  delete RpbYokozunaIndexDeleteReq_reflection_;
  delete RpbYokozunaSchema::default_instance_;
  delete RpbYokozunaSchema_reflection_;
  delete RpbYokozunaSchemaPutReq::default_instance_;
  delete RpbYokozunaSchemaPutReq_reflection_;
  delete RpbYokozunaSchemaGetReq::default_instance_;
  delete RpbYokozunaSchemaGetReq_reflection_;
  delete RpbYokozunaSchemaGetResp::default_instance_;
  delete RpbYokozunaSchemaGetResp_reflection_;
}

void protobuf_AddDesc_riak_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nriak.proto\"\205\001\n\010MapField\022\014\n\004name\030\001 \002(\014\022"
    "$\n\004type\030\002 \002(\0162\026.MapField.MapFieldType\"E\n"
    "\014MapFieldType\022\013\n\007COUNTER\020\001\022\007\n\003SET\020\002\022\014\n\010R"
    "EGISTER\020\003\022\010\n\004FLAG\020\004\022\007\n\003MAP\020\005\"\230\001\n\010MapEntr"
    "y\022\030\n\005field\030\001 \002(\0132\t.MapField\022\025\n\rcounter_v"
    "alue\030\002 \001(\022\022\021\n\tset_value\030\003 \003(\014\022\026\n\016registe"
    "r_value\030\004 \001(\014\022\022\n\nflag_value\030\005 \001(\010\022\034\n\tmap"
    "_value\030\006 \003(\0132\t.MapEntry\"\317\001\n\nDtFetchReq\022\016"
    "\n\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\014\n\004type\030\003 \002("
    "\014\022\t\n\001r\030\004 \001(\r\022\n\n\002pr\030\005 \001(\r\022\024\n\014basic_quorum"
    "\030\006 \001(\010\022\023\n\013notfound_ok\030\007 \001(\010\022\017\n\007timeout\030\010"
    " \001(\r\022\025\n\rsloppy_quorum\030\t \001(\010\022\r\n\005n_val\030\n \001"
    "(\r\022\035\n\017include_context\030\013 \001(\010:\004true\"Q\n\007DtV"
    "alue\022\025\n\rcounter_value\030\001 \001(\022\022\021\n\tset_value"
    "\030\002 \003(\014\022\034\n\tmap_value\030\003 \003(\0132\t.MapEntry\"\207\001\n"
    "\013DtFetchResp\022\017\n\007context\030\001 \001(\014\022#\n\004type\030\002 "
    "\002(\0162\025.DtFetchResp.DataType\022\027\n\005value\030\003 \001("
    "\0132\010.DtValue\")\n\010DataType\022\013\n\007COUNTER\020\001\022\007\n\003"
    "SET\020\002\022\007\n\003MAP\020\003\"\036\n\tCounterOp\022\021\n\tincrement"
    "\030\001 \001(\022\"&\n\005SetOp\022\014\n\004adds\030\001 \003(\014\022\017\n\007removes"
    "\030\002 \003(\014\"\321\001\n\tMapUpdate\022\030\n\005field\030\001 \002(\0132\t.Ma"
    "pField\022\036\n\ncounter_op\030\002 \001(\0132\n.CounterOp\022\026"
    "\n\006set_op\030\003 \001(\0132\006.SetOp\022\023\n\013register_op\030\004 "
    "\001(\014\022\"\n\007flag_op\030\005 \001(\0162\021.MapUpdate.FlagOp\022"
    "\026\n\006map_op\030\006 \001(\0132\006.MapOp\"!\n\006FlagOp\022\n\n\006ENA"
    "BLE\020\001\022\013\n\007DISABLE\020\002\"@\n\005MapOp\022\032\n\007removes\030\001"
    " \003(\0132\t.MapField\022\033\n\007updates\030\002 \003(\0132\n.MapUp"
    "date\"V\n\004DtOp\022\036\n\ncounter_op\030\001 \001(\0132\n.Count"
    "erOp\022\026\n\006set_op\030\002 \001(\0132\006.SetOp\022\026\n\006map_op\030\003"
    " \001(\0132\006.MapOp\"\361\001\n\013DtUpdateReq\022\016\n\006bucket\030\001"
    " \002(\014\022\013\n\003key\030\002 \001(\014\022\014\n\004type\030\003 \002(\014\022\017\n\007conte"
    "xt\030\004 \001(\014\022\021\n\002op\030\005 \002(\0132\005.DtOp\022\t\n\001w\030\006 \001(\r\022\n"
    "\n\002dw\030\007 \001(\r\022\n\n\002pw\030\010 \001(\r\022\032\n\013return_body\030\t "
    "\001(\010:\005false\022\017\n\007timeout\030\n \001(\r\022\025\n\rsloppy_qu"
    "orum\030\013 \001(\010\022\r\n\005n_val\030\014 \001(\r\022\035\n\017include_con"
    "text\030\r \001(\010:\004true\"t\n\014DtUpdateResp\022\013\n\003key\030"
    "\001 \001(\014\022\017\n\007context\030\002 \001(\014\022\025\n\rcounter_value\030"
    "\003 \001(\022\022\021\n\tset_value\030\004 \003(\014\022\034\n\tmap_value\030\005 "
    "\003(\0132\t.MapEntry\"\'\n\022RpbGetClientIdResp\022\021\n\t"
    "client_id\030\001 \002(\014\"&\n\021RpbSetClientIdReq\022\021\n\t"
    "client_id\030\001 \002(\014\"\351\001\n\tRpbGetReq\022\016\n\006bucket\030"
    "\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\t\n\001r\030\003 \001(\r\022\n\n\002pr\030\004 \001("
    "\r\022\024\n\014basic_quorum\030\005 \001(\010\022\023\n\013notfound_ok\030\006"
    " \001(\010\022\023\n\013if_modified\030\007 \001(\014\022\014\n\004head\030\010 \001(\010\022"
    "\025\n\rdeletedvclock\030\t \001(\010\022\017\n\007timeout\030\n \001(\r\022"
    "\025\n\rsloppy_quorum\030\013 \001(\010\022\r\n\005n_val\030\014 \001(\r\022\014\n"
    "\004type\030\r \001(\014\"M\n\nRpbGetResp\022\034\n\007content\030\001 \003"
    "(\0132\013.RpbContent\022\016\n\006vclock\030\002 \001(\014\022\021\n\tuncha"
    "nged\030\003 \001(\010\"\246\002\n\tRpbPutReq\022\016\n\006bucket\030\001 \002(\014"
    "\022\013\n\003key\030\002 \001(\014\022\016\n\006vclock\030\003 \001(\014\022\034\n\007content"
    "\030\004 \002(\0132\013.RpbContent\022\t\n\001w\030\005 \001(\r\022\n\n\002dw\030\006 \001"
    "(\r\022\023\n\013return_body\030\007 \001(\010\022\n\n\002pw\030\010 \001(\r\022\027\n\017i"
    "f_not_modified\030\t \001(\010\022\025\n\rif_none_match\030\n "
    "\001(\010\022\023\n\013return_head\030\013 \001(\010\022\017\n\007timeout\030\014 \001("
    "\r\022\014\n\004asis\030\r \001(\010\022\025\n\rsloppy_quorum\030\016 \001(\010\022\r"
    "\n\005n_val\030\017 \001(\r\022\014\n\004type\030\020 \001(\014\"G\n\nRpbPutRes"
    "p\022\034\n\007content\030\001 \003(\0132\013.RpbContent\022\016\n\006vcloc"
    "k\030\002 \001(\014\022\013\n\003key\030\003 \001(\014\"\303\001\n\tRpbDelReq\022\016\n\006bu"
    "cket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\n\n\002rw\030\003 \001(\r\022\016\n\006v"
    "clock\030\004 \001(\014\022\t\n\001r\030\005 \001(\r\022\t\n\001w\030\006 \001(\r\022\n\n\002pr\030"
    "\007 \001(\r\022\n\n\002pw\030\010 \001(\r\022\n\n\002dw\030\t \001(\r\022\017\n\007timeout"
    "\030\n \001(\r\022\025\n\rsloppy_quorum\030\013 \001(\010\022\r\n\005n_val\030\014"
    " \001(\r\022\014\n\004type\030\r \001(\014\"B\n\021RpbListBucketsReq\022"
    "\017\n\007timeout\030\001 \001(\r\022\016\n\006stream\030\002 \001(\010\022\014\n\004type"
    "\030\003 \001(\014\"3\n\022RpbListBucketsResp\022\017\n\007buckets\030"
    "\001 \003(\014\022\014\n\004done\030\002 \001(\010\"\?\n\016RpbListKeysReq\022\016\n"
    "\006bucket\030\001 \002(\014\022\017\n\007timeout\030\002 \001(\r\022\014\n\004type\030\003"
    " \001(\014\"-\n\017RpbListKeysResp\022\014\n\004keys\030\001 \003(\014\022\014\n"
    "\004done\030\002 \001(\010\"5\n\014RpbMapRedReq\022\017\n\007request\030\001"
    " \002(\014\022\024\n\014content_type\030\002 \002(\014\">\n\rRpbMapRedR"
    "esp\022\r\n\005phase\030\001 \001(\r\022\020\n\010response\030\002 \001(\014\022\014\n\004"
    "done\030\003 \001(\010\"\371\002\n\013RpbIndexReq\022\016\n\006bucket\030\001 \002"
    "(\014\022\r\n\005index\030\002 \002(\014\022*\n\005qtype\030\003 \002(\0162\033.RpbIn"
    "dexReq.IndexQueryType\022\013\n\003key\030\004 \001(\014\022\021\n\tra"
    "nge_min\030\005 \001(\014\022\021\n\trange_max\030\006 \001(\014\022\024\n\014retu"
    "rn_terms\030\007 \001(\010\022\016\n\006stream\030\010 \001(\010\022\023\n\013max_re"
    "sults\030\t \001(\r\022\024\n\014continuation\030\n \001(\014\022\017\n\007tim"
    "eout\030\013 \001(\r\022\014\n\004type\030\014 \001(\014\022\022\n\nterm_regex\030\r"
    " \001(\014\022\027\n\017pagination_sort\030\016 \001(\010\022\025\n\rcover_c"
    "ontext\030\017 \001(\014\022\023\n\013return_body\030\020 \001(\010\"#\n\016Ind"
    "exQueryType\022\006\n\002eq\020\000\022\t\n\005range\020\001\"[\n\014RpbInd"
    "exResp\022\014\n\004keys\030\001 \003(\014\022\031\n\007results\030\002 \003(\0132\010."
    "RpbPair\022\024\n\014continuation\030\003 \001(\014\022\014\n\004done\030\004 "
    "\001(\010\"X\n\020RpbIndexBodyResp\022 \n\007objects\030\001 \003(\013"
    "2\017.RpbIndexObject\022\024\n\014continuation\030\002 \001(\014\022"
    "\014\n\004done\030\003 \001(\010\"\330\001\n\016RpbCSBucketReq\022\016\n\006buck"
    "et\030\001 \002(\014\022\021\n\tstart_key\030\002 \002(\014\022\017\n\007end_key\030\003"
    " \001(\014\022\030\n\nstart_incl\030\004 \001(\010:\004true\022\027\n\010end_in"
    "cl\030\005 \001(\010:\005false\022\024\n\014continuation\030\006 \001(\014\022\023\n"
    "\013max_results\030\007 \001(\r\022\017\n\007timeout\030\010 \001(\r\022\014\n\004t"
    "ype\030\t \001(\014\022\025\n\rcover_context\030\n \001(\014\"W\n\017RpbC"
    "SBucketResp\022 \n\007objects\030\001 \003(\0132\017.RpbIndexO"
    "bject\022\024\n\014continuation\030\002 \001(\014\022\014\n\004done\030\003 \001("
    "\010\":\n\016RpbIndexObject\022\013\n\003key\030\001 \002(\014\022\033\n\006obje"
    "ct\030\002 \002(\0132\013.RpbGetResp\"\365\001\n\nRpbContent\022\r\n\005"
    "value\030\001 \002(\014\022\024\n\014content_type\030\002 \001(\014\022\017\n\007cha"
    "rset\030\003 \001(\014\022\030\n\020content_encoding\030\004 \001(\014\022\014\n\004"
    "vtag\030\005 \001(\014\022\027\n\005links\030\006 \003(\0132\010.RpbLink\022\020\n\010l"
    "ast_mod\030\007 \001(\r\022\026\n\016last_mod_usecs\030\010 \001(\r\022\032\n"
    "\010usermeta\030\t \003(\0132\010.RpbPair\022\031\n\007indexes\030\n \003"
    "(\0132\010.RpbPair\022\017\n\007deleted\030\013 \001(\010\"3\n\007RpbLink"
    "\022\016\n\006bucket\030\001 \001(\014\022\013\n\003key\030\002 \001(\014\022\013\n\003tag\030\003 \001"
    "(\014\"z\n\023RpbCounterUpdateReq\022\016\n\006bucket\030\001 \002("
    "\014\022\013\n\003key\030\002 \002(\014\022\016\n\006amount\030\003 \002(\022\022\t\n\001w\030\004 \001("
    "\r\022\n\n\002dw\030\005 \001(\r\022\n\n\002pw\030\006 \001(\r\022\023\n\013returnvalue"
    "\030\007 \001(\010\"%\n\024RpbCounterUpdateResp\022\r\n\005value\030"
    "\001 \001(\022\"q\n\020RpbCounterGetReq\022\016\n\006bucket\030\001 \002("
    "\014\022\013\n\003key\030\002 \002(\014\022\t\n\001r\030\003 \001(\r\022\n\n\002pr\030\004 \001(\r\022\024\n"
    "\014basic_quorum\030\005 \001(\010\022\023\n\013notfound_ok\030\006 \001(\010"
    "\"\"\n\021RpbCounterGetResp\022\r\n\005value\030\001 \001(\022\"G\n\032"
    "RpbGetBucketKeyPreflistReq\022\016\n\006bucket\030\001 \002"
    "(\014\022\013\n\003key\030\002 \002(\014\022\014\n\004type\030\003 \001(\014\"J\n\033RpbGetB"
    "ucketKeyPreflistResp\022+\n\010preflist\030\001 \003(\0132\031"
    ".RpbBucketKeyPreflistItem\"L\n\030RpbBucketKe"
    "yPreflistItem\022\021\n\tpartition\030\001 \002(\003\022\014\n\004node"
    "\030\002 \002(\014\022\017\n\007primary\030\003 \002(\010\"x\n\016RpbCoverageRe"
    "q\022\014\n\004type\030\001 \001(\014\022\016\n\006bucket\030\002 \002(\014\022\026\n\016min_p"
    "artitions\030\003 \001(\r\022\025\n\rreplace_cover\030\004 \001(\014\022\031"
    "\n\021unavailable_cover\030\005 \003(\014\"5\n\017RpbCoverage"
    "Resp\022\"\n\007entries\030\001 \003(\0132\021.RpbCoverageEntry"
    "\"Z\n\020RpbCoverageEntry\022\n\n\002ip\030\001 \002(\014\022\014\n\004port"
    "\030\002 \002(\r\022\025\n\rkeyspace_desc\030\003 \001(\014\022\025\n\rcover_c"
    "ontext\030\004 \002(\014\"/\n\014RpbErrorResp\022\016\n\006errmsg\030\001"
    " \002(\014\022\017\n\007errcode\030\002 \002(\r\"<\n\024RpbGetServerInf"
    "oResp\022\014\n\004node\030\001 \001(\014\022\026\n\016server_version\030\002 "
    "\001(\014\"%\n\007RpbPair\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \001"
    "(\014\"/\n\017RpbGetBucketReq\022\016\n\006bucket\030\001 \002(\014\022\014\n"
    "\004type\030\002 \001(\014\"2\n\020RpbGetBucketResp\022\036\n\005props"
    "\030\001 \002(\0132\017.RpbBucketProps\"O\n\017RpbSetBucketR"
    "eq\022\016\n\006bucket\030\001 \002(\014\022\036\n\005props\030\002 \002(\0132\017.RpbB"
    "ucketProps\022\014\n\004type\030\003 \001(\014\"1\n\021RpbResetBuck"
    "etReq\022\016\n\006bucket\030\001 \002(\014\022\014\n\004type\030\002 \001(\014\"#\n\023R"
    "pbGetBucketTypeReq\022\014\n\004type\030\001 \002(\014\"C\n\023RpbS"
    "etBucketTypeReq\022\014\n\004type\030\001 \002(\014\022\036\n\005props\030\002"
    " \002(\0132\017.RpbBucketProps\"-\n\tRpbModFun\022\016\n\006mo"
    "dule\030\001 \002(\014\022\020\n\010function\030\002 \002(\014\"9\n\rRpbCommi"
    "tHook\022\032\n\006modfun\030\001 \001(\0132\n.RpbModFun\022\014\n\004nam"
    "e\030\002 \001(\014\"\260\005\n\016RpbBucketProps\022\r\n\005n_val\030\001 \001("
    "\r\022\022\n\nallow_mult\030\002 \001(\010\022\027\n\017last_write_wins"
    "\030\003 \001(\010\022!\n\tprecommit\030\004 \003(\0132\016.RpbCommitHoo"
    "k\022\034\n\rhas_precommit\030\005 \001(\010:\005false\022\"\n\npostc"
    "ommit\030\006 \003(\0132\016.RpbCommitHook\022\035\n\016has_postc"
    "ommit\030\007 \001(\010:\005false\022 \n\014chash_keyfun\030\010 \001(\013"
    "2\n.RpbModFun\022\033\n\007linkfun\030\t \001(\0132\n.RpbModFu"
    "n\022\022\n\nold_vclock\030\n \001(\r\022\024\n\014young_vclock\030\013 "
    "\001(\r\022\022\n\nbig_vclock\030\014 \001(\r\022\024\n\014small_vclock\030"
    "\r \001(\r\022\n\n\002pr\030\016 \001(\r\022\t\n\001r\030\017 \001(\r\022\t\n\001w\030\020 \001(\r\022"
    "\n\n\002pw\030\021 \001(\r\022\n\n\002dw\030\022 \001(\r\022\n\n\002rw\030\023 \001(\r\022\024\n\014b"
    "asic_quorum\030\024 \001(\010\022\023\n\013notfound_ok\030\025 \001(\010\022\017"
    "\n\007backend\030\026 \001(\014\022\016\n\006search\030\027 \001(\010\022)\n\004repl\030"
    "\030 \001(\0162\033.RpbBucketProps.RpbReplMode\022\024\n\014se"
    "arch_index\030\031 \001(\014\022\020\n\010datatype\030\032 \001(\014\022\022\n\nco"
    "nsistent\030\033 \001(\010\022\022\n\nwrite_once\030\034 \001(\010\">\n\013Rp"
    "bReplMode\022\t\n\005FALSE\020\000\022\014\n\010REALTIME\020\001\022\014\n\010FU"
    "LLSYNC\020\002\022\010\n\004TRUE\020\003\",\n\nRpbAuthReq\022\014\n\004user"
    "\030\001 \002(\014\022\020\n\010password\030\002 \002(\014\"*\n\024RpbToggleEnc"
    "odingReq\022\022\n\nuse_native\030\001 \002(\010\"+\n\025RpbToggl"
    "eEncodingResp\022\022\n\nuse_native\030\001 \002(\010\"(\n\014Rpb"
    "SearchDoc\022\030\n\006fields\030\001 \003(\0132\010.RpbPair\"\235\001\n\021"
    "RpbSearchQueryReq\022\t\n\001q\030\001 \002(\014\022\r\n\005index\030\002 "
    "\002(\014\022\014\n\004rows\030\003 \001(\r\022\r\n\005start\030\004 \001(\r\022\014\n\004sort"
    "\030\005 \001(\014\022\016\n\006filter\030\006 \001(\014\022\n\n\002df\030\007 \001(\014\022\n\n\002op"
    "\030\010 \001(\014\022\n\n\002fl\030\t \003(\014\022\017\n\007presort\030\n \001(\014\"W\n\022R"
    "pbSearchQueryResp\022\033\n\004docs\030\001 \003(\0132\r.RpbSea"
    "rchDoc\022\021\n\tmax_score\030\002 \001(\002\022\021\n\tnum_found\030\003"
    " \001(\r\"[\n\nTsQueryReq\022\037\n\005query\030\001 \001(\0132\020.TsIn"
    "terpolation\022\025\n\006stream\030\002 \001(\010:\005false\022\025\n\rco"
    "ver_context\030\003 \001(\014\"^\n\013TsQueryResp\022%\n\007colu"
    "mns\030\001 \003(\0132\024.TsColumnDescription\022\024\n\004rows\030"
    "\002 \003(\0132\006.TsRow\022\022\n\004done\030\003 \001(\010:\004true\"@\n\010TsG"
    "etReq\022\r\n\005table\030\001 \002(\014\022\024\n\003key\030\002 \003(\0132\007.TsCe"
    "ll\022\017\n\007timeout\030\003 \001(\r\"H\n\tTsGetResp\022%\n\007colu"
    "mns\030\001 \003(\0132\024.TsColumnDescription\022\024\n\004rows\030"
    "\002 \003(\0132\006.TsRow\"V\n\010TsPutReq\022\r\n\005table\030\001 \002(\014"
    "\022%\n\007columns\030\002 \003(\0132\024.TsColumnDescription\022"
    "\024\n\004rows\030\003 \003(\0132\006.TsRow\"Y\n\013TsTtbPutReq\022\r\n\005"
    "table\030\001 \002(\014\022%\n\007columns\030\002 \003(\0132\024.TsColumnD"
    "escription\022\024\n\004rows\030\003 \003(\0132\006.TsRow\"\013\n\tTsPu"
    "tResp\"P\n\010TsDelReq\022\r\n\005table\030\001 \002(\014\022\024\n\003key\030"
    "\002 \003(\0132\007.TsCell\022\016\n\006vclock\030\003 \001(\014\022\017\n\007timeou"
    "t\030\004 \001(\r\"\013\n\tTsDelResp\"A\n\017TsInterpolation\022"
    "\014\n\004base\030\001 \002(\014\022 \n\016interpolations\030\002 \003(\0132\010."
    "RpbPair\"@\n\023TsColumnDescription\022\014\n\004name\030\001"
    " \002(\014\022\033\n\004type\030\002 \002(\0162\r.TsColumnType\"\037\n\005TsR"
    "ow\022\026\n\005cells\030\001 \003(\0132\007.TsCell\"{\n\006TsCell\022\025\n\r"
    "varchar_value\030\001 \001(\014\022\024\n\014sint64_value\030\002 \001("
    "\022\022\027\n\017timestamp_value\030\003 \001(\022\022\025\n\rboolean_va"
    "lue\030\004 \001(\010\022\024\n\014double_value\030\005 \001(\001\"/\n\rTsLis"
    "tKeysReq\022\r\n\005table\030\001 \002(\014\022\017\n\007timeout\030\002 \001(\r"
    "\"4\n\016TsListKeysResp\022\024\n\004keys\030\001 \003(\0132\006.TsRow"
    "\022\014\n\004done\030\002 \001(\010\"q\n\rTsCoverageReq\022\037\n\005query"
    "\030\001 \001(\0132\020.TsInterpolation\022\r\n\005table\030\002 \002(\014\022"
    "\025\n\rreplace_cover\030\003 \001(\014\022\031\n\021unavailable_co"
    "ver\030\004 \003(\014\"3\n\016TsCoverageResp\022!\n\007entries\030\001"
    " \003(\0132\020.TsCoverageEntry\"[\n\017TsCoverageEntr"
    "y\022\n\n\002ip\030\001 \002(\014\022\014\n\004port\030\002 \002(\r\022\025\n\rcover_con"
    "text\030\003 \002(\014\022\027\n\005range\030\004 \001(\0132\010.TsRange\"\223\001\n\007"
    "TsRange\022\022\n\nfield_name\030\001 \002(\014\022\023\n\013lower_bou"
    "nd\030\002 \002(\022\022\035\n\025lower_bound_inclusive\030\003 \002(\010\022"
    "\023\n\013upper_bound\030\004 \002(\022\022\035\n\025upper_bound_incl"
    "usive\030\005 \002(\010\022\014\n\004desc\030\006 \002(\014\"\?\n\020RpbYokozuna"
    "Index\022\014\n\004name\030\001 \002(\014\022\016\n\006schema\030\002 \001(\014\022\r\n\005n"
    "_val\030\003 \001(\r\"&\n\026RpbYokozunaIndexGetReq\022\014\n\004"
    "name\030\001 \001(\014\";\n\027RpbYokozunaIndexGetResp\022 \n"
    "\005index\030\001 \003(\0132\021.RpbYokozunaIndex\"K\n\026RpbYo"
    "kozunaIndexPutReq\022 \n\005index\030\001 \002(\0132\021.RpbYo"
    "kozunaIndex\022\017\n\007timeout\030\002 \001(\r\")\n\031RpbYokoz"
    "unaIndexDeleteReq\022\014\n\004name\030\001 \002(\014\"2\n\021RpbYo"
    "kozunaSchema\022\014\n\004name\030\001 \002(\014\022\017\n\007content\030\002 "
    "\001(\014\"=\n\027RpbYokozunaSchemaPutReq\022\"\n\006schema"
    "\030\001 \002(\0132\022.RpbYokozunaSchema\"\'\n\027RpbYokozun"
    "aSchemaGetReq\022\014\n\004name\030\001 \002(\014\">\n\030RpbYokozu"
    "naSchemaGetResp\022\"\n\006schema\030\001 \002(\0132\022.RpbYok"
    "ozunaSchema*O\n\014TsColumnType\022\013\n\007VARCHAR\020\000"
    "\022\n\n\006SINT64\020\001\022\n\n\006DOUBLE\020\002\022\r\n\tTIMESTAMP\020\003\022"
    "\013\n\007BOOLEAN\020\004", 8612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riak.proto", &protobuf_RegisterTypes);
  MapField::default_instance_ = new MapField();
  MapEntry::default_instance_ = new MapEntry();
  DtFetchReq::default_instance_ = new DtFetchReq();
  DtValue::default_instance_ = new DtValue();
  DtFetchResp::default_instance_ = new DtFetchResp();
  CounterOp::default_instance_ = new CounterOp();
  SetOp::default_instance_ = new SetOp();
  MapUpdate::default_instance_ = new MapUpdate();
  MapOp::default_instance_ = new MapOp();
  DtOp::default_instance_ = new DtOp();
  DtUpdateReq::default_instance_ = new DtUpdateReq();
  DtUpdateResp::default_instance_ = new DtUpdateResp();
  RpbGetClientIdResp::default_instance_ = new RpbGetClientIdResp();
  RpbSetClientIdReq::default_instance_ = new RpbSetClientIdReq();
  RpbGetReq::default_instance_ = new RpbGetReq();
  RpbGetResp::default_instance_ = new RpbGetResp();
  RpbPutReq::default_instance_ = new RpbPutReq();
  RpbPutResp::default_instance_ = new RpbPutResp();
  RpbDelReq::default_instance_ = new RpbDelReq();
  RpbListBucketsReq::default_instance_ = new RpbListBucketsReq();
  RpbListBucketsResp::default_instance_ = new RpbListBucketsResp();
  RpbListKeysReq::default_instance_ = new RpbListKeysReq();
  RpbListKeysResp::default_instance_ = new RpbListKeysResp();
  RpbMapRedReq::default_instance_ = new RpbMapRedReq();
  RpbMapRedResp::default_instance_ = new RpbMapRedResp();
  RpbIndexReq::default_instance_ = new RpbIndexReq();
  RpbIndexResp::default_instance_ = new RpbIndexResp();
  RpbIndexBodyResp::default_instance_ = new RpbIndexBodyResp();
  RpbCSBucketReq::default_instance_ = new RpbCSBucketReq();
  RpbCSBucketResp::default_instance_ = new RpbCSBucketResp();
  RpbIndexObject::default_instance_ = new RpbIndexObject();
  RpbContent::default_instance_ = new RpbContent();
  RpbLink::default_instance_ = new RpbLink();
  RpbCounterUpdateReq::default_instance_ = new RpbCounterUpdateReq();
  RpbCounterUpdateResp::default_instance_ = new RpbCounterUpdateResp();
  RpbCounterGetReq::default_instance_ = new RpbCounterGetReq();
  RpbCounterGetResp::default_instance_ = new RpbCounterGetResp();
  RpbGetBucketKeyPreflistReq::default_instance_ = new RpbGetBucketKeyPreflistReq();
  RpbGetBucketKeyPreflistResp::default_instance_ = new RpbGetBucketKeyPreflistResp();
  RpbBucketKeyPreflistItem::default_instance_ = new RpbBucketKeyPreflistItem();
  RpbCoverageReq::default_instance_ = new RpbCoverageReq();
  RpbCoverageResp::default_instance_ = new RpbCoverageResp();
  RpbCoverageEntry::default_instance_ = new RpbCoverageEntry();
  RpbErrorResp::default_instance_ = new RpbErrorResp();
  RpbGetServerInfoResp::default_instance_ = new RpbGetServerInfoResp();
  RpbPair::default_instance_ = new RpbPair();
  RpbGetBucketReq::default_instance_ = new RpbGetBucketReq();
  RpbGetBucketResp::default_instance_ = new RpbGetBucketResp();
  RpbSetBucketReq::default_instance_ = new RpbSetBucketReq();
  RpbResetBucketReq::default_instance_ = new RpbResetBucketReq();
  RpbGetBucketTypeReq::default_instance_ = new RpbGetBucketTypeReq();
  RpbSetBucketTypeReq::default_instance_ = new RpbSetBucketTypeReq();
  RpbModFun::default_instance_ = new RpbModFun();
  RpbCommitHook::default_instance_ = new RpbCommitHook();
  RpbBucketProps::default_instance_ = new RpbBucketProps();
  RpbAuthReq::default_instance_ = new RpbAuthReq();
  RpbToggleEncodingReq::default_instance_ = new RpbToggleEncodingReq();
  RpbToggleEncodingResp::default_instance_ = new RpbToggleEncodingResp();
  RpbSearchDoc::default_instance_ = new RpbSearchDoc();
  RpbSearchQueryReq::default_instance_ = new RpbSearchQueryReq();
  RpbSearchQueryResp::default_instance_ = new RpbSearchQueryResp();
  TsQueryReq::default_instance_ = new TsQueryReq();
  TsQueryResp::default_instance_ = new TsQueryResp();
  TsGetReq::default_instance_ = new TsGetReq();
  TsGetResp::default_instance_ = new TsGetResp();
  TsPutReq::default_instance_ = new TsPutReq();
  TsTtbPutReq::default_instance_ = new TsTtbPutReq();
  TsPutResp::default_instance_ = new TsPutResp();
  TsDelReq::default_instance_ = new TsDelReq();
  TsDelResp::default_instance_ = new TsDelResp();
  TsInterpolation::default_instance_ = new TsInterpolation();
  TsColumnDescription::default_instance_ = new TsColumnDescription();
  TsRow::default_instance_ = new TsRow();
  TsCell::default_instance_ = new TsCell();
  TsListKeysReq::default_instance_ = new TsListKeysReq();
  TsListKeysResp::default_instance_ = new TsListKeysResp();
  TsCoverageReq::default_instance_ = new TsCoverageReq();
  TsCoverageResp::default_instance_ = new TsCoverageResp();
  TsCoverageEntry::default_instance_ = new TsCoverageEntry();
  TsRange::default_instance_ = new TsRange();
  RpbYokozunaIndex::default_instance_ = new RpbYokozunaIndex();
  RpbYokozunaIndexGetReq::default_instance_ = new RpbYokozunaIndexGetReq();
  RpbYokozunaIndexGetResp::default_instance_ = new RpbYokozunaIndexGetResp();
  RpbYokozunaIndexPutReq::default_instance_ = new RpbYokozunaIndexPutReq();
  RpbYokozunaIndexDeleteReq::default_instance_ = new RpbYokozunaIndexDeleteReq();
  RpbYokozunaSchema::default_instance_ = new RpbYokozunaSchema();
  RpbYokozunaSchemaPutReq::default_instance_ = new RpbYokozunaSchemaPutReq();
  RpbYokozunaSchemaGetReq::default_instance_ = new RpbYokozunaSchemaGetReq();
  RpbYokozunaSchemaGetResp::default_instance_ = new RpbYokozunaSchemaGetResp();
  MapField::default_instance_->InitAsDefaultInstance();
  MapEntry::default_instance_->InitAsDefaultInstance();
  DtFetchReq::default_instance_->InitAsDefaultInstance();
  DtValue::default_instance_->InitAsDefaultInstance();
  DtFetchResp::default_instance_->InitAsDefaultInstance();
  CounterOp::default_instance_->InitAsDefaultInstance();
  SetOp::default_instance_->InitAsDefaultInstance();
  MapUpdate::default_instance_->InitAsDefaultInstance();
  MapOp::default_instance_->InitAsDefaultInstance();
  DtOp::default_instance_->InitAsDefaultInstance();
  DtUpdateReq::default_instance_->InitAsDefaultInstance();
  DtUpdateResp::default_instance_->InitAsDefaultInstance();
  RpbGetClientIdResp::default_instance_->InitAsDefaultInstance();
  RpbSetClientIdReq::default_instance_->InitAsDefaultInstance();
  RpbGetReq::default_instance_->InitAsDefaultInstance();
  RpbGetResp::default_instance_->InitAsDefaultInstance();
  RpbPutReq::default_instance_->InitAsDefaultInstance();
  RpbPutResp::default_instance_->InitAsDefaultInstance();
  RpbDelReq::default_instance_->InitAsDefaultInstance();
  RpbListBucketsReq::default_instance_->InitAsDefaultInstance();
  RpbListBucketsResp::default_instance_->InitAsDefaultInstance();
  RpbListKeysReq::default_instance_->InitAsDefaultInstance();
  RpbListKeysResp::default_instance_->InitAsDefaultInstance();
  RpbMapRedReq::default_instance_->InitAsDefaultInstance();
  RpbMapRedResp::default_instance_->InitAsDefaultInstance();
  RpbIndexReq::default_instance_->InitAsDefaultInstance();
  RpbIndexResp::default_instance_->InitAsDefaultInstance();
  RpbIndexBodyResp::default_instance_->InitAsDefaultInstance();
  RpbCSBucketReq::default_instance_->InitAsDefaultInstance();
  RpbCSBucketResp::default_instance_->InitAsDefaultInstance();
  RpbIndexObject::default_instance_->InitAsDefaultInstance();
  RpbContent::default_instance_->InitAsDefaultInstance();
  RpbLink::default_instance_->InitAsDefaultInstance();
  RpbCounterUpdateReq::default_instance_->InitAsDefaultInstance();
  RpbCounterUpdateResp::default_instance_->InitAsDefaultInstance();
  RpbCounterGetReq::default_instance_->InitAsDefaultInstance();
  RpbCounterGetResp::default_instance_->InitAsDefaultInstance();
  RpbGetBucketKeyPreflistReq::default_instance_->InitAsDefaultInstance();
  RpbGetBucketKeyPreflistResp::default_instance_->InitAsDefaultInstance();
  RpbBucketKeyPreflistItem::default_instance_->InitAsDefaultInstance();
  RpbCoverageReq::default_instance_->InitAsDefaultInstance();
  RpbCoverageResp::default_instance_->InitAsDefaultInstance();
  RpbCoverageEntry::default_instance_->InitAsDefaultInstance();
  RpbErrorResp::default_instance_->InitAsDefaultInstance();
  RpbGetServerInfoResp::default_instance_->InitAsDefaultInstance();
  RpbPair::default_instance_->InitAsDefaultInstance();
  RpbGetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbGetBucketResp::default_instance_->InitAsDefaultInstance();
  RpbSetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbResetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbGetBucketTypeReq::default_instance_->InitAsDefaultInstance();
  RpbSetBucketTypeReq::default_instance_->InitAsDefaultInstance();
  RpbModFun::default_instance_->InitAsDefaultInstance();
  RpbCommitHook::default_instance_->InitAsDefaultInstance();
  RpbBucketProps::default_instance_->InitAsDefaultInstance();
  RpbAuthReq::default_instance_->InitAsDefaultInstance();
  RpbToggleEncodingReq::default_instance_->InitAsDefaultInstance();
  RpbToggleEncodingResp::default_instance_->InitAsDefaultInstance();
  RpbSearchDoc::default_instance_->InitAsDefaultInstance();
  RpbSearchQueryReq::default_instance_->InitAsDefaultInstance();
  RpbSearchQueryResp::default_instance_->InitAsDefaultInstance();
  TsQueryReq::default_instance_->InitAsDefaultInstance();
  TsQueryResp::default_instance_->InitAsDefaultInstance();
  TsGetReq::default_instance_->InitAsDefaultInstance();
  TsGetResp::default_instance_->InitAsDefaultInstance();
  TsPutReq::default_instance_->InitAsDefaultInstance();
  TsTtbPutReq::default_instance_->InitAsDefaultInstance();
  TsPutResp::default_instance_->InitAsDefaultInstance();
  TsDelReq::default_instance_->InitAsDefaultInstance();
  TsDelResp::default_instance_->InitAsDefaultInstance();
  TsInterpolation::default_instance_->InitAsDefaultInstance();
  TsColumnDescription::default_instance_->InitAsDefaultInstance();
  TsRow::default_instance_->InitAsDefaultInstance();
  TsCell::default_instance_->InitAsDefaultInstance();
  TsListKeysReq::default_instance_->InitAsDefaultInstance();
  TsListKeysResp::default_instance_->InitAsDefaultInstance();
  TsCoverageReq::default_instance_->InitAsDefaultInstance();
  TsCoverageResp::default_instance_->InitAsDefaultInstance();
  TsCoverageEntry::default_instance_->InitAsDefaultInstance();
  TsRange::default_instance_->InitAsDefaultInstance();
  RpbYokozunaIndex::default_instance_->InitAsDefaultInstance();
  RpbYokozunaIndexGetReq::default_instance_->InitAsDefaultInstance();
  RpbYokozunaIndexGetResp::default_instance_->InitAsDefaultInstance();
  RpbYokozunaIndexPutReq::default_instance_->InitAsDefaultInstance();
  RpbYokozunaIndexDeleteReq::default_instance_->InitAsDefaultInstance();
  RpbYokozunaSchema::default_instance_->InitAsDefaultInstance();
  RpbYokozunaSchemaPutReq::default_instance_->InitAsDefaultInstance();
  RpbYokozunaSchemaGetReq::default_instance_->InitAsDefaultInstance();
  RpbYokozunaSchemaGetResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_riak_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_riak_2eproto {
  StaticDescriptorInitializer_riak_2eproto() {
    protobuf_AddDesc_riak_2eproto();
  }
} static_descriptor_initializer_riak_2eproto_;
const ::google::protobuf::EnumDescriptor* TsColumnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsColumnType_descriptor_;
}
bool TsColumnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MapField_MapFieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapField_MapFieldType_descriptor_;
}
bool MapField_MapFieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapField_MapFieldType MapField::COUNTER;
const MapField_MapFieldType MapField::SET;
const MapField_MapFieldType MapField::REGISTER;
const MapField_MapFieldType MapField::FLAG;
const MapField_MapFieldType MapField::MAP;
const MapField_MapFieldType MapField::MapFieldType_MIN;
const MapField_MapFieldType MapField::MapFieldType_MAX;
const int MapField::MapFieldType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapField::kNameFieldNumber;
const int MapField::kTypeFieldNumber;
#endif  // !_MSC_VER

MapField::MapField()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapField)
}

void MapField::InitAsDefaultInstance() {
}

MapField::MapField(const MapField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapField)
}

void MapField::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapField::~MapField() {
  // @@protoc_insertion_point(destructor:MapField)
  SharedDtor();
}

void MapField::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MapField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapField_descriptor_;
}

const MapField& MapField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

MapField* MapField::default_instance_ = NULL;

MapField* MapField::New() const {
  return new MapField;
}

void MapField::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .MapField.MapFieldType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapField_MapFieldType_IsValid(value)) {
            set_type(static_cast< ::MapField_MapFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapField)
  return false;
#undef DO_
}

void MapField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapField)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required .MapField.MapFieldType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapField)
}

::google::protobuf::uint8* MapField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapField)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required .MapField.MapFieldType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapField)
  return target;
}

int MapField::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required .MapField.MapFieldType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapField::MergeFrom(const MapField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapField::CopyFrom(const MapField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapField::Swap(MapField* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapField_descriptor_;
  metadata.reflection = MapField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapEntry::kFieldFieldNumber;
const int MapEntry::kCounterValueFieldNumber;
const int MapEntry::kSetValueFieldNumber;
const int MapEntry::kRegisterValueFieldNumber;
const int MapEntry::kFlagValueFieldNumber;
const int MapEntry::kMapValueFieldNumber;
#endif  // !_MSC_VER

MapEntry::MapEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapEntry)
}

void MapEntry::InitAsDefaultInstance() {
  field_ = const_cast< ::MapField*>(&::MapField::default_instance());
}

MapEntry::MapEntry(const MapEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapEntry)
}

void MapEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_ = NULL;
  counter_value_ = GOOGLE_LONGLONG(0);
  register_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapEntry::~MapEntry() {
  // @@protoc_insertion_point(destructor:MapEntry)
  SharedDtor();
}

void MapEntry::SharedDtor() {
  if (register_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete register_value_;
  }
  if (this != default_instance_) {
    delete field_;
  }
}

void MapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapEntry_descriptor_;
}

const MapEntry& MapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

MapEntry* MapEntry::default_instance_ = NULL;

MapEntry* MapEntry::New() const {
  return new MapEntry;
}

void MapEntry::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    if (has_field()) {
      if (field_ != NULL) field_->::MapField::Clear();
    }
    counter_value_ = GOOGLE_LONGLONG(0);
    if (has_register_value()) {
      if (register_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        register_value_->clear();
      }
    }
    flag_value_ = false;
  }
  set_value_.Clear();
  map_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MapField field = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_counter_value;
        break;
      }

      // optional sint64 counter_value = 2;
      case 2: {
        if (tag == 16) {
         parse_counter_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &counter_value_)));
          set_has_counter_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_set_value;
        break;
      }

      // repeated bytes set_value = 3;
      case 3: {
        if (tag == 26) {
         parse_set_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_set_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_set_value;
        if (input->ExpectTag(34)) goto parse_register_value;
        break;
      }

      // optional bytes register_value = 4;
      case 4: {
        if (tag == 34) {
         parse_register_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_register_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flag_value;
        break;
      }

      // optional bool flag_value = 5;
      case 5: {
        if (tag == 40) {
         parse_flag_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_value_)));
          set_has_flag_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_map_value;
        break;
      }

      // repeated .MapEntry map_value = 6;
      case 6: {
        if (tag == 50) {
         parse_map_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_map_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapEntry)
  return false;
#undef DO_
}

void MapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapEntry)
  // required .MapField field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(), output);
  }

  // optional sint64 counter_value = 2;
  if (has_counter_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->counter_value(), output);
  }

  // repeated bytes set_value = 3;
  for (int i = 0; i < this->set_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->set_value(i), output);
  }

  // optional bytes register_value = 4;
  if (has_register_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->register_value(), output);
  }

  // optional bool flag_value = 5;
  if (has_flag_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flag_value(), output);
  }

  // repeated .MapEntry map_value = 6;
  for (int i = 0; i < this->map_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->map_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapEntry)
}

::google::protobuf::uint8* MapEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapEntry)
  // required .MapField field = 1;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field(), target);
  }

  // optional sint64 counter_value = 2;
  if (has_counter_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->counter_value(), target);
  }

  // repeated bytes set_value = 3;
  for (int i = 0; i < this->set_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->set_value(i), target);
  }

  // optional bytes register_value = 4;
  if (has_register_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->register_value(), target);
  }

  // optional bool flag_value = 5;
  if (has_flag_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flag_value(), target);
  }

  // repeated .MapEntry map_value = 6;
  for (int i = 0; i < this->map_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->map_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapEntry)
  return target;
}

int MapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MapField field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field());
    }

    // optional sint64 counter_value = 2;
    if (has_counter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->counter_value());
    }

    // optional bytes register_value = 4;
    if (has_register_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->register_value());
    }

    // optional bool flag_value = 5;
    if (has_flag_value()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes set_value = 3;
  total_size += 1 * this->set_value_size();
  for (int i = 0; i < this->set_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->set_value(i));
  }

  // repeated .MapEntry map_value = 6;
  total_size += 1 * this->map_value_size();
  for (int i = 0; i < this->map_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapEntry::MergeFrom(const MapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  set_value_.MergeFrom(from.set_value_);
  map_value_.MergeFrom(from.map_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      mutable_field()->::MapField::MergeFrom(from.field());
    }
    if (from.has_counter_value()) {
      set_counter_value(from.counter_value());
    }
    if (from.has_register_value()) {
      set_register_value(from.register_value());
    }
    if (from.has_flag_value()) {
      set_flag_value(from.flag_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntry::CopyFrom(const MapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_field()) {
    if (!this->field().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->map_value())) return false;
  return true;
}

void MapEntry::Swap(MapEntry* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(counter_value_, other->counter_value_);
    set_value_.Swap(&other->set_value_);
    std::swap(register_value_, other->register_value_);
    std::swap(flag_value_, other->flag_value_);
    map_value_.Swap(&other->map_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapEntry_descriptor_;
  metadata.reflection = MapEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtFetchReq::kBucketFieldNumber;
const int DtFetchReq::kKeyFieldNumber;
const int DtFetchReq::kTypeFieldNumber;
const int DtFetchReq::kRFieldNumber;
const int DtFetchReq::kPrFieldNumber;
const int DtFetchReq::kBasicQuorumFieldNumber;
const int DtFetchReq::kNotfoundOkFieldNumber;
const int DtFetchReq::kTimeoutFieldNumber;
const int DtFetchReq::kSloppyQuorumFieldNumber;
const int DtFetchReq::kNValFieldNumber;
const int DtFetchReq::kIncludeContextFieldNumber;
#endif  // !_MSC_VER

DtFetchReq::DtFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DtFetchReq)
}

void DtFetchReq::InitAsDefaultInstance() {
}

DtFetchReq::DtFetchReq(const DtFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DtFetchReq)
}

void DtFetchReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = 0u;
  pr_ = 0u;
  basic_quorum_ = false;
  notfound_ok_ = false;
  timeout_ = 0u;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  include_context_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtFetchReq::~DtFetchReq() {
  // @@protoc_insertion_point(destructor:DtFetchReq)
  SharedDtor();
}

void DtFetchReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void DtFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtFetchReq_descriptor_;
}

const DtFetchReq& DtFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

DtFetchReq* DtFetchReq::default_instance_ = NULL;

DtFetchReq* DtFetchReq::New() const {
  return new DtFetchReq;
}

void DtFetchReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DtFetchReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(r_, notfound_ok_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    sloppy_quorum_ = false;
    n_val_ = 0u;
    include_context_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DtFetchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_r;
        break;
      }

      // optional uint32 r = 4;
      case 4: {
        if (tag == 32) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 5;
      case 5: {
        if (tag == 40) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_basic_quorum;
        break;
      }

      // optional bool basic_quorum = 6;
      case 6: {
        if (tag == 48) {
         parse_basic_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_quorum_)));
          set_has_basic_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_notfound_ok;
        break;
      }

      // optional bool notfound_ok = 7;
      case 7: {
        if (tag == 56) {
         parse_notfound_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notfound_ok_)));
          set_has_notfound_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 8;
      case 8: {
        if (tag == 64) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 9;
      case 9: {
        if (tag == 72) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 10;
      case 10: {
        if (tag == 80) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_include_context;
        break;
      }

      // optional bool include_context = 11 [default = true];
      case 11: {
        if (tag == 88) {
         parse_include_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_context_)));
          set_has_include_context();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DtFetchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DtFetchReq)
  return false;
#undef DO_
}

void DtFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DtFetchReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // required bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  // optional uint32 r = 4;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->r(), output);
  }

  // optional uint32 pr = 5;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pr(), output);
  }

  // optional bool basic_quorum = 6;
  if (has_basic_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->basic_quorum(), output);
  }

  // optional bool notfound_ok = 7;
  if (has_notfound_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->notfound_ok(), output);
  }

  // optional uint32 timeout = 8;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timeout(), output);
  }

  // optional bool sloppy_quorum = 9;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 10;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n_val(), output);
  }

  // optional bool include_context = 11 [default = true];
  if (has_include_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->include_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DtFetchReq)
}

::google::protobuf::uint8* DtFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DtFetchReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // required bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  // optional uint32 r = 4;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->r(), target);
  }

  // optional uint32 pr = 5;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pr(), target);
  }

  // optional bool basic_quorum = 6;
  if (has_basic_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->basic_quorum(), target);
  }

  // optional bool notfound_ok = 7;
  if (has_notfound_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->notfound_ok(), target);
  }

  // optional uint32 timeout = 8;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timeout(), target);
  }

  // optional bool sloppy_quorum = 9;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 10;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n_val(), target);
  }

  // optional bool include_context = 11 [default = true];
  if (has_include_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->include_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DtFetchReq)
  return target;
}

int DtFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // optional uint32 r = 4;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 pr = 5;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional bool basic_quorum = 6;
    if (has_basic_quorum()) {
      total_size += 1 + 1;
    }

    // optional bool notfound_ok = 7;
    if (has_notfound_ok()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 8;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool sloppy_quorum = 9;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 10;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bool include_context = 11 [default = true];
    if (has_include_context()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtFetchReq::MergeFrom(const DtFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_basic_quorum()) {
      set_basic_quorum(from.basic_quorum());
    }
    if (from.has_notfound_ok()) {
      set_notfound_ok(from.notfound_ok());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_include_context()) {
      set_include_context(from.include_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtFetchReq::CopyFrom(const DtFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtFetchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DtFetchReq::Swap(DtFetchReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    std::swap(r_, other->r_);
    std::swap(pr_, other->pr_);
    std::swap(basic_quorum_, other->basic_quorum_);
    std::swap(notfound_ok_, other->notfound_ok_);
    std::swap(timeout_, other->timeout_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(include_context_, other->include_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtFetchReq_descriptor_;
  metadata.reflection = DtFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtValue::kCounterValueFieldNumber;
const int DtValue::kSetValueFieldNumber;
const int DtValue::kMapValueFieldNumber;
#endif  // !_MSC_VER

DtValue::DtValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DtValue)
}

void DtValue::InitAsDefaultInstance() {
}

DtValue::DtValue(const DtValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DtValue)
}

void DtValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  counter_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtValue::~DtValue() {
  // @@protoc_insertion_point(destructor:DtValue)
  SharedDtor();
}

void DtValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DtValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtValue_descriptor_;
}

const DtValue& DtValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

DtValue* DtValue::default_instance_ = NULL;

DtValue* DtValue::New() const {
  return new DtValue;
}

void DtValue::Clear() {
  counter_value_ = GOOGLE_LONGLONG(0);
  set_value_.Clear();
  map_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DtValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 counter_value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &counter_value_)));
          set_has_counter_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_set_value;
        break;
      }

      // repeated bytes set_value = 2;
      case 2: {
        if (tag == 18) {
         parse_set_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_set_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_set_value;
        if (input->ExpectTag(26)) goto parse_map_value;
        break;
      }

      // repeated .MapEntry map_value = 3;
      case 3: {
        if (tag == 26) {
         parse_map_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_map_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DtValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DtValue)
  return false;
#undef DO_
}

void DtValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DtValue)
  // optional sint64 counter_value = 1;
  if (has_counter_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->counter_value(), output);
  }

  // repeated bytes set_value = 2;
  for (int i = 0; i < this->set_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->set_value(i), output);
  }

  // repeated .MapEntry map_value = 3;
  for (int i = 0; i < this->map_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->map_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DtValue)
}

::google::protobuf::uint8* DtValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DtValue)
  // optional sint64 counter_value = 1;
  if (has_counter_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->counter_value(), target);
  }

  // repeated bytes set_value = 2;
  for (int i = 0; i < this->set_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->set_value(i), target);
  }

  // repeated .MapEntry map_value = 3;
  for (int i = 0; i < this->map_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->map_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DtValue)
  return target;
}

int DtValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 counter_value = 1;
    if (has_counter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->counter_value());
    }

  }
  // repeated bytes set_value = 2;
  total_size += 1 * this->set_value_size();
  for (int i = 0; i < this->set_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->set_value(i));
  }

  // repeated .MapEntry map_value = 3;
  total_size += 1 * this->map_value_size();
  for (int i = 0; i < this->map_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtValue::MergeFrom(const DtValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  set_value_.MergeFrom(from.set_value_);
  map_value_.MergeFrom(from.map_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counter_value()) {
      set_counter_value(from.counter_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtValue::CopyFrom(const DtValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtValue::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->map_value())) return false;
  return true;
}

void DtValue::Swap(DtValue* other) {
  if (other != this) {
    std::swap(counter_value_, other->counter_value_);
    set_value_.Swap(&other->set_value_);
    map_value_.Swap(&other->map_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtValue_descriptor_;
  metadata.reflection = DtValue_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DtFetchResp_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtFetchResp_DataType_descriptor_;
}
bool DtFetchResp_DataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DtFetchResp_DataType DtFetchResp::COUNTER;
const DtFetchResp_DataType DtFetchResp::SET;
const DtFetchResp_DataType DtFetchResp::MAP;
const DtFetchResp_DataType DtFetchResp::DataType_MIN;
const DtFetchResp_DataType DtFetchResp::DataType_MAX;
const int DtFetchResp::DataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DtFetchResp::kContextFieldNumber;
const int DtFetchResp::kTypeFieldNumber;
const int DtFetchResp::kValueFieldNumber;
#endif  // !_MSC_VER

DtFetchResp::DtFetchResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DtFetchResp)
}

void DtFetchResp::InitAsDefaultInstance() {
  value_ = const_cast< ::DtValue*>(&::DtValue::default_instance());
}

DtFetchResp::DtFetchResp(const DtFetchResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DtFetchResp)
}

void DtFetchResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtFetchResp::~DtFetchResp() {
  // @@protoc_insertion_point(destructor:DtFetchResp)
  SharedDtor();
}

void DtFetchResp::SharedDtor() {
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void DtFetchResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtFetchResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtFetchResp_descriptor_;
}

const DtFetchResp& DtFetchResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

DtFetchResp* DtFetchResp::default_instance_ = NULL;

DtFetchResp* DtFetchResp::New() const {
  return new DtFetchResp;
}

void DtFetchResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        context_->clear();
      }
    }
    type_ = 1;
    if (has_value()) {
      if (value_ != NULL) value_->::DtValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtFetchResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DtFetchResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes context = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .DtFetchResp.DataType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DtFetchResp_DataType_IsValid(value)) {
            set_type(static_cast< ::DtFetchResp_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }

      // optional .DtValue value = 3;
      case 3: {
        if (tag == 26) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DtFetchResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DtFetchResp)
  return false;
#undef DO_
}

void DtFetchResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DtFetchResp)
  // optional bytes context = 1;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->context(), output);
  }

  // required .DtFetchResp.DataType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .DtValue value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DtFetchResp)
}

::google::protobuf::uint8* DtFetchResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DtFetchResp)
  // optional bytes context = 1;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->context(), target);
  }

  // required .DtFetchResp.DataType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .DtValue value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DtFetchResp)
  return target;
}

int DtFetchResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

    // required .DtFetchResp.DataType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .DtValue value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtFetchResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtFetchResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtFetchResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtFetchResp::MergeFrom(const DtFetchResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      mutable_value()->::DtValue::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtFetchResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtFetchResp::CopyFrom(const DtFetchResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtFetchResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void DtFetchResp::Swap(DtFetchResp* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtFetchResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtFetchResp_descriptor_;
  metadata.reflection = DtFetchResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounterOp::kIncrementFieldNumber;
#endif  // !_MSC_VER

CounterOp::CounterOp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CounterOp)
}

void CounterOp::InitAsDefaultInstance() {
}

CounterOp::CounterOp(const CounterOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CounterOp)
}

void CounterOp::SharedCtor() {
  _cached_size_ = 0;
  increment_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterOp::~CounterOp() {
  // @@protoc_insertion_point(destructor:CounterOp)
  SharedDtor();
}

void CounterOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterOp_descriptor_;
}

const CounterOp& CounterOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

CounterOp* CounterOp::default_instance_ = NULL;

CounterOp* CounterOp::New() const {
  return new CounterOp;
}

void CounterOp::Clear() {
  increment_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CounterOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 increment = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &increment_)));
          set_has_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CounterOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CounterOp)
  return false;
#undef DO_
}

void CounterOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CounterOp)
  // optional sint64 increment = 1;
  if (has_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->increment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CounterOp)
}

::google::protobuf::uint8* CounterOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CounterOp)
  // optional sint64 increment = 1;
  if (has_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->increment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CounterOp)
  return target;
}

int CounterOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 increment = 1;
    if (has_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->increment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterOp::MergeFrom(const CounterOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_increment()) {
      set_increment(from.increment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterOp::CopyFrom(const CounterOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterOp::IsInitialized() const {

  return true;
}

void CounterOp::Swap(CounterOp* other) {
  if (other != this) {
    std::swap(increment_, other->increment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterOp_descriptor_;
  metadata.reflection = CounterOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetOp::kAddsFieldNumber;
const int SetOp::kRemovesFieldNumber;
#endif  // !_MSC_VER

SetOp::SetOp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetOp)
}

void SetOp::InitAsDefaultInstance() {
}

SetOp::SetOp(const SetOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SetOp)
}

void SetOp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetOp::~SetOp() {
  // @@protoc_insertion_point(destructor:SetOp)
  SharedDtor();
}

void SetOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOp_descriptor_;
}

const SetOp& SetOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

SetOp* SetOp::default_instance_ = NULL;

SetOp* SetOp::New() const {
  return new SetOp;
}

void SetOp::Clear() {
  adds_.Clear();
  removes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes adds = 1;
      case 1: {
        if (tag == 10) {
         parse_adds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_adds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_adds;
        if (input->ExpectTag(18)) goto parse_removes;
        break;
      }

      // repeated bytes removes = 2;
      case 2: {
        if (tag == 18) {
         parse_removes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_removes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_removes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetOp)
  return false;
#undef DO_
}

void SetOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetOp)
  // repeated bytes adds = 1;
  for (int i = 0; i < this->adds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->adds(i), output);
  }

  // repeated bytes removes = 2;
  for (int i = 0; i < this->removes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->removes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetOp)
}

::google::protobuf::uint8* SetOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetOp)
  // repeated bytes adds = 1;
  for (int i = 0; i < this->adds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->adds(i), target);
  }

  // repeated bytes removes = 2;
  for (int i = 0; i < this->removes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->removes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetOp)
  return target;
}

int SetOp::ByteSize() const {
  int total_size = 0;

  // repeated bytes adds = 1;
  total_size += 1 * this->adds_size();
  for (int i = 0; i < this->adds_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->adds(i));
  }

  // repeated bytes removes = 2;
  total_size += 1 * this->removes_size();
  for (int i = 0; i < this->removes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->removes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetOp::MergeFrom(const SetOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  adds_.MergeFrom(from.adds_);
  removes_.MergeFrom(from.removes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOp::CopyFrom(const SetOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOp::IsInitialized() const {

  return true;
}

void SetOp::Swap(SetOp* other) {
  if (other != this) {
    adds_.Swap(&other->adds_);
    removes_.Swap(&other->removes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOp_descriptor_;
  metadata.reflection = SetOp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MapUpdate_FlagOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapUpdate_FlagOp_descriptor_;
}
bool MapUpdate_FlagOp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MapUpdate_FlagOp MapUpdate::ENABLE;
const MapUpdate_FlagOp MapUpdate::DISABLE;
const MapUpdate_FlagOp MapUpdate::FlagOp_MIN;
const MapUpdate_FlagOp MapUpdate::FlagOp_MAX;
const int MapUpdate::FlagOp_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MapUpdate::kFieldFieldNumber;
const int MapUpdate::kCounterOpFieldNumber;
const int MapUpdate::kSetOpFieldNumber;
const int MapUpdate::kRegisterOpFieldNumber;
const int MapUpdate::kFlagOpFieldNumber;
const int MapUpdate::kMapOpFieldNumber;
#endif  // !_MSC_VER

MapUpdate::MapUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapUpdate)
}

void MapUpdate::InitAsDefaultInstance() {
  field_ = const_cast< ::MapField*>(&::MapField::default_instance());
  counter_op_ = const_cast< ::CounterOp*>(&::CounterOp::default_instance());
  set_op_ = const_cast< ::SetOp*>(&::SetOp::default_instance());
  map_op_ = const_cast< ::MapOp*>(&::MapOp::default_instance());
}

MapUpdate::MapUpdate(const MapUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapUpdate)
}

void MapUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_ = NULL;
  counter_op_ = NULL;
  set_op_ = NULL;
  register_op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_op_ = 1;
  map_op_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapUpdate::~MapUpdate() {
  // @@protoc_insertion_point(destructor:MapUpdate)
  SharedDtor();
}

void MapUpdate::SharedDtor() {
  if (register_op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete register_op_;
  }
  if (this != default_instance_) {
    delete field_;
    delete counter_op_;
    delete set_op_;
    delete map_op_;
  }
}

void MapUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapUpdate_descriptor_;
}

const MapUpdate& MapUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

MapUpdate* MapUpdate::default_instance_ = NULL;

MapUpdate* MapUpdate::New() const {
  return new MapUpdate;
}

void MapUpdate::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_field()) {
      if (field_ != NULL) field_->::MapField::Clear();
    }
    if (has_counter_op()) {
      if (counter_op_ != NULL) counter_op_->::CounterOp::Clear();
    }
    if (has_set_op()) {
      if (set_op_ != NULL) set_op_->::SetOp::Clear();
    }
    if (has_register_op()) {
      if (register_op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        register_op_->clear();
      }
    }
    flag_op_ = 1;
    if (has_map_op()) {
      if (map_op_ != NULL) map_op_->::MapOp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MapField field = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_counter_op;
        break;
      }

      // optional .CounterOp counter_op = 2;
      case 2: {
        if (tag == 18) {
         parse_counter_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_set_op;
        break;
      }

      // optional .SetOp set_op = 3;
      case 3: {
        if (tag == 26) {
         parse_set_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_register_op;
        break;
      }

      // optional bytes register_op = 4;
      case 4: {
        if (tag == 34) {
         parse_register_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_register_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_flag_op;
        break;
      }

      // optional .MapUpdate.FlagOp flag_op = 5;
      case 5: {
        if (tag == 40) {
         parse_flag_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MapUpdate_FlagOp_IsValid(value)) {
            set_flag_op(static_cast< ::MapUpdate_FlagOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_map_op;
        break;
      }

      // optional .MapOp map_op = 6;
      case 6: {
        if (tag == 50) {
         parse_map_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapUpdate)
  return false;
#undef DO_
}

void MapUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapUpdate)
  // required .MapField field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(), output);
  }

  // optional .CounterOp counter_op = 2;
  if (has_counter_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->counter_op(), output);
  }

  // optional .SetOp set_op = 3;
  if (has_set_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->set_op(), output);
  }

  // optional bytes register_op = 4;
  if (has_register_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->register_op(), output);
  }

  // optional .MapUpdate.FlagOp flag_op = 5;
  if (has_flag_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->flag_op(), output);
  }

  // optional .MapOp map_op = 6;
  if (has_map_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->map_op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapUpdate)
}

::google::protobuf::uint8* MapUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapUpdate)
  // required .MapField field = 1;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field(), target);
  }

  // optional .CounterOp counter_op = 2;
  if (has_counter_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->counter_op(), target);
  }

  // optional .SetOp set_op = 3;
  if (has_set_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->set_op(), target);
  }

  // optional bytes register_op = 4;
  if (has_register_op()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->register_op(), target);
  }

  // optional .MapUpdate.FlagOp flag_op = 5;
  if (has_flag_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->flag_op(), target);
  }

  // optional .MapOp map_op = 6;
  if (has_map_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->map_op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapUpdate)
  return target;
}

int MapUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MapField field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field());
    }

    // optional .CounterOp counter_op = 2;
    if (has_counter_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counter_op());
    }

    // optional .SetOp set_op = 3;
    if (has_set_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_op());
    }

    // optional bytes register_op = 4;
    if (has_register_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->register_op());
    }

    // optional .MapUpdate.FlagOp flag_op = 5;
    if (has_flag_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag_op());
    }

    // optional .MapOp map_op = 6;
    if (has_map_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapUpdate::MergeFrom(const MapUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      mutable_field()->::MapField::MergeFrom(from.field());
    }
    if (from.has_counter_op()) {
      mutable_counter_op()->::CounterOp::MergeFrom(from.counter_op());
    }
    if (from.has_set_op()) {
      mutable_set_op()->::SetOp::MergeFrom(from.set_op());
    }
    if (from.has_register_op()) {
      set_register_op(from.register_op());
    }
    if (from.has_flag_op()) {
      set_flag_op(from.flag_op());
    }
    if (from.has_map_op()) {
      mutable_map_op()->::MapOp::MergeFrom(from.map_op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapUpdate::CopyFrom(const MapUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_field()) {
    if (!this->field().IsInitialized()) return false;
  }
  if (has_map_op()) {
    if (!this->map_op().IsInitialized()) return false;
  }
  return true;
}

void MapUpdate::Swap(MapUpdate* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    std::swap(counter_op_, other->counter_op_);
    std::swap(set_op_, other->set_op_);
    std::swap(register_op_, other->register_op_);
    std::swap(flag_op_, other->flag_op_);
    std::swap(map_op_, other->map_op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapUpdate_descriptor_;
  metadata.reflection = MapUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapOp::kRemovesFieldNumber;
const int MapOp::kUpdatesFieldNumber;
#endif  // !_MSC_VER

MapOp::MapOp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MapOp)
}

void MapOp::InitAsDefaultInstance() {
}

MapOp::MapOp(const MapOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MapOp)
}

void MapOp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapOp::~MapOp() {
  // @@protoc_insertion_point(destructor:MapOp)
  SharedDtor();
}

void MapOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapOp_descriptor_;
}

const MapOp& MapOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

MapOp* MapOp::default_instance_ = NULL;

MapOp* MapOp::New() const {
  return new MapOp;
}

void MapOp::Clear() {
  removes_.Clear();
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MapOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapField removes = 1;
      case 1: {
        if (tag == 10) {
         parse_removes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_removes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_removes;
        if (input->ExpectTag(18)) goto parse_updates;
        break;
      }

      // repeated .MapUpdate updates = 2;
      case 2: {
        if (tag == 18) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MapOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MapOp)
  return false;
#undef DO_
}

void MapOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MapOp)
  // repeated .MapField removes = 1;
  for (int i = 0; i < this->removes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->removes(i), output);
  }

  // repeated .MapUpdate updates = 2;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MapOp)
}

::google::protobuf::uint8* MapOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MapOp)
  // repeated .MapField removes = 1;
  for (int i = 0; i < this->removes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->removes(i), target);
  }

  // repeated .MapUpdate updates = 2;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MapOp)
  return target;
}

int MapOp::ByteSize() const {
  int total_size = 0;

  // repeated .MapField removes = 1;
  total_size += 1 * this->removes_size();
  for (int i = 0; i < this->removes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->removes(i));
  }

  // repeated .MapUpdate updates = 2;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapOp::MergeFrom(const MapOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  removes_.MergeFrom(from.removes_);
  updates_.MergeFrom(from.updates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapOp::CopyFrom(const MapOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapOp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->removes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->updates())) return false;
  return true;
}

void MapOp::Swap(MapOp* other) {
  if (other != this) {
    removes_.Swap(&other->removes_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapOp_descriptor_;
  metadata.reflection = MapOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtOp::kCounterOpFieldNumber;
const int DtOp::kSetOpFieldNumber;
const int DtOp::kMapOpFieldNumber;
#endif  // !_MSC_VER

DtOp::DtOp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DtOp)
}

void DtOp::InitAsDefaultInstance() {
  counter_op_ = const_cast< ::CounterOp*>(&::CounterOp::default_instance());
  set_op_ = const_cast< ::SetOp*>(&::SetOp::default_instance());
  map_op_ = const_cast< ::MapOp*>(&::MapOp::default_instance());
}

DtOp::DtOp(const DtOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DtOp)
}

void DtOp::SharedCtor() {
  _cached_size_ = 0;
  counter_op_ = NULL;
  set_op_ = NULL;
  map_op_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtOp::~DtOp() {
  // @@protoc_insertion_point(destructor:DtOp)
  SharedDtor();
}

void DtOp::SharedDtor() {
  if (this != default_instance_) {
    delete counter_op_;
    delete set_op_;
    delete map_op_;
  }
}

void DtOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtOp_descriptor_;
}

const DtOp& DtOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

DtOp* DtOp::default_instance_ = NULL;

DtOp* DtOp::New() const {
  return new DtOp;
}

void DtOp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_counter_op()) {
      if (counter_op_ != NULL) counter_op_->::CounterOp::Clear();
    }
    if (has_set_op()) {
      if (set_op_ != NULL) set_op_->::SetOp::Clear();
    }
    if (has_map_op()) {
      if (map_op_ != NULL) map_op_->::MapOp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DtOp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CounterOp counter_op = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_set_op;
        break;
      }

      // optional .SetOp set_op = 2;
      case 2: {
        if (tag == 18) {
         parse_set_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_map_op;
        break;
      }

      // optional .MapOp map_op = 3;
      case 3: {
        if (tag == 26) {
         parse_map_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DtOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DtOp)
  return false;
#undef DO_
}

void DtOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DtOp)
  // optional .CounterOp counter_op = 1;
  if (has_counter_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counter_op(), output);
  }

  // optional .SetOp set_op = 2;
  if (has_set_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->set_op(), output);
  }

  // optional .MapOp map_op = 3;
  if (has_map_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->map_op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DtOp)
}

::google::protobuf::uint8* DtOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DtOp)
  // optional .CounterOp counter_op = 1;
  if (has_counter_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counter_op(), target);
  }

  // optional .SetOp set_op = 2;
  if (has_set_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->set_op(), target);
  }

  // optional .MapOp map_op = 3;
  if (has_map_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->map_op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DtOp)
  return target;
}

int DtOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CounterOp counter_op = 1;
    if (has_counter_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counter_op());
    }

    // optional .SetOp set_op = 2;
    if (has_set_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_op());
    }

    // optional .MapOp map_op = 3;
    if (has_map_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map_op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtOp::MergeFrom(const DtOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counter_op()) {
      mutable_counter_op()->::CounterOp::MergeFrom(from.counter_op());
    }
    if (from.has_set_op()) {
      mutable_set_op()->::SetOp::MergeFrom(from.set_op());
    }
    if (from.has_map_op()) {
      mutable_map_op()->::MapOp::MergeFrom(from.map_op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtOp::CopyFrom(const DtOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtOp::IsInitialized() const {

  if (has_map_op()) {
    if (!this->map_op().IsInitialized()) return false;
  }
  return true;
}

void DtOp::Swap(DtOp* other) {
  if (other != this) {
    std::swap(counter_op_, other->counter_op_);
    std::swap(set_op_, other->set_op_);
    std::swap(map_op_, other->map_op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtOp_descriptor_;
  metadata.reflection = DtOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtUpdateReq::kBucketFieldNumber;
const int DtUpdateReq::kKeyFieldNumber;
const int DtUpdateReq::kTypeFieldNumber;
const int DtUpdateReq::kContextFieldNumber;
const int DtUpdateReq::kOpFieldNumber;
const int DtUpdateReq::kWFieldNumber;
const int DtUpdateReq::kDwFieldNumber;
const int DtUpdateReq::kPwFieldNumber;
const int DtUpdateReq::kReturnBodyFieldNumber;
const int DtUpdateReq::kTimeoutFieldNumber;
const int DtUpdateReq::kSloppyQuorumFieldNumber;
const int DtUpdateReq::kNValFieldNumber;
const int DtUpdateReq::kIncludeContextFieldNumber;
#endif  // !_MSC_VER

DtUpdateReq::DtUpdateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DtUpdateReq)
}

void DtUpdateReq::InitAsDefaultInstance() {
  op_ = const_cast< ::DtOp*>(&::DtOp::default_instance());
}

DtUpdateReq::DtUpdateReq(const DtUpdateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DtUpdateReq)
}

void DtUpdateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = NULL;
  w_ = 0u;
  dw_ = 0u;
  pw_ = 0u;
  return_body_ = false;
  timeout_ = 0u;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  include_context_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtUpdateReq::~DtUpdateReq() {
  // @@protoc_insertion_point(destructor:DtUpdateReq)
  SharedDtor();
}

void DtUpdateReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (this != default_instance_) {
    delete op_;
  }
}

void DtUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtUpdateReq_descriptor_;
}

const DtUpdateReq& DtUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

DtUpdateReq* DtUpdateReq::default_instance_ = NULL;

DtUpdateReq* DtUpdateReq::New() const {
  return new DtUpdateReq;
}

void DtUpdateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DtUpdateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(w_, pw_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        context_->clear();
      }
    }
    if (has_op()) {
      if (op_ != NULL) op_->::DtOp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(timeout_, sloppy_quorum_);
    n_val_ = 0u;
    include_context_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DtUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_context;
        break;
      }

      // optional bytes context = 4;
      case 4: {
        if (tag == 34) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_op;
        break;
      }

      // required .DtOp op = 5;
      case 5: {
        if (tag == 42) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_w;
        break;
      }

      // optional uint32 w = 6;
      case 6: {
        if (tag == 48) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 7;
      case 7: {
        if (tag == 56) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 8;
      case 8: {
        if (tag == 64) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_return_body;
        break;
      }

      // optional bool return_body = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_return_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_body_)));
          set_has_return_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 10;
      case 10: {
        if (tag == 80) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 11;
      case 11: {
        if (tag == 88) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 12;
      case 12: {
        if (tag == 96) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_include_context;
        break;
      }

      // optional bool include_context = 13 [default = true];
      case 13: {
        if (tag == 104) {
         parse_include_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_context_)));
          set_has_include_context();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DtUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DtUpdateReq)
  return false;
#undef DO_
}

void DtUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DtUpdateReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // required bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  // optional bytes context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->context(), output);
  }

  // required .DtOp op = 5;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->op(), output);
  }

  // optional uint32 w = 6;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->w(), output);
  }

  // optional uint32 dw = 7;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dw(), output);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pw(), output);
  }

  // optional bool return_body = 9 [default = false];
  if (has_return_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->return_body(), output);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeout(), output);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->n_val(), output);
  }

  // optional bool include_context = 13 [default = true];
  if (has_include_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->include_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DtUpdateReq)
}

::google::protobuf::uint8* DtUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DtUpdateReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // required bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  // optional bytes context = 4;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->context(), target);
  }

  // required .DtOp op = 5;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->op(), target);
  }

  // optional uint32 w = 6;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->w(), target);
  }

  // optional uint32 dw = 7;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dw(), target);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pw(), target);
  }

  // optional bool return_body = 9 [default = false];
  if (has_return_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->return_body(), target);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeout(), target);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->n_val(), target);
  }

  // optional bool include_context = 13 [default = true];
  if (has_include_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->include_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DtUpdateReq)
  return target;
}

int DtUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // optional bytes context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

    // required .DtOp op = 5;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op());
    }

    // optional uint32 w = 6;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // optional uint32 dw = 7;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional uint32 pw = 8;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool return_body = 9 [default = false];
    if (has_return_body()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 10;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool sloppy_quorum = 11;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 12;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bool include_context = 13 [default = true];
    if (has_include_context()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtUpdateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtUpdateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtUpdateReq::MergeFrom(const DtUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_op()) {
      mutable_op()->::DtOp::MergeFrom(from.op());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_return_body()) {
      set_return_body(from.return_body());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_include_context()) {
      set_include_context(from.include_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtUpdateReq::CopyFrom(const DtUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000015) != 0x00000015) return false;

  if (has_op()) {
    if (!this->op().IsInitialized()) return false;
  }
  return true;
}

void DtUpdateReq::Swap(DtUpdateReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    std::swap(context_, other->context_);
    std::swap(op_, other->op_);
    std::swap(w_, other->w_);
    std::swap(dw_, other->dw_);
    std::swap(pw_, other->pw_);
    std::swap(return_body_, other->return_body_);
    std::swap(timeout_, other->timeout_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(include_context_, other->include_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtUpdateReq_descriptor_;
  metadata.reflection = DtUpdateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DtUpdateResp::kKeyFieldNumber;
const int DtUpdateResp::kContextFieldNumber;
const int DtUpdateResp::kCounterValueFieldNumber;
const int DtUpdateResp::kSetValueFieldNumber;
const int DtUpdateResp::kMapValueFieldNumber;
#endif  // !_MSC_VER

DtUpdateResp::DtUpdateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DtUpdateResp)
}

void DtUpdateResp::InitAsDefaultInstance() {
}

DtUpdateResp::DtUpdateResp(const DtUpdateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DtUpdateResp)
}

void DtUpdateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  counter_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DtUpdateResp::~DtUpdateResp() {
  // @@protoc_insertion_point(destructor:DtUpdateResp)
  SharedDtor();
}

void DtUpdateResp::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete context_;
  }
  if (this != default_instance_) {
  }
}

void DtUpdateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DtUpdateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DtUpdateResp_descriptor_;
}

const DtUpdateResp& DtUpdateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

DtUpdateResp* DtUpdateResp::default_instance_ = NULL;

DtUpdateResp* DtUpdateResp::New() const {
  return new DtUpdateResp;
}

void DtUpdateResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_context()) {
      if (context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        context_->clear();
      }
    }
    counter_value_ = GOOGLE_LONGLONG(0);
  }
  set_value_.Clear();
  map_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DtUpdateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DtUpdateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_context;
        break;
      }

      // optional bytes context = 2;
      case 2: {
        if (tag == 18) {
         parse_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_counter_value;
        break;
      }

      // optional sint64 counter_value = 3;
      case 3: {
        if (tag == 24) {
         parse_counter_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &counter_value_)));
          set_has_counter_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_set_value;
        break;
      }

      // repeated bytes set_value = 4;
      case 4: {
        if (tag == 34) {
         parse_set_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_set_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_set_value;
        if (input->ExpectTag(42)) goto parse_map_value;
        break;
      }

      // repeated .MapEntry map_value = 5;
      case 5: {
        if (tag == 42) {
         parse_map_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_map_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DtUpdateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DtUpdateResp)
  return false;
#undef DO_
}

void DtUpdateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DtUpdateResp)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->context(), output);
  }

  // optional sint64 counter_value = 3;
  if (has_counter_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->counter_value(), output);
  }

  // repeated bytes set_value = 4;
  for (int i = 0; i < this->set_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->set_value(i), output);
  }

  // repeated .MapEntry map_value = 5;
  for (int i = 0; i < this->map_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->map_value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DtUpdateResp)
}

::google::protobuf::uint8* DtUpdateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DtUpdateResp)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes context = 2;
  if (has_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->context(), target);
  }

  // optional sint64 counter_value = 3;
  if (has_counter_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->counter_value(), target);
  }

  // repeated bytes set_value = 4;
  for (int i = 0; i < this->set_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->set_value(i), target);
  }

  // repeated .MapEntry map_value = 5;
  for (int i = 0; i < this->map_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->map_value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DtUpdateResp)
  return target;
}

int DtUpdateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->context());
    }

    // optional sint64 counter_value = 3;
    if (has_counter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->counter_value());
    }

  }
  // repeated bytes set_value = 4;
  total_size += 1 * this->set_value_size();
  for (int i = 0; i < this->set_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->set_value(i));
  }

  // repeated .MapEntry map_value = 5;
  total_size += 1 * this->map_value_size();
  for (int i = 0; i < this->map_value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DtUpdateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DtUpdateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DtUpdateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DtUpdateResp::MergeFrom(const DtUpdateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  set_value_.MergeFrom(from.set_value_);
  map_value_.MergeFrom(from.map_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_counter_value()) {
      set_counter_value(from.counter_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DtUpdateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DtUpdateResp::CopyFrom(const DtUpdateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DtUpdateResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->map_value())) return false;
  return true;
}

void DtUpdateResp::Swap(DtUpdateResp* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(context_, other->context_);
    std::swap(counter_value_, other->counter_value_);
    set_value_.Swap(&other->set_value_);
    map_value_.Swap(&other->map_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DtUpdateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DtUpdateResp_descriptor_;
  metadata.reflection = DtUpdateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetClientIdResp::kClientIdFieldNumber;
#endif  // !_MSC_VER

RpbGetClientIdResp::RpbGetClientIdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetClientIdResp)
}

void RpbGetClientIdResp::InitAsDefaultInstance() {
}

RpbGetClientIdResp::RpbGetClientIdResp(const RpbGetClientIdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetClientIdResp)
}

void RpbGetClientIdResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetClientIdResp::~RpbGetClientIdResp() {
  // @@protoc_insertion_point(destructor:RpbGetClientIdResp)
  SharedDtor();
}

void RpbGetClientIdResp::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetClientIdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetClientIdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetClientIdResp_descriptor_;
}

const RpbGetClientIdResp& RpbGetClientIdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetClientIdResp* RpbGetClientIdResp::default_instance_ = NULL;

RpbGetClientIdResp* RpbGetClientIdResp::New() const {
  return new RpbGetClientIdResp;
}

void RpbGetClientIdResp::Clear() {
  if (has_client_id()) {
    if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetClientIdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetClientIdResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes client_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetClientIdResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetClientIdResp)
  return false;
#undef DO_
}

void RpbGetClientIdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetClientIdResp)
  // required bytes client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetClientIdResp)
}

::google::protobuf::uint8* RpbGetClientIdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetClientIdResp)
  // required bytes client_id = 1;
  if (has_client_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetClientIdResp)
  return target;
}

int RpbGetClientIdResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetClientIdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetClientIdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetClientIdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetClientIdResp::MergeFrom(const RpbGetClientIdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetClientIdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetClientIdResp::CopyFrom(const RpbGetClientIdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetClientIdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbGetClientIdResp::Swap(RpbGetClientIdResp* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetClientIdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetClientIdResp_descriptor_;
  metadata.reflection = RpbGetClientIdResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSetClientIdReq::kClientIdFieldNumber;
#endif  // !_MSC_VER

RpbSetClientIdReq::RpbSetClientIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSetClientIdReq)
}

void RpbSetClientIdReq::InitAsDefaultInstance() {
}

RpbSetClientIdReq::RpbSetClientIdReq(const RpbSetClientIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSetClientIdReq)
}

void RpbSetClientIdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetClientIdReq::~RpbSetClientIdReq() {
  // @@protoc_insertion_point(destructor:RpbSetClientIdReq)
  SharedDtor();
}

void RpbSetClientIdReq::SharedDtor() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (this != default_instance_) {
  }
}

void RpbSetClientIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetClientIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetClientIdReq_descriptor_;
}

const RpbSetClientIdReq& RpbSetClientIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSetClientIdReq* RpbSetClientIdReq::default_instance_ = NULL;

RpbSetClientIdReq* RpbSetClientIdReq::New() const {
  return new RpbSetClientIdReq;
}

void RpbSetClientIdReq::Clear() {
  if (has_client_id()) {
    if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      client_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetClientIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSetClientIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes client_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSetClientIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSetClientIdReq)
  return false;
#undef DO_
}

void RpbSetClientIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSetClientIdReq)
  // required bytes client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->client_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSetClientIdReq)
}

::google::protobuf::uint8* RpbSetClientIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSetClientIdReq)
  // required bytes client_id = 1;
  if (has_client_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->client_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSetClientIdReq)
  return target;
}

int RpbSetClientIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetClientIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetClientIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetClientIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetClientIdReq::MergeFrom(const RpbSetClientIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetClientIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetClientIdReq::CopyFrom(const RpbSetClientIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetClientIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbSetClientIdReq::Swap(RpbSetClientIdReq* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetClientIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetClientIdReq_descriptor_;
  metadata.reflection = RpbSetClientIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetReq::kBucketFieldNumber;
const int RpbGetReq::kKeyFieldNumber;
const int RpbGetReq::kRFieldNumber;
const int RpbGetReq::kPrFieldNumber;
const int RpbGetReq::kBasicQuorumFieldNumber;
const int RpbGetReq::kNotfoundOkFieldNumber;
const int RpbGetReq::kIfModifiedFieldNumber;
const int RpbGetReq::kHeadFieldNumber;
const int RpbGetReq::kDeletedvclockFieldNumber;
const int RpbGetReq::kTimeoutFieldNumber;
const int RpbGetReq::kSloppyQuorumFieldNumber;
const int RpbGetReq::kNValFieldNumber;
const int RpbGetReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetReq::RpbGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetReq)
}

void RpbGetReq::InitAsDefaultInstance() {
}

RpbGetReq::RpbGetReq(const RpbGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetReq)
}

void RpbGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = 0u;
  pr_ = 0u;
  basic_quorum_ = false;
  notfound_ok_ = false;
  if_modified_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = false;
  deletedvclock_ = false;
  timeout_ = 0u;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetReq::~RpbGetReq() {
  // @@protoc_insertion_point(destructor:RpbGetReq)
  SharedDtor();
}

void RpbGetReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (if_modified_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete if_modified_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetReq_descriptor_;
}

const RpbGetReq& RpbGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetReq* RpbGetReq::default_instance_ = NULL;

RpbGetReq* RpbGetReq::New() const {
  return new RpbGetReq;
}

void RpbGetReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbGetReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(r_, pr_);
    ZR_(basic_quorum_, head_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_if_modified()) {
      if (if_modified_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        if_modified_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(deletedvclock_, n_val_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_r;
        break;
      }

      // optional uint32 r = 3;
      case 3: {
        if (tag == 24) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 4;
      case 4: {
        if (tag == 32) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basic_quorum;
        break;
      }

      // optional bool basic_quorum = 5;
      case 5: {
        if (tag == 40) {
         parse_basic_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_quorum_)));
          set_has_basic_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_notfound_ok;
        break;
      }

      // optional bool notfound_ok = 6;
      case 6: {
        if (tag == 48) {
         parse_notfound_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notfound_ok_)));
          set_has_notfound_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_if_modified;
        break;
      }

      // optional bytes if_modified = 7;
      case 7: {
        if (tag == 58) {
         parse_if_modified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_if_modified()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_head;
        break;
      }

      // optional bool head = 8;
      case 8: {
        if (tag == 64) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_deletedvclock;
        break;
      }

      // optional bool deletedvclock = 9;
      case 9: {
        if (tag == 72) {
         parse_deletedvclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletedvclock_)));
          set_has_deletedvclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 10;
      case 10: {
        if (tag == 80) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 11;
      case 11: {
        if (tag == 88) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 12;
      case 12: {
        if (tag == 96) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_type;
        break;
      }

      // optional bytes type = 13;
      case 13: {
        if (tag == 106) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetReq)
  return false;
#undef DO_
}

void RpbGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pr(), output);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->basic_quorum(), output);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->notfound_ok(), output);
  }

  // optional bytes if_modified = 7;
  if (has_if_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->if_modified(), output);
  }

  // optional bool head = 8;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->head(), output);
  }

  // optional bool deletedvclock = 9;
  if (has_deletedvclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->deletedvclock(), output);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeout(), output);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->n_val(), output);
  }

  // optional bytes type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetReq)
}

::google::protobuf::uint8* RpbGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pr(), target);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->basic_quorum(), target);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->notfound_ok(), target);
  }

  // optional bytes if_modified = 7;
  if (has_if_modified()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->if_modified(), target);
  }

  // optional bool head = 8;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->head(), target);
  }

  // optional bool deletedvclock = 9;
  if (has_deletedvclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->deletedvclock(), target);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeout(), target);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->n_val(), target);
  }

  // optional bytes type = 13;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetReq)
  return target;
}

int RpbGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 r = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 pr = 4;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional bool basic_quorum = 5;
    if (has_basic_quorum()) {
      total_size += 1 + 1;
    }

    // optional bool notfound_ok = 6;
    if (has_notfound_ok()) {
      total_size += 1 + 1;
    }

    // optional bytes if_modified = 7;
    if (has_if_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->if_modified());
    }

    // optional bool head = 8;
    if (has_head()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool deletedvclock = 9;
    if (has_deletedvclock()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 10;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool sloppy_quorum = 11;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 12;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bytes type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetReq::MergeFrom(const RpbGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_basic_quorum()) {
      set_basic_quorum(from.basic_quorum());
    }
    if (from.has_notfound_ok()) {
      set_notfound_ok(from.notfound_ok());
    }
    if (from.has_if_modified()) {
      set_if_modified(from.if_modified());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deletedvclock()) {
      set_deletedvclock(from.deletedvclock());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetReq::CopyFrom(const RpbGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbGetReq::Swap(RpbGetReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(r_, other->r_);
    std::swap(pr_, other->pr_);
    std::swap(basic_quorum_, other->basic_quorum_);
    std::swap(notfound_ok_, other->notfound_ok_);
    std::swap(if_modified_, other->if_modified_);
    std::swap(head_, other->head_);
    std::swap(deletedvclock_, other->deletedvclock_);
    std::swap(timeout_, other->timeout_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetReq_descriptor_;
  metadata.reflection = RpbGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetResp::kContentFieldNumber;
const int RpbGetResp::kVclockFieldNumber;
const int RpbGetResp::kUnchangedFieldNumber;
#endif  // !_MSC_VER

RpbGetResp::RpbGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetResp)
}

void RpbGetResp::InitAsDefaultInstance() {
}

RpbGetResp::RpbGetResp(const RpbGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetResp)
}

void RpbGetResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unchanged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetResp::~RpbGetResp() {
  // @@protoc_insertion_point(destructor:RpbGetResp)
  SharedDtor();
}

void RpbGetResp::SharedDtor() {
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetResp_descriptor_;
}

const RpbGetResp& RpbGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetResp* RpbGetResp::default_instance_ = NULL;

RpbGetResp* RpbGetResp::New() const {
  return new RpbGetResp;
}

void RpbGetResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    unchanged_ = false;
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbContent content = 1;
      case 1: {
        if (tag == 10) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectTag(18)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 2;
      case 2: {
        if (tag == 18) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unchanged;
        break;
      }

      // optional bool unchanged = 3;
      case 3: {
        if (tag == 24) {
         parse_unchanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unchanged_)));
          set_has_unchanged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetResp)
  return false;
#undef DO_
}

void RpbGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vclock(), output);
  }

  // optional bool unchanged = 3;
  if (has_unchanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unchanged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetResp)
}

::google::protobuf::uint8* RpbGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vclock(), target);
  }

  // optional bool unchanged = 3;
  if (has_unchanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unchanged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetResp)
  return target;
}

int RpbGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes vclock = 2;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional bool unchanged = 3;
    if (has_unchanged()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbContent content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetResp::MergeFrom(const RpbGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_unchanged()) {
      set_unchanged(from.unchanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetResp::CopyFrom(const RpbGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->content())) return false;
  return true;
}

void RpbGetResp::Swap(RpbGetResp* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(vclock_, other->vclock_);
    std::swap(unchanged_, other->unchanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetResp_descriptor_;
  metadata.reflection = RpbGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbPutReq::kBucketFieldNumber;
const int RpbPutReq::kKeyFieldNumber;
const int RpbPutReq::kVclockFieldNumber;
const int RpbPutReq::kContentFieldNumber;
const int RpbPutReq::kWFieldNumber;
const int RpbPutReq::kDwFieldNumber;
const int RpbPutReq::kReturnBodyFieldNumber;
const int RpbPutReq::kPwFieldNumber;
const int RpbPutReq::kIfNotModifiedFieldNumber;
const int RpbPutReq::kIfNoneMatchFieldNumber;
const int RpbPutReq::kReturnHeadFieldNumber;
const int RpbPutReq::kTimeoutFieldNumber;
const int RpbPutReq::kAsisFieldNumber;
const int RpbPutReq::kSloppyQuorumFieldNumber;
const int RpbPutReq::kNValFieldNumber;
const int RpbPutReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbPutReq::RpbPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbPutReq)
}

void RpbPutReq::InitAsDefaultInstance() {
  content_ = const_cast< ::RpbContent*>(&::RpbContent::default_instance());
}

RpbPutReq::RpbPutReq(const RpbPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbPutReq)
}

void RpbPutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = NULL;
  w_ = 0u;
  dw_ = 0u;
  return_body_ = false;
  pw_ = 0u;
  if_not_modified_ = false;
  if_none_match_ = false;
  return_head_ = false;
  timeout_ = 0u;
  asis_ = false;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPutReq::~RpbPutReq() {
  // @@protoc_insertion_point(destructor:RpbPutReq)
  SharedDtor();
}

void RpbPutReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void RpbPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPutReq_descriptor_;
}

const RpbPutReq& RpbPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbPutReq* RpbPutReq::default_instance_ = NULL;

RpbPutReq* RpbPutReq::New() const {
  return new RpbPutReq;
}

void RpbPutReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbPutReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(w_, return_body_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    if (has_content()) {
      if (content_ != NULL) content_->::RpbContent::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(if_not_modified_, sloppy_quorum_);
    n_val_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 3;
      case 3: {
        if (tag == 26) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required .RpbContent content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_w;
        break;
      }

      // optional uint32 w = 5;
      case 5: {
        if (tag == 40) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 6;
      case 6: {
        if (tag == 48) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_return_body;
        break;
      }

      // optional bool return_body = 7;
      case 7: {
        if (tag == 56) {
         parse_return_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_body_)));
          set_has_return_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 8;
      case 8: {
        if (tag == 64) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_if_not_modified;
        break;
      }

      // optional bool if_not_modified = 9;
      case 9: {
        if (tag == 72) {
         parse_if_not_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &if_not_modified_)));
          set_has_if_not_modified();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_if_none_match;
        break;
      }

      // optional bool if_none_match = 10;
      case 10: {
        if (tag == 80) {
         parse_if_none_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &if_none_match_)));
          set_has_if_none_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_return_head;
        break;
      }

      // optional bool return_head = 11;
      case 11: {
        if (tag == 88) {
         parse_return_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_head_)));
          set_has_return_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 12;
      case 12: {
        if (tag == 96) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_asis;
        break;
      }

      // optional bool asis = 13;
      case 13: {
        if (tag == 104) {
         parse_asis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &asis_)));
          set_has_asis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 14;
      case 14: {
        if (tag == 112) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 15;
      case 15: {
        if (tag == 120) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_type;
        break;
      }

      // optional bytes type = 16;
      case 16: {
        if (tag == 130) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbPutReq)
  return false;
#undef DO_
}

void RpbPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbPutReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vclock(), output);
  }

  // required .RpbContent content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->content(), output);
  }

  // optional uint32 w = 5;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->w(), output);
  }

  // optional uint32 dw = 6;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dw(), output);
  }

  // optional bool return_body = 7;
  if (has_return_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->return_body(), output);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pw(), output);
  }

  // optional bool if_not_modified = 9;
  if (has_if_not_modified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->if_not_modified(), output);
  }

  // optional bool if_none_match = 10;
  if (has_if_none_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->if_none_match(), output);
  }

  // optional bool return_head = 11;
  if (has_return_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->return_head(), output);
  }

  // optional uint32 timeout = 12;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timeout(), output);
  }

  // optional bool asis = 13;
  if (has_asis()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->asis(), output);
  }

  // optional bool sloppy_quorum = 14;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 15;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->n_val(), output);
  }

  // optional bytes type = 16;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbPutReq)
}

::google::protobuf::uint8* RpbPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbPutReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vclock(), target);
  }

  // required .RpbContent content = 4;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->content(), target);
  }

  // optional uint32 w = 5;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->w(), target);
  }

  // optional uint32 dw = 6;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dw(), target);
  }

  // optional bool return_body = 7;
  if (has_return_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->return_body(), target);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pw(), target);
  }

  // optional bool if_not_modified = 9;
  if (has_if_not_modified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->if_not_modified(), target);
  }

  // optional bool if_none_match = 10;
  if (has_if_none_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->if_none_match(), target);
  }

  // optional bool return_head = 11;
  if (has_return_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->return_head(), target);
  }

  // optional uint32 timeout = 12;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timeout(), target);
  }

  // optional bool asis = 13;
  if (has_asis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->asis(), target);
  }

  // optional bool sloppy_quorum = 14;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 15;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->n_val(), target);
  }

  // optional bytes type = 16;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbPutReq)
  return target;
}

int RpbPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes vclock = 3;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // required .RpbContent content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint32 w = 5;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // optional uint32 dw = 6;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional bool return_body = 7;
    if (has_return_body()) {
      total_size += 1 + 1;
    }

    // optional uint32 pw = 8;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool if_not_modified = 9;
    if (has_if_not_modified()) {
      total_size += 1 + 1;
    }

    // optional bool if_none_match = 10;
    if (has_if_none_match()) {
      total_size += 1 + 1;
    }

    // optional bool return_head = 11;
    if (has_return_head()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 12;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool asis = 13;
    if (has_asis()) {
      total_size += 1 + 1;
    }

    // optional bool sloppy_quorum = 14;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 15;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bytes type = 16;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPutReq::MergeFrom(const RpbPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_content()) {
      mutable_content()->::RpbContent::MergeFrom(from.content());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_return_body()) {
      set_return_body(from.return_body());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_if_not_modified()) {
      set_if_not_modified(from.if_not_modified());
    }
    if (from.has_if_none_match()) {
      set_if_none_match(from.if_none_match());
    }
    if (from.has_return_head()) {
      set_return_head(from.return_head());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_asis()) {
      set_asis(from.asis());
    }
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPutReq::CopyFrom(const RpbPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void RpbPutReq::Swap(RpbPutReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(vclock_, other->vclock_);
    std::swap(content_, other->content_);
    std::swap(w_, other->w_);
    std::swap(dw_, other->dw_);
    std::swap(return_body_, other->return_body_);
    std::swap(pw_, other->pw_);
    std::swap(if_not_modified_, other->if_not_modified_);
    std::swap(if_none_match_, other->if_none_match_);
    std::swap(return_head_, other->return_head_);
    std::swap(timeout_, other->timeout_);
    std::swap(asis_, other->asis_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPutReq_descriptor_;
  metadata.reflection = RpbPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbPutResp::kContentFieldNumber;
const int RpbPutResp::kVclockFieldNumber;
const int RpbPutResp::kKeyFieldNumber;
#endif  // !_MSC_VER

RpbPutResp::RpbPutResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbPutResp)
}

void RpbPutResp::InitAsDefaultInstance() {
}

RpbPutResp::RpbPutResp(const RpbPutResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbPutResp)
}

void RpbPutResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPutResp::~RpbPutResp() {
  // @@protoc_insertion_point(destructor:RpbPutResp)
  SharedDtor();
}

void RpbPutResp::SharedDtor() {
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbPutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPutResp_descriptor_;
}

const RpbPutResp& RpbPutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbPutResp* RpbPutResp::default_instance_ = NULL;

RpbPutResp* RpbPutResp::New() const {
  return new RpbPutResp;
}

void RpbPutResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbPutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbContent content = 1;
      case 1: {
        if (tag == 10) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectTag(18)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 2;
      case 2: {
        if (tag == 18) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbPutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbPutResp)
  return false;
#undef DO_
}

void RpbPutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbPutResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vclock(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbPutResp)
}

::google::protobuf::uint8* RpbPutResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbPutResp)
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }

  // optional bytes vclock = 2;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vclock(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbPutResp)
  return target;
}

int RpbPutResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes vclock = 2;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

  }
  // repeated .RpbContent content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPutResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPutResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPutResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPutResp::MergeFrom(const RpbPutResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPutResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPutResp::CopyFrom(const RpbPutResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPutResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->content())) return false;
  return true;
}

void RpbPutResp::Swap(RpbPutResp* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(vclock_, other->vclock_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPutResp_descriptor_;
  metadata.reflection = RpbPutResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbDelReq::kBucketFieldNumber;
const int RpbDelReq::kKeyFieldNumber;
const int RpbDelReq::kRwFieldNumber;
const int RpbDelReq::kVclockFieldNumber;
const int RpbDelReq::kRFieldNumber;
const int RpbDelReq::kWFieldNumber;
const int RpbDelReq::kPrFieldNumber;
const int RpbDelReq::kPwFieldNumber;
const int RpbDelReq::kDwFieldNumber;
const int RpbDelReq::kTimeoutFieldNumber;
const int RpbDelReq::kSloppyQuorumFieldNumber;
const int RpbDelReq::kNValFieldNumber;
const int RpbDelReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbDelReq::RpbDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbDelReq)
}

void RpbDelReq::InitAsDefaultInstance() {
}

RpbDelReq::RpbDelReq(const RpbDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbDelReq)
}

void RpbDelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rw_ = 0u;
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = 0u;
  w_ = 0u;
  pr_ = 0u;
  pw_ = 0u;
  dw_ = 0u;
  timeout_ = 0u;
  sloppy_quorum_ = false;
  n_val_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbDelReq::~RpbDelReq() {
  // @@protoc_insertion_point(destructor:RpbDelReq)
  SharedDtor();
}

void RpbDelReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbDelReq_descriptor_;
}

const RpbDelReq& RpbDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbDelReq* RpbDelReq::default_instance_ = NULL;

RpbDelReq* RpbDelReq::New() const {
  return new RpbDelReq;
}

void RpbDelReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbDelReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rw_, pw_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(dw_, sloppy_quorum_);
    n_val_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbDelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rw;
        break;
      }

      // optional uint32 rw = 3;
      case 3: {
        if (tag == 24) {
         parse_rw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rw_)));
          set_has_rw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 4;
      case 4: {
        if (tag == 34) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_r;
        break;
      }

      // optional uint32 r = 5;
      case 5: {
        if (tag == 40) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_w;
        break;
      }

      // optional uint32 w = 6;
      case 6: {
        if (tag == 48) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 7;
      case 7: {
        if (tag == 56) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 8;
      case 8: {
        if (tag == 64) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 9;
      case 9: {
        if (tag == 72) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 10;
      case 10: {
        if (tag == 80) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sloppy_quorum;
        break;
      }

      // optional bool sloppy_quorum = 11;
      case 11: {
        if (tag == 88) {
         parse_sloppy_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sloppy_quorum_)));
          set_has_sloppy_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 12;
      case 12: {
        if (tag == 96) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_type;
        break;
      }

      // optional bytes type = 13;
      case 13: {
        if (tag == 106) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbDelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbDelReq)
  return false;
#undef DO_
}

void RpbDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbDelReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint32 rw = 3;
  if (has_rw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rw(), output);
  }

  // optional bytes vclock = 4;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->vclock(), output);
  }

  // optional uint32 r = 5;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r(), output);
  }

  // optional uint32 w = 6;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->w(), output);
  }

  // optional uint32 pr = 7;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pr(), output);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pw(), output);
  }

  // optional uint32 dw = 9;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dw(), output);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->timeout(), output);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sloppy_quorum(), output);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->n_val(), output);
  }

  // optional bytes type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbDelReq)
}

::google::protobuf::uint8* RpbDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbDelReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint32 rw = 3;
  if (has_rw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rw(), target);
  }

  // optional bytes vclock = 4;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->vclock(), target);
  }

  // optional uint32 r = 5;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->r(), target);
  }

  // optional uint32 w = 6;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->w(), target);
  }

  // optional uint32 pr = 7;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pr(), target);
  }

  // optional uint32 pw = 8;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pw(), target);
  }

  // optional uint32 dw = 9;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dw(), target);
  }

  // optional uint32 timeout = 10;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->timeout(), target);
  }

  // optional bool sloppy_quorum = 11;
  if (has_sloppy_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sloppy_quorum(), target);
  }

  // optional uint32 n_val = 12;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->n_val(), target);
  }

  // optional bytes type = 13;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbDelReq)
  return target;
}

int RpbDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 rw = 3;
    if (has_rw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rw());
    }

    // optional bytes vclock = 4;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional uint32 r = 5;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 w = 6;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // optional uint32 pr = 7;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional uint32 pw = 8;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 dw = 9;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional uint32 timeout = 10;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool sloppy_quorum = 11;
    if (has_sloppy_quorum()) {
      total_size += 1 + 1;
    }

    // optional uint32 n_val = 12;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bytes type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbDelReq::MergeFrom(const RpbDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_rw()) {
      set_rw(from.rw());
    }
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_sloppy_quorum()) {
      set_sloppy_quorum(from.sloppy_quorum());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbDelReq::CopyFrom(const RpbDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbDelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbDelReq::Swap(RpbDelReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(rw_, other->rw_);
    std::swap(vclock_, other->vclock_);
    std::swap(r_, other->r_);
    std::swap(w_, other->w_);
    std::swap(pr_, other->pr_);
    std::swap(pw_, other->pw_);
    std::swap(dw_, other->dw_);
    std::swap(timeout_, other->timeout_);
    std::swap(sloppy_quorum_, other->sloppy_quorum_);
    std::swap(n_val_, other->n_val_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbDelReq_descriptor_;
  metadata.reflection = RpbDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListBucketsReq::kTimeoutFieldNumber;
const int RpbListBucketsReq::kStreamFieldNumber;
const int RpbListBucketsReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbListBucketsReq::RpbListBucketsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListBucketsReq)
}

void RpbListBucketsReq::InitAsDefaultInstance() {
}

RpbListBucketsReq::RpbListBucketsReq(const RpbListBucketsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListBucketsReq)
}

void RpbListBucketsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timeout_ = 0u;
  stream_ = false;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListBucketsReq::~RpbListBucketsReq() {
  // @@protoc_insertion_point(destructor:RpbListBucketsReq)
  SharedDtor();
}

void RpbListBucketsReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbListBucketsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListBucketsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListBucketsReq_descriptor_;
}

const RpbListBucketsReq& RpbListBucketsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbListBucketsReq* RpbListBucketsReq::default_instance_ = NULL;

RpbListBucketsReq* RpbListBucketsReq::New() const {
  return new RpbListBucketsReq;
}

void RpbListBucketsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbListBucketsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(timeout_, stream_);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListBucketsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListBucketsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream;
        break;
      }

      // optional bool stream = 2;
      case 2: {
        if (tag == 16) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListBucketsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListBucketsReq)
  return false;
#undef DO_
}

void RpbListBucketsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListBucketsReq)
  // optional uint32 timeout = 1;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeout(), output);
  }

  // optional bool stream = 2;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stream(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListBucketsReq)
}

::google::protobuf::uint8* RpbListBucketsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListBucketsReq)
  // optional uint32 timeout = 1;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timeout(), target);
  }

  // optional bool stream = 2;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stream(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListBucketsReq)
  return target;
}

int RpbListBucketsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timeout = 1;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool stream = 2;
    if (has_stream()) {
      total_size += 1 + 1;
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListBucketsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListBucketsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListBucketsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListBucketsReq::MergeFrom(const RpbListBucketsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListBucketsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListBucketsReq::CopyFrom(const RpbListBucketsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListBucketsReq::IsInitialized() const {

  return true;
}

void RpbListBucketsReq::Swap(RpbListBucketsReq* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(stream_, other->stream_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListBucketsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListBucketsReq_descriptor_;
  metadata.reflection = RpbListBucketsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListBucketsResp::kBucketsFieldNumber;
const int RpbListBucketsResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbListBucketsResp::RpbListBucketsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListBucketsResp)
}

void RpbListBucketsResp::InitAsDefaultInstance() {
}

RpbListBucketsResp::RpbListBucketsResp(const RpbListBucketsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListBucketsResp)
}

void RpbListBucketsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListBucketsResp::~RpbListBucketsResp() {
  // @@protoc_insertion_point(destructor:RpbListBucketsResp)
  SharedDtor();
}

void RpbListBucketsResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbListBucketsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListBucketsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListBucketsResp_descriptor_;
}

const RpbListBucketsResp& RpbListBucketsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbListBucketsResp* RpbListBucketsResp::default_instance_ = NULL;

RpbListBucketsResp* RpbListBucketsResp::New() const {
  return new RpbListBucketsResp;
}

void RpbListBucketsResp::Clear() {
  done_ = false;
  buckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListBucketsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListBucketsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes buckets = 1;
      case 1: {
        if (tag == 10) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_buckets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buckets;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // optional bool done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListBucketsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListBucketsResp)
  return false;
#undef DO_
}

void RpbListBucketsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListBucketsResp)
  // repeated bytes buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->buckets(i), output);
  }

  // optional bool done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListBucketsResp)
}

::google::protobuf::uint8* RpbListBucketsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListBucketsResp)
  // repeated bytes buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->buckets(i), target);
  }

  // optional bool done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListBucketsResp)
  return target;
}

int RpbListBucketsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool done = 2;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes buckets = 1;
  total_size += 1 * this->buckets_size();
  for (int i = 0; i < this->buckets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->buckets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListBucketsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListBucketsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListBucketsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListBucketsResp::MergeFrom(const RpbListBucketsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buckets_.MergeFrom(from.buckets_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListBucketsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListBucketsResp::CopyFrom(const RpbListBucketsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListBucketsResp::IsInitialized() const {

  return true;
}

void RpbListBucketsResp::Swap(RpbListBucketsResp* other) {
  if (other != this) {
    buckets_.Swap(&other->buckets_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListBucketsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListBucketsResp_descriptor_;
  metadata.reflection = RpbListBucketsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListKeysReq::kBucketFieldNumber;
const int RpbListKeysReq::kTimeoutFieldNumber;
const int RpbListKeysReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbListKeysReq::RpbListKeysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListKeysReq)
}

void RpbListKeysReq::InitAsDefaultInstance() {
}

RpbListKeysReq::RpbListKeysReq(const RpbListKeysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListKeysReq)
}

void RpbListKeysReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListKeysReq::~RpbListKeysReq() {
  // @@protoc_insertion_point(destructor:RpbListKeysReq)
  SharedDtor();
}

void RpbListKeysReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbListKeysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListKeysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListKeysReq_descriptor_;
}

const RpbListKeysReq& RpbListKeysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbListKeysReq* RpbListKeysReq::default_instance_ = NULL;

RpbListKeysReq* RpbListKeysReq::New() const {
  return new RpbListKeysReq;
}

void RpbListKeysReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    timeout_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListKeysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListKeysReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListKeysReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListKeysReq)
  return false;
#undef DO_
}

void RpbListKeysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListKeysReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListKeysReq)
}

::google::protobuf::uint8* RpbListKeysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListKeysReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListKeysReq)
  return target;
}

int RpbListKeysReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListKeysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListKeysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListKeysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListKeysReq::MergeFrom(const RpbListKeysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListKeysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListKeysReq::CopyFrom(const RpbListKeysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListKeysReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbListKeysReq::Swap(RpbListKeysReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(timeout_, other->timeout_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListKeysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListKeysReq_descriptor_;
  metadata.reflection = RpbListKeysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListKeysResp::kKeysFieldNumber;
const int RpbListKeysResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbListKeysResp::RpbListKeysResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbListKeysResp)
}

void RpbListKeysResp::InitAsDefaultInstance() {
}

RpbListKeysResp::RpbListKeysResp(const RpbListKeysResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbListKeysResp)
}

void RpbListKeysResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListKeysResp::~RpbListKeysResp() {
  // @@protoc_insertion_point(destructor:RpbListKeysResp)
  SharedDtor();
}

void RpbListKeysResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbListKeysResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListKeysResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListKeysResp_descriptor_;
}

const RpbListKeysResp& RpbListKeysResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbListKeysResp* RpbListKeysResp::default_instance_ = NULL;

RpbListKeysResp* RpbListKeysResp::New() const {
  return new RpbListKeysResp;
}

void RpbListKeysResp::Clear() {
  done_ = false;
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListKeysResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbListKeysResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // optional bool done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbListKeysResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbListKeysResp)
  return false;
#undef DO_
}

void RpbListKeysResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbListKeysResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // optional bool done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbListKeysResp)
}

::google::protobuf::uint8* RpbListKeysResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbListKeysResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // optional bool done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbListKeysResp)
  return target;
}

int RpbListKeysResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool done = 2;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListKeysResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListKeysResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListKeysResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListKeysResp::MergeFrom(const RpbListKeysResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListKeysResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListKeysResp::CopyFrom(const RpbListKeysResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListKeysResp::IsInitialized() const {

  return true;
}

void RpbListKeysResp::Swap(RpbListKeysResp* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListKeysResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListKeysResp_descriptor_;
  metadata.reflection = RpbListKeysResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbMapRedReq::kRequestFieldNumber;
const int RpbMapRedReq::kContentTypeFieldNumber;
#endif  // !_MSC_VER

RpbMapRedReq::RpbMapRedReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbMapRedReq)
}

void RpbMapRedReq::InitAsDefaultInstance() {
}

RpbMapRedReq::RpbMapRedReq(const RpbMapRedReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbMapRedReq)
}

void RpbMapRedReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbMapRedReq::~RpbMapRedReq() {
  // @@protoc_insertion_point(destructor:RpbMapRedReq)
  SharedDtor();
}

void RpbMapRedReq::SharedDtor() {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_;
  }
  if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_type_;
  }
  if (this != default_instance_) {
  }
}

void RpbMapRedReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbMapRedReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbMapRedReq_descriptor_;
}

const RpbMapRedReq& RpbMapRedReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbMapRedReq* RpbMapRedReq::default_instance_ = NULL;

RpbMapRedReq* RpbMapRedReq::New() const {
  return new RpbMapRedReq;
}

void RpbMapRedReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_->clear();
      }
    }
    if (has_content_type()) {
      if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbMapRedReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbMapRedReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content_type;
        break;
      }

      // required bytes content_type = 2;
      case 2: {
        if (tag == 18) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbMapRedReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbMapRedReq)
  return false;
#undef DO_
}

void RpbMapRedReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbMapRedReq)
  // required bytes request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->request(), output);
  }

  // required bytes content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbMapRedReq)
}

::google::protobuf::uint8* RpbMapRedReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbMapRedReq)
  // required bytes request = 1;
  if (has_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request(), target);
  }

  // required bytes content_type = 2;
  if (has_content_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbMapRedReq)
  return target;
}

int RpbMapRedReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }

    // required bytes content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbMapRedReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbMapRedReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbMapRedReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbMapRedReq::MergeFrom(const RpbMapRedReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbMapRedReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbMapRedReq::CopyFrom(const RpbMapRedReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbMapRedReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbMapRedReq::Swap(RpbMapRedReq* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(content_type_, other->content_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbMapRedReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbMapRedReq_descriptor_;
  metadata.reflection = RpbMapRedReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbMapRedResp::kPhaseFieldNumber;
const int RpbMapRedResp::kResponseFieldNumber;
const int RpbMapRedResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbMapRedResp::RpbMapRedResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbMapRedResp)
}

void RpbMapRedResp::InitAsDefaultInstance() {
}

RpbMapRedResp::RpbMapRedResp(const RpbMapRedResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbMapRedResp)
}

void RpbMapRedResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  phase_ = 0u;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbMapRedResp::~RpbMapRedResp() {
  // @@protoc_insertion_point(destructor:RpbMapRedResp)
  SharedDtor();
}

void RpbMapRedResp::SharedDtor() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void RpbMapRedResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbMapRedResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbMapRedResp_descriptor_;
}

const RpbMapRedResp& RpbMapRedResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbMapRedResp* RpbMapRedResp::default_instance_ = NULL;

RpbMapRedResp* RpbMapRedResp::New() const {
  return new RpbMapRedResp;
}

void RpbMapRedResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbMapRedResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(phase_, done_);
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbMapRedResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbMapRedResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phase = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_)));
          set_has_phase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional bytes response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3;
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbMapRedResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbMapRedResp)
  return false;
#undef DO_
}

void RpbMapRedResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbMapRedResp)
  // optional uint32 phase = 1;
  if (has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase(), output);
  }

  // optional bytes response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->response(), output);
  }

  // optional bool done = 3;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbMapRedResp)
}

::google::protobuf::uint8* RpbMapRedResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbMapRedResp)
  // optional uint32 phase = 1;
  if (has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase(), target);
  }

  // optional bytes response = 2;
  if (has_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->response(), target);
  }

  // optional bool done = 3;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbMapRedResp)
  return target;
}

int RpbMapRedResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase());
    }

    // optional bytes response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }

    // optional bool done = 3;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbMapRedResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbMapRedResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbMapRedResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbMapRedResp::MergeFrom(const RpbMapRedResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase()) {
      set_phase(from.phase());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbMapRedResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbMapRedResp::CopyFrom(const RpbMapRedResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbMapRedResp::IsInitialized() const {

  return true;
}

void RpbMapRedResp::Swap(RpbMapRedResp* other) {
  if (other != this) {
    std::swap(phase_, other->phase_);
    std::swap(response_, other->response_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbMapRedResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbMapRedResp_descriptor_;
  metadata.reflection = RpbMapRedResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RpbIndexReq_IndexQueryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexReq_IndexQueryType_descriptor_;
}
bool RpbIndexReq_IndexQueryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpbIndexReq_IndexQueryType RpbIndexReq::eq;
const RpbIndexReq_IndexQueryType RpbIndexReq::range;
const RpbIndexReq_IndexQueryType RpbIndexReq::IndexQueryType_MIN;
const RpbIndexReq_IndexQueryType RpbIndexReq::IndexQueryType_MAX;
const int RpbIndexReq::IndexQueryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpbIndexReq::kBucketFieldNumber;
const int RpbIndexReq::kIndexFieldNumber;
const int RpbIndexReq::kQtypeFieldNumber;
const int RpbIndexReq::kKeyFieldNumber;
const int RpbIndexReq::kRangeMinFieldNumber;
const int RpbIndexReq::kRangeMaxFieldNumber;
const int RpbIndexReq::kReturnTermsFieldNumber;
const int RpbIndexReq::kStreamFieldNumber;
const int RpbIndexReq::kMaxResultsFieldNumber;
const int RpbIndexReq::kContinuationFieldNumber;
const int RpbIndexReq::kTimeoutFieldNumber;
const int RpbIndexReq::kTypeFieldNumber;
const int RpbIndexReq::kTermRegexFieldNumber;
const int RpbIndexReq::kPaginationSortFieldNumber;
const int RpbIndexReq::kCoverContextFieldNumber;
const int RpbIndexReq::kReturnBodyFieldNumber;
#endif  // !_MSC_VER

RpbIndexReq::RpbIndexReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexReq)
}

void RpbIndexReq::InitAsDefaultInstance() {
}

RpbIndexReq::RpbIndexReq(const RpbIndexReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexReq)
}

void RpbIndexReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qtype_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_min_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_max_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_terms_ = false;
  stream_ = false;
  max_results_ = 0u;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_regex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pagination_sort_ = false;
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  return_body_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexReq::~RpbIndexReq() {
  // @@protoc_insertion_point(destructor:RpbIndexReq)
  SharedDtor();
}

void RpbIndexReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (range_min_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete range_min_;
  }
  if (range_max_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete range_max_;
  }
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (term_regex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete term_regex_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
  }
}

void RpbIndexReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexReq_descriptor_;
}

const RpbIndexReq& RpbIndexReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbIndexReq* RpbIndexReq::default_instance_ = NULL;

RpbIndexReq* RpbIndexReq::New() const {
  return new RpbIndexReq;
}

void RpbIndexReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbIndexReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(return_terms_, stream_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index_->clear();
      }
    }
    qtype_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_range_min()) {
      if (range_min_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        range_min_->clear();
      }
    }
    if (has_range_max()) {
      if (range_max_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        range_max_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(pagination_sort_, return_body_);
    max_results_ = 0u;
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    timeout_ = 0u;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_term_regex()) {
      if (term_regex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        term_regex_->clear();
      }
    }
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // required bytes index = 2;
      case 2: {
        if (tag == 18) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_qtype;
        break;
      }

      // required .RpbIndexReq.IndexQueryType qtype = 3;
      case 3: {
        if (tag == 24) {
         parse_qtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RpbIndexReq_IndexQueryType_IsValid(value)) {
            set_qtype(static_cast< ::RpbIndexReq_IndexQueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional bytes key = 4;
      case 4: {
        if (tag == 34) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_range_min;
        break;
      }

      // optional bytes range_min = 5;
      case 5: {
        if (tag == 42) {
         parse_range_min:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_min()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_range_max;
        break;
      }

      // optional bytes range_max = 6;
      case 6: {
        if (tag == 50) {
         parse_range_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_range_max()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_return_terms;
        break;
      }

      // optional bool return_terms = 7;
      case 7: {
        if (tag == 56) {
         parse_return_terms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_terms_)));
          set_has_return_terms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_stream;
        break;
      }

      // optional bool stream = 8;
      case 8: {
        if (tag == 64) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_results;
        break;
      }

      // optional uint32 max_results = 9;
      case 9: {
        if (tag == 72) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
          set_has_max_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 10;
      case 10: {
        if (tag == 82) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 11;
      case 11: {
        if (tag == 88) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_type;
        break;
      }

      // optional bytes type = 12;
      case 12: {
        if (tag == 98) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_term_regex;
        break;
      }

      // optional bytes term_regex = 13;
      case 13: {
        if (tag == 106) {
         parse_term_regex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_term_regex()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pagination_sort;
        break;
      }

      // optional bool pagination_sort = 14;
      case 14: {
        if (tag == 112) {
         parse_pagination_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pagination_sort_)));
          set_has_pagination_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cover_context;
        break;
      }

      // optional bytes cover_context = 15;
      case 15: {
        if (tag == 122) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_return_body;
        break;
      }

      // optional bool return_body = 16;
      case 16: {
        if (tag == 128) {
         parse_return_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_body_)));
          set_has_return_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexReq)
  return false;
#undef DO_
}

void RpbIndexReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->index(), output);
  }

  // required .RpbIndexReq.IndexQueryType qtype = 3;
  if (has_qtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->qtype(), output);
  }

  // optional bytes key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->key(), output);
  }

  // optional bytes range_min = 5;
  if (has_range_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->range_min(), output);
  }

  // optional bytes range_max = 6;
  if (has_range_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->range_max(), output);
  }

  // optional bool return_terms = 7;
  if (has_return_terms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->return_terms(), output);
  }

  // optional bool stream = 8;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->stream(), output);
  }

  // optional uint32 max_results = 9;
  if (has_max_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_results(), output);
  }

  // optional bytes continuation = 10;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->continuation(), output);
  }

  // optional uint32 timeout = 11;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->timeout(), output);
  }

  // optional bytes type = 12;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->type(), output);
  }

  // optional bytes term_regex = 13;
  if (has_term_regex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->term_regex(), output);
  }

  // optional bool pagination_sort = 14;
  if (has_pagination_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->pagination_sort(), output);
  }

  // optional bytes cover_context = 15;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      15, this->cover_context(), output);
  }

  // optional bool return_body = 16;
  if (has_return_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->return_body(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexReq)
}

::google::protobuf::uint8* RpbIndexReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes index = 2;
  if (has_index()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->index(), target);
  }

  // required .RpbIndexReq.IndexQueryType qtype = 3;
  if (has_qtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->qtype(), target);
  }

  // optional bytes key = 4;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->key(), target);
  }

  // optional bytes range_min = 5;
  if (has_range_min()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->range_min(), target);
  }

  // optional bytes range_max = 6;
  if (has_range_max()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->range_max(), target);
  }

  // optional bool return_terms = 7;
  if (has_return_terms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->return_terms(), target);
  }

  // optional bool stream = 8;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->stream(), target);
  }

  // optional uint32 max_results = 9;
  if (has_max_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_results(), target);
  }

  // optional bytes continuation = 10;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->continuation(), target);
  }

  // optional uint32 timeout = 11;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->timeout(), target);
  }

  // optional bytes type = 12;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->type(), target);
  }

  // optional bytes term_regex = 13;
  if (has_term_regex()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->term_regex(), target);
  }

  // optional bool pagination_sort = 14;
  if (has_pagination_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->pagination_sort(), target);
  }

  // optional bytes cover_context = 15;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->cover_context(), target);
  }

  // optional bool return_body = 16;
  if (has_return_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->return_body(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexReq)
  return target;
}

int RpbIndexReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->index());
    }

    // required .RpbIndexReq.IndexQueryType qtype = 3;
    if (has_qtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qtype());
    }

    // optional bytes key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes range_min = 5;
    if (has_range_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->range_min());
    }

    // optional bytes range_max = 6;
    if (has_range_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->range_max());
    }

    // optional bool return_terms = 7;
    if (has_return_terms()) {
      total_size += 1 + 1;
    }

    // optional bool stream = 8;
    if (has_stream()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 max_results = 9;
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_results());
    }

    // optional bytes continuation = 10;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional uint32 timeout = 11;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bytes type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // optional bytes term_regex = 13;
    if (has_term_regex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->term_regex());
    }

    // optional bool pagination_sort = 14;
    if (has_pagination_sort()) {
      total_size += 1 + 1;
    }

    // optional bytes cover_context = 15;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

    // optional bool return_body = 16;
    if (has_return_body()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexReq::MergeFrom(const RpbIndexReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_qtype()) {
      set_qtype(from.qtype());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_range_min()) {
      set_range_min(from.range_min());
    }
    if (from.has_range_max()) {
      set_range_max(from.range_max());
    }
    if (from.has_return_terms()) {
      set_return_terms(from.return_terms());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_results()) {
      set_max_results(from.max_results());
    }
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_term_regex()) {
      set_term_regex(from.term_regex());
    }
    if (from.has_pagination_sort()) {
      set_pagination_sort(from.pagination_sort());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
    if (from.has_return_body()) {
      set_return_body(from.return_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexReq::CopyFrom(const RpbIndexReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RpbIndexReq::Swap(RpbIndexReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(index_, other->index_);
    std::swap(qtype_, other->qtype_);
    std::swap(key_, other->key_);
    std::swap(range_min_, other->range_min_);
    std::swap(range_max_, other->range_max_);
    std::swap(return_terms_, other->return_terms_);
    std::swap(stream_, other->stream_);
    std::swap(max_results_, other->max_results_);
    std::swap(continuation_, other->continuation_);
    std::swap(timeout_, other->timeout_);
    std::swap(type_, other->type_);
    std::swap(term_regex_, other->term_regex_);
    std::swap(pagination_sort_, other->pagination_sort_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(return_body_, other->return_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexReq_descriptor_;
  metadata.reflection = RpbIndexReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbIndexResp::kKeysFieldNumber;
const int RpbIndexResp::kResultsFieldNumber;
const int RpbIndexResp::kContinuationFieldNumber;
const int RpbIndexResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbIndexResp::RpbIndexResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexResp)
}

void RpbIndexResp::InitAsDefaultInstance() {
}

RpbIndexResp::RpbIndexResp(const RpbIndexResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexResp)
}

void RpbIndexResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexResp::~RpbIndexResp() {
  // @@protoc_insertion_point(destructor:RpbIndexResp)
  SharedDtor();
}

void RpbIndexResp::SharedDtor() {
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (this != default_instance_) {
  }
}

void RpbIndexResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexResp_descriptor_;
}

const RpbIndexResp& RpbIndexResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbIndexResp* RpbIndexResp::default_instance_ = NULL;

RpbIndexResp* RpbIndexResp::New() const {
  return new RpbIndexResp;
}

void RpbIndexResp::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    done_ = false;
  }
  keys_.Clear();
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .RpbPair results = 2;
      case 2: {
        if (tag == 18) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_results;
        if (input->ExpectTag(26)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 3;
      case 3: {
        if (tag == 26) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_done;
        break;
      }

      // optional bool done = 4;
      case 4: {
        if (tag == 32) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexResp)
  return false;
#undef DO_
}

void RpbIndexResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }

  // repeated .RpbPair results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  // optional bytes continuation = 3;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->continuation(), output);
  }

  // optional bool done = 4;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexResp)
}

::google::protobuf::uint8* RpbIndexResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexResp)
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }

  // repeated .RpbPair results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  // optional bytes continuation = 3;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->continuation(), target);
  }

  // optional bool done = 4;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexResp)
  return target;
}

int RpbIndexResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bytes continuation = 3;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional bool done = 4;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }

  // repeated .RpbPair results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexResp::MergeFrom(const RpbIndexResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexResp::CopyFrom(const RpbIndexResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void RpbIndexResp::Swap(RpbIndexResp* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    results_.Swap(&other->results_);
    std::swap(continuation_, other->continuation_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexResp_descriptor_;
  metadata.reflection = RpbIndexResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbIndexBodyResp::kObjectsFieldNumber;
const int RpbIndexBodyResp::kContinuationFieldNumber;
const int RpbIndexBodyResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbIndexBodyResp::RpbIndexBodyResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexBodyResp)
}

void RpbIndexBodyResp::InitAsDefaultInstance() {
}

RpbIndexBodyResp::RpbIndexBodyResp(const RpbIndexBodyResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexBodyResp)
}

void RpbIndexBodyResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexBodyResp::~RpbIndexBodyResp() {
  // @@protoc_insertion_point(destructor:RpbIndexBodyResp)
  SharedDtor();
}

void RpbIndexBodyResp::SharedDtor() {
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (this != default_instance_) {
  }
}

void RpbIndexBodyResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexBodyResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexBodyResp_descriptor_;
}

const RpbIndexBodyResp& RpbIndexBodyResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbIndexBodyResp* RpbIndexBodyResp::default_instance_ = NULL;

RpbIndexBodyResp* RpbIndexBodyResp::New() const {
  return new RpbIndexBodyResp;
}

void RpbIndexBodyResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    done_ = false;
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexBodyResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexBodyResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbIndexObject objects = 1;
      case 1: {
        if (tag == 10) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectTag(18)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 2;
      case 2: {
        if (tag == 18) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3;
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexBodyResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexBodyResp)
  return false;
#undef DO_
}

void RpbIndexBodyResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexBodyResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->continuation(), output);
  }

  // optional bool done = 3;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexBodyResp)
}

::google::protobuf::uint8* RpbIndexBodyResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexBodyResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->continuation(), target);
  }

  // optional bool done = 3;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexBodyResp)
  return target;
}

int RpbIndexBodyResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes continuation = 2;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional bool done = 3;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbIndexObject objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexBodyResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexBodyResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexBodyResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexBodyResp::MergeFrom(const RpbIndexBodyResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexBodyResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexBodyResp::CopyFrom(const RpbIndexBodyResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexBodyResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objects())) return false;
  return true;
}

void RpbIndexBodyResp::Swap(RpbIndexBodyResp* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(continuation_, other->continuation_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexBodyResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexBodyResp_descriptor_;
  metadata.reflection = RpbIndexBodyResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCSBucketReq::kBucketFieldNumber;
const int RpbCSBucketReq::kStartKeyFieldNumber;
const int RpbCSBucketReq::kEndKeyFieldNumber;
const int RpbCSBucketReq::kStartInclFieldNumber;
const int RpbCSBucketReq::kEndInclFieldNumber;
const int RpbCSBucketReq::kContinuationFieldNumber;
const int RpbCSBucketReq::kMaxResultsFieldNumber;
const int RpbCSBucketReq::kTimeoutFieldNumber;
const int RpbCSBucketReq::kTypeFieldNumber;
const int RpbCSBucketReq::kCoverContextFieldNumber;
#endif  // !_MSC_VER

RpbCSBucketReq::RpbCSBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCSBucketReq)
}

void RpbCSBucketReq::InitAsDefaultInstance() {
}

RpbCSBucketReq::RpbCSBucketReq(const RpbCSBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCSBucketReq)
}

void RpbCSBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_incl_ = true;
  end_incl_ = false;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_results_ = 0u;
  timeout_ = 0u;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCSBucketReq::~RpbCSBucketReq() {
  // @@protoc_insertion_point(destructor:RpbCSBucketReq)
  SharedDtor();
}

void RpbCSBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
  }
}

void RpbCSBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCSBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCSBucketReq_descriptor_;
}

const RpbCSBucketReq& RpbCSBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCSBucketReq* RpbCSBucketReq::default_instance_ = NULL;

RpbCSBucketReq* RpbCSBucketReq::New() const {
  return new RpbCSBucketReq;
}

void RpbCSBucketReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbCSBucketReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(end_incl_, max_results_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_key_->clear();
      }
    }
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_key_->clear();
      }
    }
    start_incl_ = true;
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    timeout_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCSBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCSBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // required bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_incl;
        break;
      }

      // optional bool start_incl = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_start_incl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_incl_)));
          set_has_start_incl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_incl;
        break;
      }

      // optional bool end_incl = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_end_incl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_incl_)));
          set_has_end_incl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 6;
      case 6: {
        if (tag == 50) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_results;
        break;
      }

      // optional uint32 max_results = 7;
      case 7: {
        if (tag == 56) {
         parse_max_results:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_results_)));
          set_has_max_results();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 8;
      case 8: {
        if (tag == 64) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_type;
        break;
      }

      // optional bytes type = 9;
      case 9: {
        if (tag == 74) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_cover_context;
        break;
      }

      // optional bytes cover_context = 10;
      case 10: {
        if (tag == 82) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCSBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCSBucketReq)
  return false;
#undef DO_
}

void RpbCSBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCSBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // optional bool start_incl = 4 [default = true];
  if (has_start_incl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->start_incl(), output);
  }

  // optional bool end_incl = 5 [default = false];
  if (has_end_incl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->end_incl(), output);
  }

  // optional bytes continuation = 6;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->continuation(), output);
  }

  // optional uint32 max_results = 7;
  if (has_max_results()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_results(), output);
  }

  // optional uint32 timeout = 8;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->timeout(), output);
  }

  // optional bytes type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->type(), output);
  }

  // optional bytes cover_context = 10;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->cover_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCSBucketReq)
}

::google::protobuf::uint8* RpbCSBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCSBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes start_key = 2;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // optional bool start_incl = 4 [default = true];
  if (has_start_incl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->start_incl(), target);
  }

  // optional bool end_incl = 5 [default = false];
  if (has_end_incl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->end_incl(), target);
  }

  // optional bytes continuation = 6;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->continuation(), target);
  }

  // optional uint32 max_results = 7;
  if (has_max_results()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_results(), target);
  }

  // optional uint32 timeout = 8;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->timeout(), target);
  }

  // optional bytes type = 9;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->type(), target);
  }

  // optional bytes cover_context = 10;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->cover_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCSBucketReq)
  return target;
}

int RpbCSBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

    // optional bool start_incl = 4 [default = true];
    if (has_start_incl()) {
      total_size += 1 + 1;
    }

    // optional bool end_incl = 5 [default = false];
    if (has_end_incl()) {
      total_size += 1 + 1;
    }

    // optional bytes continuation = 6;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional uint32 max_results = 7;
    if (has_max_results()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_results());
    }

    // optional uint32 timeout = 8;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // optional bytes cover_context = 10;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCSBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCSBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCSBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCSBucketReq::MergeFrom(const RpbCSBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
    if (from.has_start_incl()) {
      set_start_incl(from.start_incl());
    }
    if (from.has_end_incl()) {
      set_end_incl(from.end_incl());
    }
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_max_results()) {
      set_max_results(from.max_results());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCSBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCSBucketReq::CopyFrom(const RpbCSBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCSBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbCSBucketReq::Swap(RpbCSBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(start_key_, other->start_key_);
    std::swap(end_key_, other->end_key_);
    std::swap(start_incl_, other->start_incl_);
    std::swap(end_incl_, other->end_incl_);
    std::swap(continuation_, other->continuation_);
    std::swap(max_results_, other->max_results_);
    std::swap(timeout_, other->timeout_);
    std::swap(type_, other->type_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCSBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCSBucketReq_descriptor_;
  metadata.reflection = RpbCSBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCSBucketResp::kObjectsFieldNumber;
const int RpbCSBucketResp::kContinuationFieldNumber;
const int RpbCSBucketResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbCSBucketResp::RpbCSBucketResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCSBucketResp)
}

void RpbCSBucketResp::InitAsDefaultInstance() {
}

RpbCSBucketResp::RpbCSBucketResp(const RpbCSBucketResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCSBucketResp)
}

void RpbCSBucketResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  continuation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCSBucketResp::~RpbCSBucketResp() {
  // @@protoc_insertion_point(destructor:RpbCSBucketResp)
  SharedDtor();
}

void RpbCSBucketResp::SharedDtor() {
  if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete continuation_;
  }
  if (this != default_instance_) {
  }
}

void RpbCSBucketResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCSBucketResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCSBucketResp_descriptor_;
}

const RpbCSBucketResp& RpbCSBucketResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCSBucketResp* RpbCSBucketResp::default_instance_ = NULL;

RpbCSBucketResp* RpbCSBucketResp::New() const {
  return new RpbCSBucketResp;
}

void RpbCSBucketResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_continuation()) {
      if (continuation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        continuation_->clear();
      }
    }
    done_ = false;
  }
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCSBucketResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCSBucketResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbIndexObject objects = 1;
      case 1: {
        if (tag == 10) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_objects;
        if (input->ExpectTag(18)) goto parse_continuation;
        break;
      }

      // optional bytes continuation = 2;
      case 2: {
        if (tag == 18) {
         parse_continuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_continuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3;
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCSBucketResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCSBucketResp)
  return false;
#undef DO_
}

void RpbCSBucketResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCSBucketResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->continuation(), output);
  }

  // optional bool done = 3;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCSBucketResp)
}

::google::protobuf::uint8* RpbCSBucketResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCSBucketResp)
  // repeated .RpbIndexObject objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  // optional bytes continuation = 2;
  if (has_continuation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->continuation(), target);
  }

  // optional bool done = 3;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCSBucketResp)
  return target;
}

int RpbCSBucketResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes continuation = 2;
    if (has_continuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->continuation());
    }

    // optional bool done = 3;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbIndexObject objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCSBucketResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCSBucketResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCSBucketResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCSBucketResp::MergeFrom(const RpbCSBucketResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_continuation()) {
      set_continuation(from.continuation());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCSBucketResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCSBucketResp::CopyFrom(const RpbCSBucketResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCSBucketResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objects())) return false;
  return true;
}

void RpbCSBucketResp::Swap(RpbCSBucketResp* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(continuation_, other->continuation_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCSBucketResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCSBucketResp_descriptor_;
  metadata.reflection = RpbCSBucketResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbIndexObject::kKeyFieldNumber;
const int RpbIndexObject::kObjectFieldNumber;
#endif  // !_MSC_VER

RpbIndexObject::RpbIndexObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbIndexObject)
}

void RpbIndexObject::InitAsDefaultInstance() {
  object_ = const_cast< ::RpbGetResp*>(&::RpbGetResp::default_instance());
}

RpbIndexObject::RpbIndexObject(const RpbIndexObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbIndexObject)
}

void RpbIndexObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbIndexObject::~RpbIndexObject() {
  // @@protoc_insertion_point(destructor:RpbIndexObject)
  SharedDtor();
}

void RpbIndexObject::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
    delete object_;
  }
}

void RpbIndexObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbIndexObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbIndexObject_descriptor_;
}

const RpbIndexObject& RpbIndexObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbIndexObject* RpbIndexObject::default_instance_ = NULL;

RpbIndexObject* RpbIndexObject::New() const {
  return new RpbIndexObject;
}

void RpbIndexObject::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_object()) {
      if (object_ != NULL) object_->::RpbGetResp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbIndexObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbIndexObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // required .RpbGetResp object = 2;
      case 2: {
        if (tag == 18) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbIndexObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbIndexObject)
  return false;
#undef DO_
}

void RpbIndexObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbIndexObject)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required .RpbGetResp object = 2;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbIndexObject)
}

::google::protobuf::uint8* RpbIndexObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbIndexObject)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required .RpbGetResp object = 2;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbIndexObject)
  return target;
}

int RpbIndexObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required .RpbGetResp object = 2;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbIndexObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbIndexObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbIndexObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbIndexObject::MergeFrom(const RpbIndexObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_object()) {
      mutable_object()->::RpbGetResp::MergeFrom(from.object());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbIndexObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbIndexObject::CopyFrom(const RpbIndexObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbIndexObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  return true;
}

void RpbIndexObject::Swap(RpbIndexObject* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(object_, other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbIndexObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbIndexObject_descriptor_;
  metadata.reflection = RpbIndexObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbContent::kValueFieldNumber;
const int RpbContent::kContentTypeFieldNumber;
const int RpbContent::kCharsetFieldNumber;
const int RpbContent::kContentEncodingFieldNumber;
const int RpbContent::kVtagFieldNumber;
const int RpbContent::kLinksFieldNumber;
const int RpbContent::kLastModFieldNumber;
const int RpbContent::kLastModUsecsFieldNumber;
const int RpbContent::kUsermetaFieldNumber;
const int RpbContent::kIndexesFieldNumber;
const int RpbContent::kDeletedFieldNumber;
#endif  // !_MSC_VER

RpbContent::RpbContent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbContent)
}

void RpbContent::InitAsDefaultInstance() {
}

RpbContent::RpbContent(const RpbContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbContent)
}

void RpbContent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_encoding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_mod_ = 0u;
  last_mod_usecs_ = 0u;
  deleted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbContent::~RpbContent() {
  // @@protoc_insertion_point(destructor:RpbContent)
  SharedDtor();
}

void RpbContent::SharedDtor() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_type_;
  }
  if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charset_;
  }
  if (content_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_encoding_;
  }
  if (vtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vtag_;
  }
  if (this != default_instance_) {
  }
}

void RpbContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbContent_descriptor_;
}

const RpbContent& RpbContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbContent* RpbContent::default_instance_ = NULL;

RpbContent* RpbContent::New() const {
  return new RpbContent;
}

void RpbContent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbContent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(last_mod_, last_mod_usecs_);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_content_type()) {
      if (content_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_type_->clear();
      }
    }
    if (has_charset()) {
      if (charset_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charset_->clear();
      }
    }
    if (has_content_encoding()) {
      if (content_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_encoding_->clear();
      }
    }
    if (has_vtag()) {
      if (vtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vtag_->clear();
      }
    }
  }
  deleted_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  links_.Clear();
  usermeta_.Clear();
  indexes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content_type;
        break;
      }

      // optional bytes content_type = 2;
      case 2: {
        if (tag == 18) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_charset;
        break;
      }

      // optional bytes charset = 3;
      case 3: {
        if (tag == 26) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content_encoding;
        break;
      }

      // optional bytes content_encoding = 4;
      case 4: {
        if (tag == 34) {
         parse_content_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_encoding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_vtag;
        break;
      }

      // optional bytes vtag = 5;
      case 5: {
        if (tag == 42) {
         parse_vtag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vtag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_links;
        break;
      }

      // repeated .RpbLink links = 6;
      case 6: {
        if (tag == 50) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_links;
        if (input->ExpectTag(56)) goto parse_last_mod;
        break;
      }

      // optional uint32 last_mod = 7;
      case 7: {
        if (tag == 56) {
         parse_last_mod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_mod_)));
          set_has_last_mod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_mod_usecs;
        break;
      }

      // optional uint32 last_mod_usecs = 8;
      case 8: {
        if (tag == 64) {
         parse_last_mod_usecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_mod_usecs_)));
          set_has_last_mod_usecs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_usermeta;
        break;
      }

      // repeated .RpbPair usermeta = 9;
      case 9: {
        if (tag == 74) {
         parse_usermeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermeta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_usermeta;
        if (input->ExpectTag(82)) goto parse_indexes;
        break;
      }

      // repeated .RpbPair indexes = 10;
      case 10: {
        if (tag == 82) {
         parse_indexes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_indexes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_indexes;
        if (input->ExpectTag(88)) goto parse_deleted;
        break;
      }

      // optional bool deleted = 11;
      case 11: {
        if (tag == 88) {
         parse_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
          set_has_deleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbContent)
  return false;
#undef DO_
}

void RpbContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbContent)
  // required bytes value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  // optional bytes content_type = 2;
  if (has_content_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content_type(), output);
  }

  // optional bytes charset = 3;
  if (has_charset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->charset(), output);
  }

  // optional bytes content_encoding = 4;
  if (has_content_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content_encoding(), output);
  }

  // optional bytes vtag = 5;
  if (has_vtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->vtag(), output);
  }

  // repeated .RpbLink links = 6;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->links(i), output);
  }

  // optional uint32 last_mod = 7;
  if (has_last_mod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_mod(), output);
  }

  // optional uint32 last_mod_usecs = 8;
  if (has_last_mod_usecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_mod_usecs(), output);
  }

  // repeated .RpbPair usermeta = 9;
  for (int i = 0; i < this->usermeta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->usermeta(i), output);
  }

  // repeated .RpbPair indexes = 10;
  for (int i = 0; i < this->indexes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->indexes(i), output);
  }

  // optional bool deleted = 11;
  if (has_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->deleted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbContent)
}

::google::protobuf::uint8* RpbContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbContent)
  // required bytes value = 1;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  // optional bytes content_type = 2;
  if (has_content_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content_type(), target);
  }

  // optional bytes charset = 3;
  if (has_charset()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->charset(), target);
  }

  // optional bytes content_encoding = 4;
  if (has_content_encoding()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content_encoding(), target);
  }

  // optional bytes vtag = 5;
  if (has_vtag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->vtag(), target);
  }

  // repeated .RpbLink links = 6;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->links(i), target);
  }

  // optional uint32 last_mod = 7;
  if (has_last_mod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_mod(), target);
  }

  // optional uint32 last_mod_usecs = 8;
  if (has_last_mod_usecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_mod_usecs(), target);
  }

  // repeated .RpbPair usermeta = 9;
  for (int i = 0; i < this->usermeta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->usermeta(i), target);
  }

  // repeated .RpbPair indexes = 10;
  for (int i = 0; i < this->indexes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->indexes(i), target);
  }

  // optional bool deleted = 11;
  if (has_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->deleted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbContent)
  return target;
}

int RpbContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional bytes content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_type());
    }

    // optional bytes charset = 3;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charset());
    }

    // optional bytes content_encoding = 4;
    if (has_content_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_encoding());
    }

    // optional bytes vtag = 5;
    if (has_vtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vtag());
    }

    // optional uint32 last_mod = 7;
    if (has_last_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_mod());
    }

    // optional uint32 last_mod_usecs = 8;
    if (has_last_mod_usecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_mod_usecs());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool deleted = 11;
    if (has_deleted()) {
      total_size += 1 + 1;
    }

  }
  // repeated .RpbLink links = 6;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }

  // repeated .RpbPair usermeta = 9;
  total_size += 1 * this->usermeta_size();
  for (int i = 0; i < this->usermeta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermeta(i));
  }

  // repeated .RpbPair indexes = 10;
  total_size += 1 * this->indexes_size();
  for (int i = 0; i < this->indexes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->indexes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbContent::MergeFrom(const RpbContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  usermeta_.MergeFrom(from.usermeta_);
  indexes_.MergeFrom(from.indexes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_content_type()) {
      set_content_type(from.content_type());
    }
    if (from.has_charset()) {
      set_charset(from.charset());
    }
    if (from.has_content_encoding()) {
      set_content_encoding(from.content_encoding());
    }
    if (from.has_vtag()) {
      set_vtag(from.vtag());
    }
    if (from.has_last_mod()) {
      set_last_mod(from.last_mod());
    }
    if (from.has_last_mod_usecs()) {
      set_last_mod_usecs(from.last_mod_usecs());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_deleted()) {
      set_deleted(from.deleted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbContent::CopyFrom(const RpbContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->usermeta())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->indexes())) return false;
  return true;
}

void RpbContent::Swap(RpbContent* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(content_type_, other->content_type_);
    std::swap(charset_, other->charset_);
    std::swap(content_encoding_, other->content_encoding_);
    std::swap(vtag_, other->vtag_);
    links_.Swap(&other->links_);
    std::swap(last_mod_, other->last_mod_);
    std::swap(last_mod_usecs_, other->last_mod_usecs_);
    usermeta_.Swap(&other->usermeta_);
    indexes_.Swap(&other->indexes_);
    std::swap(deleted_, other->deleted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbContent_descriptor_;
  metadata.reflection = RpbContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbLink::kBucketFieldNumber;
const int RpbLink::kKeyFieldNumber;
const int RpbLink::kTagFieldNumber;
#endif  // !_MSC_VER

RpbLink::RpbLink()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbLink)
}

void RpbLink::InitAsDefaultInstance() {
}

RpbLink::RpbLink(const RpbLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbLink)
}

void RpbLink::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbLink::~RpbLink() {
  // @@protoc_insertion_point(destructor:RpbLink)
  SharedDtor();
}

void RpbLink::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void RpbLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbLink_descriptor_;
}

const RpbLink& RpbLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbLink* RpbLink::default_instance_ = NULL;

RpbLink* RpbLink::New() const {
  return new RpbLink;
}

void RpbLink::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional bytes tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbLink)
  return false;
#undef DO_
}

void RpbLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbLink)
  // optional bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbLink)
}

::google::protobuf::uint8* RpbLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbLink)
  // optional bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes tag = 3;
  if (has_tag()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbLink)
  return target;
}

int RpbLink::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbLink::MergeFrom(const RpbLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbLink::CopyFrom(const RpbLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbLink::IsInitialized() const {

  return true;
}

void RpbLink::Swap(RpbLink* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbLink_descriptor_;
  metadata.reflection = RpbLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterUpdateReq::kBucketFieldNumber;
const int RpbCounterUpdateReq::kKeyFieldNumber;
const int RpbCounterUpdateReq::kAmountFieldNumber;
const int RpbCounterUpdateReq::kWFieldNumber;
const int RpbCounterUpdateReq::kDwFieldNumber;
const int RpbCounterUpdateReq::kPwFieldNumber;
const int RpbCounterUpdateReq::kReturnvalueFieldNumber;
#endif  // !_MSC_VER

RpbCounterUpdateReq::RpbCounterUpdateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterUpdateReq)
}

void RpbCounterUpdateReq::InitAsDefaultInstance() {
}

RpbCounterUpdateReq::RpbCounterUpdateReq(const RpbCounterUpdateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterUpdateReq)
}

void RpbCounterUpdateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_LONGLONG(0);
  w_ = 0u;
  dw_ = 0u;
  pw_ = 0u;
  returnvalue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterUpdateReq::~RpbCounterUpdateReq() {
  // @@protoc_insertion_point(destructor:RpbCounterUpdateReq)
  SharedDtor();
}

void RpbCounterUpdateReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbCounterUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterUpdateReq_descriptor_;
}

const RpbCounterUpdateReq& RpbCounterUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCounterUpdateReq* RpbCounterUpdateReq::default_instance_ = NULL;

RpbCounterUpdateReq* RpbCounterUpdateReq::New() const {
  return new RpbCounterUpdateReq;
}

void RpbCounterUpdateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbCounterUpdateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(amount_, returnvalue_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // required sint64 amount = 3;
      case 3: {
        if (tag == 24) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_w;
        break;
      }

      // optional uint32 w = 4;
      case 4: {
        if (tag == 32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 5;
      case 5: {
        if (tag == 40) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 6;
      case 6: {
        if (tag == 48) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_returnvalue;
        break;
      }

      // optional bool returnvalue = 7;
      case 7: {
        if (tag == 56) {
         parse_returnvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &returnvalue_)));
          set_has_returnvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterUpdateReq)
  return false;
#undef DO_
}

void RpbCounterUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterUpdateReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // required sint64 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->amount(), output);
  }

  // optional uint32 w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->w(), output);
  }

  // optional uint32 dw = 5;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dw(), output);
  }

  // optional uint32 pw = 6;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pw(), output);
  }

  // optional bool returnvalue = 7;
  if (has_returnvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->returnvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterUpdateReq)
}

::google::protobuf::uint8* RpbCounterUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterUpdateReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // required sint64 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->amount(), target);
  }

  // optional uint32 w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->w(), target);
  }

  // optional uint32 dw = 5;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dw(), target);
  }

  // optional uint32 pw = 6;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pw(), target);
  }

  // optional bool returnvalue = 7;
  if (has_returnvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->returnvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterUpdateReq)
  return target;
}

int RpbCounterUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // required sint64 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->amount());
    }

    // optional uint32 w = 4;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // optional uint32 dw = 5;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional uint32 pw = 6;
    if (has_pw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

    // optional bool returnvalue = 7;
    if (has_returnvalue()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterUpdateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterUpdateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterUpdateReq::MergeFrom(const RpbCounterUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_pw()) {
      set_pw(from.pw());
    }
    if (from.has_returnvalue()) {
      set_returnvalue(from.returnvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterUpdateReq::CopyFrom(const RpbCounterUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RpbCounterUpdateReq::Swap(RpbCounterUpdateReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(amount_, other->amount_);
    std::swap(w_, other->w_);
    std::swap(dw_, other->dw_);
    std::swap(pw_, other->pw_);
    std::swap(returnvalue_, other->returnvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterUpdateReq_descriptor_;
  metadata.reflection = RpbCounterUpdateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterUpdateResp::kValueFieldNumber;
#endif  // !_MSC_VER

RpbCounterUpdateResp::RpbCounterUpdateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterUpdateResp)
}

void RpbCounterUpdateResp::InitAsDefaultInstance() {
}

RpbCounterUpdateResp::RpbCounterUpdateResp(const RpbCounterUpdateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterUpdateResp)
}

void RpbCounterUpdateResp::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterUpdateResp::~RpbCounterUpdateResp() {
  // @@protoc_insertion_point(destructor:RpbCounterUpdateResp)
  SharedDtor();
}

void RpbCounterUpdateResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbCounterUpdateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterUpdateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterUpdateResp_descriptor_;
}

const RpbCounterUpdateResp& RpbCounterUpdateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCounterUpdateResp* RpbCounterUpdateResp::default_instance_ = NULL;

RpbCounterUpdateResp* RpbCounterUpdateResp::New() const {
  return new RpbCounterUpdateResp;
}

void RpbCounterUpdateResp::Clear() {
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterUpdateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterUpdateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterUpdateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterUpdateResp)
  return false;
#undef DO_
}

void RpbCounterUpdateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterUpdateResp)
  // optional sint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterUpdateResp)
}

::google::protobuf::uint8* RpbCounterUpdateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterUpdateResp)
  // optional sint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterUpdateResp)
  return target;
}

int RpbCounterUpdateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterUpdateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterUpdateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterUpdateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterUpdateResp::MergeFrom(const RpbCounterUpdateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterUpdateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterUpdateResp::CopyFrom(const RpbCounterUpdateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterUpdateResp::IsInitialized() const {

  return true;
}

void RpbCounterUpdateResp::Swap(RpbCounterUpdateResp* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterUpdateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterUpdateResp_descriptor_;
  metadata.reflection = RpbCounterUpdateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterGetReq::kBucketFieldNumber;
const int RpbCounterGetReq::kKeyFieldNumber;
const int RpbCounterGetReq::kRFieldNumber;
const int RpbCounterGetReq::kPrFieldNumber;
const int RpbCounterGetReq::kBasicQuorumFieldNumber;
const int RpbCounterGetReq::kNotfoundOkFieldNumber;
#endif  // !_MSC_VER

RpbCounterGetReq::RpbCounterGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterGetReq)
}

void RpbCounterGetReq::InitAsDefaultInstance() {
}

RpbCounterGetReq::RpbCounterGetReq(const RpbCounterGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterGetReq)
}

void RpbCounterGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_ = 0u;
  pr_ = 0u;
  basic_quorum_ = false;
  notfound_ok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterGetReq::~RpbCounterGetReq() {
  // @@protoc_insertion_point(destructor:RpbCounterGetReq)
  SharedDtor();
}

void RpbCounterGetReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbCounterGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterGetReq_descriptor_;
}

const RpbCounterGetReq& RpbCounterGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCounterGetReq* RpbCounterGetReq::default_instance_ = NULL;

RpbCounterGetReq* RpbCounterGetReq::New() const {
  return new RpbCounterGetReq;
}

void RpbCounterGetReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbCounterGetReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(r_, notfound_ok_);
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_r;
        break;
      }

      // optional uint32 r = 3;
      case 3: {
        if (tag == 24) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 4;
      case 4: {
        if (tag == 32) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_basic_quorum;
        break;
      }

      // optional bool basic_quorum = 5;
      case 5: {
        if (tag == 40) {
         parse_basic_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_quorum_)));
          set_has_basic_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_notfound_ok;
        break;
      }

      // optional bool notfound_ok = 6;
      case 6: {
        if (tag == 48) {
         parse_notfound_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notfound_ok_)));
          set_has_notfound_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterGetReq)
  return false;
#undef DO_
}

void RpbCounterGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pr(), output);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->basic_quorum(), output);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->notfound_ok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterGetReq)
}

::google::protobuf::uint8* RpbCounterGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterGetReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional uint32 r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }

  // optional uint32 pr = 4;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pr(), target);
  }

  // optional bool basic_quorum = 5;
  if (has_basic_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->basic_quorum(), target);
  }

  // optional bool notfound_ok = 6;
  if (has_notfound_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->notfound_ok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterGetReq)
  return target;
}

int RpbCounterGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 r = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 pr = 4;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional bool basic_quorum = 5;
    if (has_basic_quorum()) {
      total_size += 1 + 1;
    }

    // optional bool notfound_ok = 6;
    if (has_notfound_ok()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterGetReq::MergeFrom(const RpbCounterGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_basic_quorum()) {
      set_basic_quorum(from.basic_quorum());
    }
    if (from.has_notfound_ok()) {
      set_notfound_ok(from.notfound_ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterGetReq::CopyFrom(const RpbCounterGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbCounterGetReq::Swap(RpbCounterGetReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(r_, other->r_);
    std::swap(pr_, other->pr_);
    std::swap(basic_quorum_, other->basic_quorum_);
    std::swap(notfound_ok_, other->notfound_ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterGetReq_descriptor_;
  metadata.reflection = RpbCounterGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCounterGetResp::kValueFieldNumber;
#endif  // !_MSC_VER

RpbCounterGetResp::RpbCounterGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCounterGetResp)
}

void RpbCounterGetResp::InitAsDefaultInstance() {
}

RpbCounterGetResp::RpbCounterGetResp(const RpbCounterGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCounterGetResp)
}

void RpbCounterGetResp::SharedCtor() {
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCounterGetResp::~RpbCounterGetResp() {
  // @@protoc_insertion_point(destructor:RpbCounterGetResp)
  SharedDtor();
}

void RpbCounterGetResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbCounterGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCounterGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCounterGetResp_descriptor_;
}

const RpbCounterGetResp& RpbCounterGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCounterGetResp* RpbCounterGetResp::default_instance_ = NULL;

RpbCounterGetResp* RpbCounterGetResp::New() const {
  return new RpbCounterGetResp;
}

void RpbCounterGetResp::Clear() {
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCounterGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCounterGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCounterGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCounterGetResp)
  return false;
#undef DO_
}

void RpbCounterGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCounterGetResp)
  // optional sint64 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCounterGetResp)
}

::google::protobuf::uint8* RpbCounterGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCounterGetResp)
  // optional sint64 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCounterGetResp)
  return target;
}

int RpbCounterGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCounterGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCounterGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCounterGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCounterGetResp::MergeFrom(const RpbCounterGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCounterGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCounterGetResp::CopyFrom(const RpbCounterGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCounterGetResp::IsInitialized() const {

  return true;
}

void RpbCounterGetResp::Swap(RpbCounterGetResp* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCounterGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCounterGetResp_descriptor_;
  metadata.reflection = RpbCounterGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketKeyPreflistReq::kBucketFieldNumber;
const int RpbGetBucketKeyPreflistReq::kKeyFieldNumber;
const int RpbGetBucketKeyPreflistReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketKeyPreflistReq::RpbGetBucketKeyPreflistReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketKeyPreflistReq)
}

void RpbGetBucketKeyPreflistReq::InitAsDefaultInstance() {
}

RpbGetBucketKeyPreflistReq::RpbGetBucketKeyPreflistReq(const RpbGetBucketKeyPreflistReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketKeyPreflistReq)
}

void RpbGetBucketKeyPreflistReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketKeyPreflistReq::~RpbGetBucketKeyPreflistReq() {
  // @@protoc_insertion_point(destructor:RpbGetBucketKeyPreflistReq)
  SharedDtor();
}

void RpbGetBucketKeyPreflistReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetBucketKeyPreflistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketKeyPreflistReq_descriptor_;
}

const RpbGetBucketKeyPreflistReq& RpbGetBucketKeyPreflistReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketKeyPreflistReq* RpbGetBucketKeyPreflistReq::default_instance_ = NULL;

RpbGetBucketKeyPreflistReq* RpbGetBucketKeyPreflistReq::New() const {
  return new RpbGetBucketKeyPreflistReq;
}

void RpbGetBucketKeyPreflistReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketKeyPreflistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketKeyPreflistReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // required bytes key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketKeyPreflistReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketKeyPreflistReq)
  return false;
#undef DO_
}

void RpbGetBucketKeyPreflistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketKeyPreflistReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required bytes key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketKeyPreflistReq)
}

::google::protobuf::uint8* RpbGetBucketKeyPreflistReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketKeyPreflistReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required bytes key = 2;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketKeyPreflistReq)
  return target;
}

int RpbGetBucketKeyPreflistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketKeyPreflistReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketKeyPreflistReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketKeyPreflistReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketKeyPreflistReq::MergeFrom(const RpbGetBucketKeyPreflistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketKeyPreflistReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketKeyPreflistReq::CopyFrom(const RpbGetBucketKeyPreflistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketKeyPreflistReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbGetBucketKeyPreflistReq::Swap(RpbGetBucketKeyPreflistReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketKeyPreflistReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketKeyPreflistReq_descriptor_;
  metadata.reflection = RpbGetBucketKeyPreflistReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketKeyPreflistResp::kPreflistFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketKeyPreflistResp::RpbGetBucketKeyPreflistResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketKeyPreflistResp)
}

void RpbGetBucketKeyPreflistResp::InitAsDefaultInstance() {
}

RpbGetBucketKeyPreflistResp::RpbGetBucketKeyPreflistResp(const RpbGetBucketKeyPreflistResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketKeyPreflistResp)
}

void RpbGetBucketKeyPreflistResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketKeyPreflistResp::~RpbGetBucketKeyPreflistResp() {
  // @@protoc_insertion_point(destructor:RpbGetBucketKeyPreflistResp)
  SharedDtor();
}

void RpbGetBucketKeyPreflistResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbGetBucketKeyPreflistResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketKeyPreflistResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketKeyPreflistResp_descriptor_;
}

const RpbGetBucketKeyPreflistResp& RpbGetBucketKeyPreflistResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketKeyPreflistResp* RpbGetBucketKeyPreflistResp::default_instance_ = NULL;

RpbGetBucketKeyPreflistResp* RpbGetBucketKeyPreflistResp::New() const {
  return new RpbGetBucketKeyPreflistResp;
}

void RpbGetBucketKeyPreflistResp::Clear() {
  preflist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketKeyPreflistResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketKeyPreflistResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbBucketKeyPreflistItem preflist = 1;
      case 1: {
        if (tag == 10) {
         parse_preflist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preflist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_preflist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketKeyPreflistResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketKeyPreflistResp)
  return false;
#undef DO_
}

void RpbGetBucketKeyPreflistResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketKeyPreflistResp)
  // repeated .RpbBucketKeyPreflistItem preflist = 1;
  for (int i = 0; i < this->preflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->preflist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketKeyPreflistResp)
}

::google::protobuf::uint8* RpbGetBucketKeyPreflistResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketKeyPreflistResp)
  // repeated .RpbBucketKeyPreflistItem preflist = 1;
  for (int i = 0; i < this->preflist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->preflist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketKeyPreflistResp)
  return target;
}

int RpbGetBucketKeyPreflistResp::ByteSize() const {
  int total_size = 0;

  // repeated .RpbBucketKeyPreflistItem preflist = 1;
  total_size += 1 * this->preflist_size();
  for (int i = 0; i < this->preflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preflist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketKeyPreflistResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketKeyPreflistResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketKeyPreflistResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketKeyPreflistResp::MergeFrom(const RpbGetBucketKeyPreflistResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  preflist_.MergeFrom(from.preflist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketKeyPreflistResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketKeyPreflistResp::CopyFrom(const RpbGetBucketKeyPreflistResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketKeyPreflistResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->preflist())) return false;
  return true;
}

void RpbGetBucketKeyPreflistResp::Swap(RpbGetBucketKeyPreflistResp* other) {
  if (other != this) {
    preflist_.Swap(&other->preflist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketKeyPreflistResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketKeyPreflistResp_descriptor_;
  metadata.reflection = RpbGetBucketKeyPreflistResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbBucketKeyPreflistItem::kPartitionFieldNumber;
const int RpbBucketKeyPreflistItem::kNodeFieldNumber;
const int RpbBucketKeyPreflistItem::kPrimaryFieldNumber;
#endif  // !_MSC_VER

RpbBucketKeyPreflistItem::RpbBucketKeyPreflistItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbBucketKeyPreflistItem)
}

void RpbBucketKeyPreflistItem::InitAsDefaultInstance() {
}

RpbBucketKeyPreflistItem::RpbBucketKeyPreflistItem(const RpbBucketKeyPreflistItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbBucketKeyPreflistItem)
}

void RpbBucketKeyPreflistItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partition_ = GOOGLE_LONGLONG(0);
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbBucketKeyPreflistItem::~RpbBucketKeyPreflistItem() {
  // @@protoc_insertion_point(destructor:RpbBucketKeyPreflistItem)
  SharedDtor();
}

void RpbBucketKeyPreflistItem::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (this != default_instance_) {
  }
}

void RpbBucketKeyPreflistItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbBucketKeyPreflistItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbBucketKeyPreflistItem_descriptor_;
}

const RpbBucketKeyPreflistItem& RpbBucketKeyPreflistItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbBucketKeyPreflistItem* RpbBucketKeyPreflistItem::default_instance_ = NULL;

RpbBucketKeyPreflistItem* RpbBucketKeyPreflistItem::New() const {
  return new RpbBucketKeyPreflistItem;
}

void RpbBucketKeyPreflistItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    partition_ = GOOGLE_LONGLONG(0);
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
    primary_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbBucketKeyPreflistItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbBucketKeyPreflistItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 partition = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &partition_)));
          set_has_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // required bytes node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_primary;
        break;
      }

      // required bool primary = 3;
      case 3: {
        if (tag == 24) {
         parse_primary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primary_)));
          set_has_primary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbBucketKeyPreflistItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbBucketKeyPreflistItem)
  return false;
#undef DO_
}

void RpbBucketKeyPreflistItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbBucketKeyPreflistItem)
  // required int64 partition = 1;
  if (has_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->partition(), output);
  }

  // required bytes node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->node(), output);
  }

  // required bool primary = 3;
  if (has_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->primary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbBucketKeyPreflistItem)
}

::google::protobuf::uint8* RpbBucketKeyPreflistItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbBucketKeyPreflistItem)
  // required int64 partition = 1;
  if (has_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->partition(), target);
  }

  // required bytes node = 2;
  if (has_node()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->node(), target);
  }

  // required bool primary = 3;
  if (has_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->primary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbBucketKeyPreflistItem)
  return target;
}

int RpbBucketKeyPreflistItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 partition = 1;
    if (has_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->partition());
    }

    // required bytes node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node());
    }

    // required bool primary = 3;
    if (has_primary()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbBucketKeyPreflistItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbBucketKeyPreflistItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbBucketKeyPreflistItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbBucketKeyPreflistItem::MergeFrom(const RpbBucketKeyPreflistItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition()) {
      set_partition(from.partition());
    }
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_primary()) {
      set_primary(from.primary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbBucketKeyPreflistItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbBucketKeyPreflistItem::CopyFrom(const RpbBucketKeyPreflistItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbBucketKeyPreflistItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RpbBucketKeyPreflistItem::Swap(RpbBucketKeyPreflistItem* other) {
  if (other != this) {
    std::swap(partition_, other->partition_);
    std::swap(node_, other->node_);
    std::swap(primary_, other->primary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbBucketKeyPreflistItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbBucketKeyPreflistItem_descriptor_;
  metadata.reflection = RpbBucketKeyPreflistItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCoverageReq::kTypeFieldNumber;
const int RpbCoverageReq::kBucketFieldNumber;
const int RpbCoverageReq::kMinPartitionsFieldNumber;
const int RpbCoverageReq::kReplaceCoverFieldNumber;
const int RpbCoverageReq::kUnavailableCoverFieldNumber;
#endif  // !_MSC_VER

RpbCoverageReq::RpbCoverageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCoverageReq)
}

void RpbCoverageReq::InitAsDefaultInstance() {
}

RpbCoverageReq::RpbCoverageReq(const RpbCoverageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCoverageReq)
}

void RpbCoverageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_partitions_ = 0u;
  replace_cover_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCoverageReq::~RpbCoverageReq() {
  // @@protoc_insertion_point(destructor:RpbCoverageReq)
  SharedDtor();
}

void RpbCoverageReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete replace_cover_;
  }
  if (this != default_instance_) {
  }
}

void RpbCoverageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCoverageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCoverageReq_descriptor_;
}

const RpbCoverageReq& RpbCoverageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCoverageReq* RpbCoverageReq::default_instance_ = NULL;

RpbCoverageReq* RpbCoverageReq::New() const {
  return new RpbCoverageReq;
}

void RpbCoverageReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    min_partitions_ = 0u;
    if (has_replace_cover()) {
      if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        replace_cover_->clear();
      }
    }
  }
  unavailable_cover_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCoverageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCoverageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bucket;
        break;
      }

      // required bytes bucket = 2;
      case 2: {
        if (tag == 18) {
         parse_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_partitions;
        break;
      }

      // optional uint32 min_partitions = 3;
      case 3: {
        if (tag == 24) {
         parse_min_partitions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_partitions_)));
          set_has_min_partitions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_replace_cover;
        break;
      }

      // optional bytes replace_cover = 4;
      case 4: {
        if (tag == 34) {
         parse_replace_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replace_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unavailable_cover;
        break;
      }

      // repeated bytes unavailable_cover = 5;
      case 5: {
        if (tag == 42) {
         parse_unavailable_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_unavailable_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unavailable_cover;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCoverageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCoverageReq)
  return false;
#undef DO_
}

void RpbCoverageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCoverageReq)
  // optional bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->type(), output);
  }

  // required bytes bucket = 2;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bucket(), output);
  }

  // optional uint32 min_partitions = 3;
  if (has_min_partitions()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_partitions(), output);
  }

  // optional bytes replace_cover = 4;
  if (has_replace_cover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->replace_cover(), output);
  }

  // repeated bytes unavailable_cover = 5;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->unavailable_cover(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCoverageReq)
}

::google::protobuf::uint8* RpbCoverageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCoverageReq)
  // optional bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  // required bytes bucket = 2;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bucket(), target);
  }

  // optional uint32 min_partitions = 3;
  if (has_min_partitions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_partitions(), target);
  }

  // optional bytes replace_cover = 4;
  if (has_replace_cover()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->replace_cover(), target);
  }

  // repeated bytes unavailable_cover = 5;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->unavailable_cover(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCoverageReq)
  return target;
}

int RpbCoverageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // required bytes bucket = 2;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional uint32 min_partitions = 3;
    if (has_min_partitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_partitions());
    }

    // optional bytes replace_cover = 4;
    if (has_replace_cover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replace_cover());
    }

  }
  // repeated bytes unavailable_cover = 5;
  total_size += 1 * this->unavailable_cover_size();
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->unavailable_cover(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCoverageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCoverageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCoverageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCoverageReq::MergeFrom(const RpbCoverageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  unavailable_cover_.MergeFrom(from.unavailable_cover_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_min_partitions()) {
      set_min_partitions(from.min_partitions());
    }
    if (from.has_replace_cover()) {
      set_replace_cover(from.replace_cover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCoverageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCoverageReq::CopyFrom(const RpbCoverageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCoverageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void RpbCoverageReq::Swap(RpbCoverageReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(bucket_, other->bucket_);
    std::swap(min_partitions_, other->min_partitions_);
    std::swap(replace_cover_, other->replace_cover_);
    unavailable_cover_.Swap(&other->unavailable_cover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCoverageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCoverageReq_descriptor_;
  metadata.reflection = RpbCoverageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCoverageResp::kEntriesFieldNumber;
#endif  // !_MSC_VER

RpbCoverageResp::RpbCoverageResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCoverageResp)
}

void RpbCoverageResp::InitAsDefaultInstance() {
}

RpbCoverageResp::RpbCoverageResp(const RpbCoverageResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCoverageResp)
}

void RpbCoverageResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCoverageResp::~RpbCoverageResp() {
  // @@protoc_insertion_point(destructor:RpbCoverageResp)
  SharedDtor();
}

void RpbCoverageResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbCoverageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCoverageResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCoverageResp_descriptor_;
}

const RpbCoverageResp& RpbCoverageResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCoverageResp* RpbCoverageResp::default_instance_ = NULL;

RpbCoverageResp* RpbCoverageResp::New() const {
  return new RpbCoverageResp;
}

void RpbCoverageResp::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCoverageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCoverageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbCoverageEntry entries = 1;
      case 1: {
        if (tag == 10) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCoverageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCoverageResp)
  return false;
#undef DO_
}

void RpbCoverageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCoverageResp)
  // repeated .RpbCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCoverageResp)
}

::google::protobuf::uint8* RpbCoverageResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCoverageResp)
  // repeated .RpbCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCoverageResp)
  return target;
}

int RpbCoverageResp::ByteSize() const {
  int total_size = 0;

  // repeated .RpbCoverageEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCoverageResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCoverageResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCoverageResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCoverageResp::MergeFrom(const RpbCoverageResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCoverageResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCoverageResp::CopyFrom(const RpbCoverageResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCoverageResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void RpbCoverageResp::Swap(RpbCoverageResp* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCoverageResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCoverageResp_descriptor_;
  metadata.reflection = RpbCoverageResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCoverageEntry::kIpFieldNumber;
const int RpbCoverageEntry::kPortFieldNumber;
const int RpbCoverageEntry::kKeyspaceDescFieldNumber;
const int RpbCoverageEntry::kCoverContextFieldNumber;
#endif  // !_MSC_VER

RpbCoverageEntry::RpbCoverageEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCoverageEntry)
}

void RpbCoverageEntry::InitAsDefaultInstance() {
}

RpbCoverageEntry::RpbCoverageEntry(const RpbCoverageEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCoverageEntry)
}

void RpbCoverageEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  keyspace_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCoverageEntry::~RpbCoverageEntry() {
  // @@protoc_insertion_point(destructor:RpbCoverageEntry)
  SharedDtor();
}

void RpbCoverageEntry::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (keyspace_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete keyspace_desc_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
  }
}

void RpbCoverageEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCoverageEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCoverageEntry_descriptor_;
}

const RpbCoverageEntry& RpbCoverageEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCoverageEntry* RpbCoverageEntry::default_instance_ = NULL;

RpbCoverageEntry* RpbCoverageEntry::New() const {
  return new RpbCoverageEntry;
}

void RpbCoverageEntry::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_keyspace_desc()) {
      if (keyspace_desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        keyspace_desc_->clear();
      }
    }
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCoverageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCoverageEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keyspace_desc;
        break;
      }

      // optional bytes keyspace_desc = 3;
      case 3: {
        if (tag == 26) {
         parse_keyspace_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keyspace_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cover_context;
        break;
      }

      // required bytes cover_context = 4;
      case 4: {
        if (tag == 34) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCoverageEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCoverageEntry)
  return false;
#undef DO_
}

void RpbCoverageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional bytes keyspace_desc = 3;
  if (has_keyspace_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->keyspace_desc(), output);
  }

  // required bytes cover_context = 4;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cover_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCoverageEntry)
}

::google::protobuf::uint8* RpbCoverageEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional bytes keyspace_desc = 3;
  if (has_keyspace_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->keyspace_desc(), target);
  }

  // required bytes cover_context = 4;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cover_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCoverageEntry)
  return target;
}

int RpbCoverageEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bytes keyspace_desc = 3;
    if (has_keyspace_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->keyspace_desc());
    }

    // required bytes cover_context = 4;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCoverageEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCoverageEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCoverageEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCoverageEntry::MergeFrom(const RpbCoverageEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_keyspace_desc()) {
      set_keyspace_desc(from.keyspace_desc());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCoverageEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCoverageEntry::CopyFrom(const RpbCoverageEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCoverageEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void RpbCoverageEntry::Swap(RpbCoverageEntry* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(keyspace_desc_, other->keyspace_desc_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCoverageEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCoverageEntry_descriptor_;
  metadata.reflection = RpbCoverageEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbErrorResp::kErrmsgFieldNumber;
const int RpbErrorResp::kErrcodeFieldNumber;
#endif  // !_MSC_VER

RpbErrorResp::RpbErrorResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbErrorResp)
}

void RpbErrorResp::InitAsDefaultInstance() {
}

RpbErrorResp::RpbErrorResp(const RpbErrorResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbErrorResp)
}

void RpbErrorResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbErrorResp::~RpbErrorResp() {
  // @@protoc_insertion_point(destructor:RpbErrorResp)
  SharedDtor();
}

void RpbErrorResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void RpbErrorResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbErrorResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbErrorResp_descriptor_;
}

const RpbErrorResp& RpbErrorResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbErrorResp* RpbErrorResp::default_instance_ = NULL;

RpbErrorResp* RpbErrorResp::New() const {
  return new RpbErrorResp;
}

void RpbErrorResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbErrorResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbErrorResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes errmsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }

      // required uint32 errcode = 2;
      case 2: {
        if (tag == 16) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbErrorResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbErrorResp)
  return false;
#undef DO_
}

void RpbErrorResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbErrorResp)
  // required bytes errmsg = 1;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->errmsg(), output);
  }

  // required uint32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbErrorResp)
}

::google::protobuf::uint8* RpbErrorResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbErrorResp)
  // required bytes errmsg = 1;
  if (has_errmsg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->errmsg(), target);
  }

  // required uint32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbErrorResp)
  return target;
}

int RpbErrorResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes errmsg = 1;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errmsg());
    }

    // required uint32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbErrorResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbErrorResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbErrorResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbErrorResp::MergeFrom(const RpbErrorResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbErrorResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbErrorResp::CopyFrom(const RpbErrorResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbErrorResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbErrorResp::Swap(RpbErrorResp* other) {
  if (other != this) {
    std::swap(errmsg_, other->errmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbErrorResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbErrorResp_descriptor_;
  metadata.reflection = RpbErrorResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetServerInfoResp::kNodeFieldNumber;
const int RpbGetServerInfoResp::kServerVersionFieldNumber;
#endif  // !_MSC_VER

RpbGetServerInfoResp::RpbGetServerInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetServerInfoResp)
}

void RpbGetServerInfoResp::InitAsDefaultInstance() {
}

RpbGetServerInfoResp::RpbGetServerInfoResp(const RpbGetServerInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetServerInfoResp)
}

void RpbGetServerInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetServerInfoResp::~RpbGetServerInfoResp() {
  // @@protoc_insertion_point(destructor:RpbGetServerInfoResp)
  SharedDtor();
}

void RpbGetServerInfoResp::SharedDtor() {
  if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_;
  }
  if (server_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_version_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetServerInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetServerInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetServerInfoResp_descriptor_;
}

const RpbGetServerInfoResp& RpbGetServerInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetServerInfoResp* RpbGetServerInfoResp::default_instance_ = NULL;

RpbGetServerInfoResp* RpbGetServerInfoResp::New() const {
  return new RpbGetServerInfoResp;
}

void RpbGetServerInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_->clear();
      }
    }
    if (has_server_version()) {
      if (server_version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetServerInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetServerInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_version;
        break;
      }

      // optional bytes server_version = 2;
      case 2: {
        if (tag == 18) {
         parse_server_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetServerInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetServerInfoResp)
  return false;
#undef DO_
}

void RpbGetServerInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetServerInfoResp)
  // optional bytes node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->node(), output);
  }

  // optional bytes server_version = 2;
  if (has_server_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->server_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetServerInfoResp)
}

::google::protobuf::uint8* RpbGetServerInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetServerInfoResp)
  // optional bytes node = 1;
  if (has_node()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node(), target);
  }

  // optional bytes server_version = 2;
  if (has_server_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->server_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetServerInfoResp)
  return target;
}

int RpbGetServerInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node());
    }

    // optional bytes server_version = 2;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetServerInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetServerInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetServerInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetServerInfoResp::MergeFrom(const RpbGetServerInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_server_version()) {
      set_server_version(from.server_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetServerInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetServerInfoResp::CopyFrom(const RpbGetServerInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetServerInfoResp::IsInitialized() const {

  return true;
}

void RpbGetServerInfoResp::Swap(RpbGetServerInfoResp* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(server_version_, other->server_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetServerInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetServerInfoResp_descriptor_;
  metadata.reflection = RpbGetServerInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbPair::kKeyFieldNumber;
const int RpbPair::kValueFieldNumber;
#endif  // !_MSC_VER

RpbPair::RpbPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbPair)
}

void RpbPair::InitAsDefaultInstance() {
}

RpbPair::RpbPair(const RpbPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbPair)
}

void RpbPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPair::~RpbPair() {
  // @@protoc_insertion_point(destructor:RpbPair)
  SharedDtor();
}

void RpbPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RpbPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPair_descriptor_;
}

const RpbPair& RpbPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbPair* RpbPair::default_instance_ = NULL;

RpbPair* RpbPair::New() const {
  return new RpbPair;
}

void RpbPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbPair)
  return false;
#undef DO_
}

void RpbPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbPair)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbPair)
}

::google::protobuf::uint8* RpbPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbPair)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbPair)
  return target;
}

int RpbPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPair::MergeFrom(const RpbPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPair::CopyFrom(const RpbPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbPair::Swap(RpbPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPair_descriptor_;
  metadata.reflection = RpbPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketReq::kBucketFieldNumber;
const int RpbGetBucketReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketReq::RpbGetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketReq)
}

void RpbGetBucketReq::InitAsDefaultInstance() {
}

RpbGetBucketReq::RpbGetBucketReq(const RpbGetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketReq)
}

void RpbGetBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketReq::~RpbGetBucketReq() {
  // @@protoc_insertion_point(destructor:RpbGetBucketReq)
  SharedDtor();
}

void RpbGetBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketReq_descriptor_;
}

const RpbGetBucketReq& RpbGetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketReq* RpbGetBucketReq::default_instance_ = NULL;

RpbGetBucketReq* RpbGetBucketReq::New() const {
  return new RpbGetBucketReq;
}

void RpbGetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional bytes type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketReq)
  return false;
#undef DO_
}

void RpbGetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketReq)
}

::google::protobuf::uint8* RpbGetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes type = 2;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketReq)
  return target;
}

int RpbGetBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketReq::MergeFrom(const RpbGetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketReq::CopyFrom(const RpbGetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbGetBucketReq::Swap(RpbGetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketReq_descriptor_;
  metadata.reflection = RpbGetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketResp::kPropsFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketResp::RpbGetBucketResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketResp)
}

void RpbGetBucketResp::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbGetBucketResp::RpbGetBucketResp(const RpbGetBucketResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketResp)
}

void RpbGetBucketResp::SharedCtor() {
  _cached_size_ = 0;
  props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketResp::~RpbGetBucketResp() {
  // @@protoc_insertion_point(destructor:RpbGetBucketResp)
  SharedDtor();
}

void RpbGetBucketResp::SharedDtor() {
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbGetBucketResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketResp_descriptor_;
}

const RpbGetBucketResp& RpbGetBucketResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketResp* RpbGetBucketResp::default_instance_ = NULL;

RpbGetBucketResp* RpbGetBucketResp::New() const {
  return new RpbGetBucketResp;
}

void RpbGetBucketResp::Clear() {
  if (has_props()) {
    if (props_ != NULL) props_->::RpbBucketProps::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RpbBucketProps props = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketResp)
  return false;
#undef DO_
}

void RpbGetBucketResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketResp)
  // required .RpbBucketProps props = 1;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->props(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketResp)
}

::google::protobuf::uint8* RpbGetBucketResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketResp)
  // required .RpbBucketProps props = 1;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->props(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketResp)
  return target;
}

int RpbGetBucketResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RpbBucketProps props = 1;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketResp::MergeFrom(const RpbGetBucketResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_props()) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketResp::CopyFrom(const RpbGetBucketResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void RpbGetBucketResp::Swap(RpbGetBucketResp* other) {
  if (other != this) {
    std::swap(props_, other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketResp_descriptor_;
  metadata.reflection = RpbGetBucketResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSetBucketReq::kBucketFieldNumber;
const int RpbSetBucketReq::kPropsFieldNumber;
const int RpbSetBucketReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbSetBucketReq::RpbSetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSetBucketReq)
}

void RpbSetBucketReq::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbSetBucketReq::RpbSetBucketReq(const RpbSetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSetBucketReq)
}

void RpbSetBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  props_ = NULL;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetBucketReq::~RpbSetBucketReq() {
  // @@protoc_insertion_point(destructor:RpbSetBucketReq)
  SharedDtor();
}

void RpbSetBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbSetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetBucketReq_descriptor_;
}

const RpbSetBucketReq& RpbSetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSetBucketReq* RpbSetBucketReq::default_instance_ = NULL;

RpbSetBucketReq* RpbSetBucketReq::New() const {
  return new RpbSetBucketReq;
}

void RpbSetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_props()) {
      if (props_ != NULL) props_->::RpbBucketProps::Clear();
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSetBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }

      // required .RpbBucketProps props = 2;
      case 2: {
        if (tag == 18) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional bytes type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSetBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSetBucketReq)
  return false;
#undef DO_
}

void RpbSetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(), output);
  }

  // optional bytes type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSetBucketReq)
}

::google::protobuf::uint8* RpbSetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(), target);
  }

  // optional bytes type = 3;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSetBucketReq)
  return target;
}

int RpbSetBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // required .RpbBucketProps props = 2;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

    // optional bytes type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetBucketReq::MergeFrom(const RpbSetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_props()) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetBucketReq::CopyFrom(const RpbSetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void RpbSetBucketReq::Swap(RpbSetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(props_, other->props_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetBucketReq_descriptor_;
  metadata.reflection = RpbSetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbResetBucketReq::kBucketFieldNumber;
const int RpbResetBucketReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbResetBucketReq::RpbResetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbResetBucketReq)
}

void RpbResetBucketReq::InitAsDefaultInstance() {
}

RpbResetBucketReq::RpbResetBucketReq(const RpbResetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbResetBucketReq)
}

void RpbResetBucketReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbResetBucketReq::~RpbResetBucketReq() {
  // @@protoc_insertion_point(destructor:RpbResetBucketReq)
  SharedDtor();
}

void RpbResetBucketReq::SharedDtor() {
  if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bucket_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbResetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbResetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbResetBucketReq_descriptor_;
}

const RpbResetBucketReq& RpbResetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbResetBucketReq* RpbResetBucketReq::default_instance_ = NULL;

RpbResetBucketReq* RpbResetBucketReq::New() const {
  return new RpbResetBucketReq;
}

void RpbResetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_bucket()) {
      if (bucket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bucket_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbResetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbResetBucketReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional bytes type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbResetBucketReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbResetBucketReq)
  return false;
#undef DO_
}

void RpbResetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbResetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bucket(), output);
  }

  // optional bytes type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbResetBucketReq)
}

::google::protobuf::uint8* RpbResetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbResetBucketReq)
  // required bytes bucket = 1;
  if (has_bucket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }

  // optional bytes type = 2;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbResetBucketReq)
  return target;
}

int RpbResetBucketReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }

    // optional bytes type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbResetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbResetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbResetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbResetBucketReq::MergeFrom(const RpbResetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bucket()) {
      set_bucket(from.bucket());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbResetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbResetBucketReq::CopyFrom(const RpbResetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbResetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbResetBucketReq::Swap(RpbResetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbResetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbResetBucketReq_descriptor_;
  metadata.reflection = RpbResetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketTypeReq::kTypeFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketTypeReq::RpbGetBucketTypeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbGetBucketTypeReq)
}

void RpbGetBucketTypeReq::InitAsDefaultInstance() {
}

RpbGetBucketTypeReq::RpbGetBucketTypeReq(const RpbGetBucketTypeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbGetBucketTypeReq)
}

void RpbGetBucketTypeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketTypeReq::~RpbGetBucketTypeReq() {
  // @@protoc_insertion_point(destructor:RpbGetBucketTypeReq)
  SharedDtor();
}

void RpbGetBucketTypeReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetBucketTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketTypeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketTypeReq_descriptor_;
}

const RpbGetBucketTypeReq& RpbGetBucketTypeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbGetBucketTypeReq* RpbGetBucketTypeReq::default_instance_ = NULL;

RpbGetBucketTypeReq* RpbGetBucketTypeReq::New() const {
  return new RpbGetBucketTypeReq;
}

void RpbGetBucketTypeReq::Clear() {
  if (has_type()) {
    if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      type_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbGetBucketTypeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbGetBucketTypeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbGetBucketTypeReq)
  return false;
#undef DO_
}

void RpbGetBucketTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbGetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbGetBucketTypeReq)
}

::google::protobuf::uint8* RpbGetBucketTypeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbGetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbGetBucketTypeReq)
  return target;
}

int RpbGetBucketTypeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketTypeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketTypeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketTypeReq::MergeFrom(const RpbGetBucketTypeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketTypeReq::CopyFrom(const RpbGetBucketTypeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketTypeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbGetBucketTypeReq::Swap(RpbGetBucketTypeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketTypeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketTypeReq_descriptor_;
  metadata.reflection = RpbGetBucketTypeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSetBucketTypeReq::kTypeFieldNumber;
const int RpbSetBucketTypeReq::kPropsFieldNumber;
#endif  // !_MSC_VER

RpbSetBucketTypeReq::RpbSetBucketTypeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSetBucketTypeReq)
}

void RpbSetBucketTypeReq::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbSetBucketTypeReq::RpbSetBucketTypeReq(const RpbSetBucketTypeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSetBucketTypeReq)
}

void RpbSetBucketTypeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetBucketTypeReq::~RpbSetBucketTypeReq() {
  // @@protoc_insertion_point(destructor:RpbSetBucketTypeReq)
  SharedDtor();
}

void RpbSetBucketTypeReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbSetBucketTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetBucketTypeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetBucketTypeReq_descriptor_;
}

const RpbSetBucketTypeReq& RpbSetBucketTypeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSetBucketTypeReq* RpbSetBucketTypeReq::default_instance_ = NULL;

RpbSetBucketTypeReq* RpbSetBucketTypeReq::New() const {
  return new RpbSetBucketTypeReq;
}

void RpbSetBucketTypeReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_props()) {
      if (props_ != NULL) props_->::RpbBucketProps::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetBucketTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSetBucketTypeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }

      // required .RpbBucketProps props = 2;
      case 2: {
        if (tag == 18) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSetBucketTypeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSetBucketTypeReq)
  return false;
#undef DO_
}

void RpbSetBucketTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->type(), output);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSetBucketTypeReq)
}

::google::protobuf::uint8* RpbSetBucketTypeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSetBucketTypeReq)
  // required bytes type = 1;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->type(), target);
  }

  // required .RpbBucketProps props = 2;
  if (has_props()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSetBucketTypeReq)
  return target;
}

int RpbSetBucketTypeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // required .RpbBucketProps props = 2;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetBucketTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetBucketTypeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetBucketTypeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetBucketTypeReq::MergeFrom(const RpbSetBucketTypeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_props()) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetBucketTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetBucketTypeReq::CopyFrom(const RpbSetBucketTypeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetBucketTypeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_props()) {
    if (!this->props().IsInitialized()) return false;
  }
  return true;
}

void RpbSetBucketTypeReq::Swap(RpbSetBucketTypeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(props_, other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetBucketTypeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetBucketTypeReq_descriptor_;
  metadata.reflection = RpbSetBucketTypeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbModFun::kModuleFieldNumber;
const int RpbModFun::kFunctionFieldNumber;
#endif  // !_MSC_VER

RpbModFun::RpbModFun()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbModFun)
}

void RpbModFun::InitAsDefaultInstance() {
}

RpbModFun::RpbModFun(const RpbModFun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbModFun)
}

void RpbModFun::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbModFun::~RpbModFun() {
  // @@protoc_insertion_point(destructor:RpbModFun)
  SharedDtor();
}

void RpbModFun::SharedDtor() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (this != default_instance_) {
  }
}

void RpbModFun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbModFun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbModFun_descriptor_;
}

const RpbModFun& RpbModFun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbModFun* RpbModFun::default_instance_ = NULL;

RpbModFun* RpbModFun::New() const {
  return new RpbModFun;
}

void RpbModFun::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbModFun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbModFun)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_function;
        break;
      }

      // required bytes function = 2;
      case 2: {
        if (tag == 18) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_function()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbModFun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbModFun)
  return false;
#undef DO_
}

void RpbModFun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbModFun)
  // required bytes module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->module(), output);
  }

  // required bytes function = 2;
  if (has_function()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->function(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbModFun)
}

::google::protobuf::uint8* RpbModFun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbModFun)
  // required bytes module = 1;
  if (has_module()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->module(), target);
  }

  // required bytes function = 2;
  if (has_function()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->function(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbModFun)
  return target;
}

int RpbModFun::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->module());
    }

    // required bytes function = 2;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->function());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbModFun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbModFun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbModFun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbModFun::MergeFrom(const RpbModFun& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbModFun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbModFun::CopyFrom(const RpbModFun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbModFun::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbModFun::Swap(RpbModFun* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(function_, other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbModFun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbModFun_descriptor_;
  metadata.reflection = RpbModFun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbCommitHook::kModfunFieldNumber;
const int RpbCommitHook::kNameFieldNumber;
#endif  // !_MSC_VER

RpbCommitHook::RpbCommitHook()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbCommitHook)
}

void RpbCommitHook::InitAsDefaultInstance() {
  modfun_ = const_cast< ::RpbModFun*>(&::RpbModFun::default_instance());
}

RpbCommitHook::RpbCommitHook(const RpbCommitHook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbCommitHook)
}

void RpbCommitHook::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  modfun_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbCommitHook::~RpbCommitHook() {
  // @@protoc_insertion_point(destructor:RpbCommitHook)
  SharedDtor();
}

void RpbCommitHook::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete modfun_;
  }
}

void RpbCommitHook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbCommitHook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbCommitHook_descriptor_;
}

const RpbCommitHook& RpbCommitHook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbCommitHook* RpbCommitHook::default_instance_ = NULL;

RpbCommitHook* RpbCommitHook::New() const {
  return new RpbCommitHook;
}

void RpbCommitHook::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_modfun()) {
      if (modfun_ != NULL) modfun_->::RpbModFun::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbCommitHook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbCommitHook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RpbModFun modfun = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modfun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbCommitHook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbCommitHook)
  return false;
#undef DO_
}

void RpbCommitHook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbCommitHook)
  // optional .RpbModFun modfun = 1;
  if (has_modfun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->modfun(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbCommitHook)
}

::google::protobuf::uint8* RpbCommitHook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbCommitHook)
  // optional .RpbModFun modfun = 1;
  if (has_modfun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->modfun(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbCommitHook)
  return target;
}

int RpbCommitHook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RpbModFun modfun = 1;
    if (has_modfun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modfun());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbCommitHook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbCommitHook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbCommitHook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbCommitHook::MergeFrom(const RpbCommitHook& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modfun()) {
      mutable_modfun()->::RpbModFun::MergeFrom(from.modfun());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbCommitHook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbCommitHook::CopyFrom(const RpbCommitHook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbCommitHook::IsInitialized() const {

  if (has_modfun()) {
    if (!this->modfun().IsInitialized()) return false;
  }
  return true;
}

void RpbCommitHook::Swap(RpbCommitHook* other) {
  if (other != this) {
    std::swap(modfun_, other->modfun_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbCommitHook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbCommitHook_descriptor_;
  metadata.reflection = RpbCommitHook_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RpbBucketProps_RpbReplMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbBucketProps_RpbReplMode_descriptor_;
}
bool RpbBucketProps_RpbReplMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpbBucketProps_RpbReplMode RpbBucketProps::FALSE;
const RpbBucketProps_RpbReplMode RpbBucketProps::REALTIME;
const RpbBucketProps_RpbReplMode RpbBucketProps::FULLSYNC;
const RpbBucketProps_RpbReplMode RpbBucketProps::TRUE;
const RpbBucketProps_RpbReplMode RpbBucketProps::RpbReplMode_MIN;
const RpbBucketProps_RpbReplMode RpbBucketProps::RpbReplMode_MAX;
const int RpbBucketProps::RpbReplMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpbBucketProps::kNValFieldNumber;
const int RpbBucketProps::kAllowMultFieldNumber;
const int RpbBucketProps::kLastWriteWinsFieldNumber;
const int RpbBucketProps::kPrecommitFieldNumber;
const int RpbBucketProps::kHasPrecommitFieldNumber;
const int RpbBucketProps::kPostcommitFieldNumber;
const int RpbBucketProps::kHasPostcommitFieldNumber;
const int RpbBucketProps::kChashKeyfunFieldNumber;
const int RpbBucketProps::kLinkfunFieldNumber;
const int RpbBucketProps::kOldVclockFieldNumber;
const int RpbBucketProps::kYoungVclockFieldNumber;
const int RpbBucketProps::kBigVclockFieldNumber;
const int RpbBucketProps::kSmallVclockFieldNumber;
const int RpbBucketProps::kPrFieldNumber;
const int RpbBucketProps::kRFieldNumber;
const int RpbBucketProps::kWFieldNumber;
const int RpbBucketProps::kPwFieldNumber;
const int RpbBucketProps::kDwFieldNumber;
const int RpbBucketProps::kRwFieldNumber;
const int RpbBucketProps::kBasicQuorumFieldNumber;
const int RpbBucketProps::kNotfoundOkFieldNumber;
const int RpbBucketProps::kBackendFieldNumber;
const int RpbBucketProps::kSearchFieldNumber;
const int RpbBucketProps::kReplFieldNumber;
const int RpbBucketProps::kSearchIndexFieldNumber;
const int RpbBucketProps::kDatatypeFieldNumber;
const int RpbBucketProps::kConsistentFieldNumber;
const int RpbBucketProps::kWriteOnceFieldNumber;
#endif  // !_MSC_VER

RpbBucketProps::RpbBucketProps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbBucketProps)
}

void RpbBucketProps::InitAsDefaultInstance() {
  chash_keyfun_ = const_cast< ::RpbModFun*>(&::RpbModFun::default_instance());
  linkfun_ = const_cast< ::RpbModFun*>(&::RpbModFun::default_instance());
}

RpbBucketProps::RpbBucketProps(const RpbBucketProps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbBucketProps)
}

void RpbBucketProps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  n_val_ = 0u;
  allow_mult_ = false;
  last_write_wins_ = false;
  has_precommit_ = false;
  has_postcommit_ = false;
  chash_keyfun_ = NULL;
  linkfun_ = NULL;
  old_vclock_ = 0u;
  young_vclock_ = 0u;
  big_vclock_ = 0u;
  small_vclock_ = 0u;
  pr_ = 0u;
  r_ = 0u;
  w_ = 0u;
  pw_ = 0u;
  dw_ = 0u;
  rw_ = 0u;
  basic_quorum_ = false;
  notfound_ok_ = false;
  backend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  search_ = false;
  repl_ = 0;
  search_index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datatype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consistent_ = false;
  write_once_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbBucketProps::~RpbBucketProps() {
  // @@protoc_insertion_point(destructor:RpbBucketProps)
  SharedDtor();
}

void RpbBucketProps::SharedDtor() {
  if (backend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backend_;
  }
  if (search_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete search_index_;
  }
  if (datatype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete datatype_;
  }
  if (this != default_instance_) {
    delete chash_keyfun_;
    delete linkfun_;
  }
}

void RpbBucketProps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbBucketProps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbBucketProps_descriptor_;
}

const RpbBucketProps& RpbBucketProps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbBucketProps* RpbBucketProps::default_instance_ = NULL;

RpbBucketProps* RpbBucketProps::New() const {
  return new RpbBucketProps;
}

void RpbBucketProps::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbBucketProps*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 215) {
    ZR_(n_val_, has_postcommit_);
    if (has_chash_keyfun()) {
      if (chash_keyfun_ != NULL) chash_keyfun_->::RpbModFun::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(old_vclock_, w_);
    if (has_linkfun()) {
      if (linkfun_ != NULL) linkfun_->::RpbModFun::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(pw_, rw_);
    ZR_(basic_quorum_, search_);
    if (has_backend()) {
      if (backend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backend_->clear();
      }
    }
    repl_ = 0;
  }
  if (_has_bits_[24 / 32] & 251658240) {
    if (has_search_index()) {
      if (search_index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        search_index_->clear();
      }
    }
    if (has_datatype()) {
      if (datatype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        datatype_->clear();
      }
    }
    consistent_ = false;
    write_once_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  precommit_.Clear();
  postcommit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbBucketProps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbBucketProps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 n_val = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_allow_mult;
        break;
      }

      // optional bool allow_mult = 2;
      case 2: {
        if (tag == 16) {
         parse_allow_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_mult_)));
          set_has_allow_mult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_write_wins;
        break;
      }

      // optional bool last_write_wins = 3;
      case 3: {
        if (tag == 24) {
         parse_last_write_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_write_wins_)));
          set_has_last_write_wins();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_precommit;
        break;
      }

      // repeated .RpbCommitHook precommit = 4;
      case 4: {
        if (tag == 34) {
         parse_precommit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_precommit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_precommit;
        if (input->ExpectTag(40)) goto parse_has_precommit;
        break;
      }

      // optional bool has_precommit = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_has_precommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_precommit_)));
          set_has_has_precommit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_postcommit;
        break;
      }

      // repeated .RpbCommitHook postcommit = 6;
      case 6: {
        if (tag == 50) {
         parse_postcommit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_postcommit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_postcommit;
        if (input->ExpectTag(56)) goto parse_has_postcommit;
        break;
      }

      // optional bool has_postcommit = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_has_postcommit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_postcommit_)));
          set_has_has_postcommit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_chash_keyfun;
        break;
      }

      // optional .RpbModFun chash_keyfun = 8;
      case 8: {
        if (tag == 66) {
         parse_chash_keyfun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chash_keyfun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_linkfun;
        break;
      }

      // optional .RpbModFun linkfun = 9;
      case 9: {
        if (tag == 74) {
         parse_linkfun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linkfun()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_old_vclock;
        break;
      }

      // optional uint32 old_vclock = 10;
      case 10: {
        if (tag == 80) {
         parse_old_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_vclock_)));
          set_has_old_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_young_vclock;
        break;
      }

      // optional uint32 young_vclock = 11;
      case 11: {
        if (tag == 88) {
         parse_young_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &young_vclock_)));
          set_has_young_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_big_vclock;
        break;
      }

      // optional uint32 big_vclock = 12;
      case 12: {
        if (tag == 96) {
         parse_big_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &big_vclock_)));
          set_has_big_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_small_vclock;
        break;
      }

      // optional uint32 small_vclock = 13;
      case 13: {
        if (tag == 104) {
         parse_small_vclock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &small_vclock_)));
          set_has_small_vclock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_pr;
        break;
      }

      // optional uint32 pr = 14;
      case 14: {
        if (tag == 112) {
         parse_pr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pr_)));
          set_has_pr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_r;
        break;
      }

      // optional uint32 r = 15;
      case 15: {
        if (tag == 120) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_w;
        break;
      }

      // optional uint32 w = 16;
      case 16: {
        if (tag == 128) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_pw;
        break;
      }

      // optional uint32 pw = 17;
      case 17: {
        if (tag == 136) {
         parse_pw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pw_)));
          set_has_pw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_dw;
        break;
      }

      // optional uint32 dw = 18;
      case 18: {
        if (tag == 144) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          set_has_dw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_rw;
        break;
      }

      // optional uint32 rw = 19;
      case 19: {
        if (tag == 152) {
         parse_rw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rw_)));
          set_has_rw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_basic_quorum;
        break;
      }

      // optional bool basic_quorum = 20;
      case 20: {
        if (tag == 160) {
         parse_basic_quorum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basic_quorum_)));
          set_has_basic_quorum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_notfound_ok;
        break;
      }

      // optional bool notfound_ok = 21;
      case 21: {
        if (tag == 168) {
         parse_notfound_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notfound_ok_)));
          set_has_notfound_ok();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_backend;
        break;
      }

      // optional bytes backend = 22;
      case 22: {
        if (tag == 178) {
         parse_backend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_backend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_search;
        break;
      }

      // optional bool search = 23;
      case 23: {
        if (tag == 184) {
         parse_search:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &search_)));
          set_has_search();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_repl;
        break;
      }

      // optional .RpbBucketProps.RpbReplMode repl = 24;
      case 24: {
        if (tag == 192) {
         parse_repl:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RpbBucketProps_RpbReplMode_IsValid(value)) {
            set_repl(static_cast< ::RpbBucketProps_RpbReplMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_search_index;
        break;
      }

      // optional bytes search_index = 25;
      case 25: {
        if (tag == 202) {
         parse_search_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_search_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_datatype;
        break;
      }

      // optional bytes datatype = 26;
      case 26: {
        if (tag == 210) {
         parse_datatype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datatype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_consistent;
        break;
      }

      // optional bool consistent = 27;
      case 27: {
        if (tag == 216) {
         parse_consistent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consistent_)));
          set_has_consistent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_write_once;
        break;
      }

      // optional bool write_once = 28;
      case 28: {
        if (tag == 224) {
         parse_write_once:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &write_once_)));
          set_has_write_once();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbBucketProps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbBucketProps)
  return false;
#undef DO_
}

void RpbBucketProps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbBucketProps)
  // optional uint32 n_val = 1;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n_val(), output);
  }

  // optional bool allow_mult = 2;
  if (has_allow_mult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_mult(), output);
  }

  // optional bool last_write_wins = 3;
  if (has_last_write_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->last_write_wins(), output);
  }

  // repeated .RpbCommitHook precommit = 4;
  for (int i = 0; i < this->precommit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->precommit(i), output);
  }

  // optional bool has_precommit = 5 [default = false];
  if (has_has_precommit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_precommit(), output);
  }

  // repeated .RpbCommitHook postcommit = 6;
  for (int i = 0; i < this->postcommit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->postcommit(i), output);
  }

  // optional bool has_postcommit = 7 [default = false];
  if (has_has_postcommit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_postcommit(), output);
  }

  // optional .RpbModFun chash_keyfun = 8;
  if (has_chash_keyfun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chash_keyfun(), output);
  }

  // optional .RpbModFun linkfun = 9;
  if (has_linkfun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->linkfun(), output);
  }

  // optional uint32 old_vclock = 10;
  if (has_old_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->old_vclock(), output);
  }

  // optional uint32 young_vclock = 11;
  if (has_young_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->young_vclock(), output);
  }

  // optional uint32 big_vclock = 12;
  if (has_big_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->big_vclock(), output);
  }

  // optional uint32 small_vclock = 13;
  if (has_small_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->small_vclock(), output);
  }

  // optional uint32 pr = 14;
  if (has_pr()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->pr(), output);
  }

  // optional uint32 r = 15;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->r(), output);
  }

  // optional uint32 w = 16;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->w(), output);
  }

  // optional uint32 pw = 17;
  if (has_pw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->pw(), output);
  }

  // optional uint32 dw = 18;
  if (has_dw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dw(), output);
  }

  // optional uint32 rw = 19;
  if (has_rw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->rw(), output);
  }

  // optional bool basic_quorum = 20;
  if (has_basic_quorum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->basic_quorum(), output);
  }

  // optional bool notfound_ok = 21;
  if (has_notfound_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->notfound_ok(), output);
  }

  // optional bytes backend = 22;
  if (has_backend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->backend(), output);
  }

  // optional bool search = 23;
  if (has_search()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->search(), output);
  }

  // optional .RpbBucketProps.RpbReplMode repl = 24;
  if (has_repl()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->repl(), output);
  }

  // optional bytes search_index = 25;
  if (has_search_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      25, this->search_index(), output);
  }

  // optional bytes datatype = 26;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      26, this->datatype(), output);
  }

  // optional bool consistent = 27;
  if (has_consistent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->consistent(), output);
  }

  // optional bool write_once = 28;
  if (has_write_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->write_once(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbBucketProps)
}

::google::protobuf::uint8* RpbBucketProps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbBucketProps)
  // optional uint32 n_val = 1;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n_val(), target);
  }

  // optional bool allow_mult = 2;
  if (has_allow_mult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_mult(), target);
  }

  // optional bool last_write_wins = 3;
  if (has_last_write_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->last_write_wins(), target);
  }

  // repeated .RpbCommitHook precommit = 4;
  for (int i = 0; i < this->precommit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->precommit(i), target);
  }

  // optional bool has_precommit = 5 [default = false];
  if (has_has_precommit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_precommit(), target);
  }

  // repeated .RpbCommitHook postcommit = 6;
  for (int i = 0; i < this->postcommit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->postcommit(i), target);
  }

  // optional bool has_postcommit = 7 [default = false];
  if (has_has_postcommit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_postcommit(), target);
  }

  // optional .RpbModFun chash_keyfun = 8;
  if (has_chash_keyfun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chash_keyfun(), target);
  }

  // optional .RpbModFun linkfun = 9;
  if (has_linkfun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->linkfun(), target);
  }

  // optional uint32 old_vclock = 10;
  if (has_old_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->old_vclock(), target);
  }

  // optional uint32 young_vclock = 11;
  if (has_young_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->young_vclock(), target);
  }

  // optional uint32 big_vclock = 12;
  if (has_big_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->big_vclock(), target);
  }

  // optional uint32 small_vclock = 13;
  if (has_small_vclock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->small_vclock(), target);
  }

  // optional uint32 pr = 14;
  if (has_pr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->pr(), target);
  }

  // optional uint32 r = 15;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->r(), target);
  }

  // optional uint32 w = 16;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->w(), target);
  }

  // optional uint32 pw = 17;
  if (has_pw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->pw(), target);
  }

  // optional uint32 dw = 18;
  if (has_dw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->dw(), target);
  }

  // optional uint32 rw = 19;
  if (has_rw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->rw(), target);
  }

  // optional bool basic_quorum = 20;
  if (has_basic_quorum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->basic_quorum(), target);
  }

  // optional bool notfound_ok = 21;
  if (has_notfound_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->notfound_ok(), target);
  }

  // optional bytes backend = 22;
  if (has_backend()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->backend(), target);
  }

  // optional bool search = 23;
  if (has_search()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->search(), target);
  }

  // optional .RpbBucketProps.RpbReplMode repl = 24;
  if (has_repl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->repl(), target);
  }

  // optional bytes search_index = 25;
  if (has_search_index()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        25, this->search_index(), target);
  }

  // optional bytes datatype = 26;
  if (has_datatype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        26, this->datatype(), target);
  }

  // optional bool consistent = 27;
  if (has_consistent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->consistent(), target);
  }

  // optional bool write_once = 28;
  if (has_write_once()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->write_once(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbBucketProps)
  return target;
}

int RpbBucketProps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 n_val = 1;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

    // optional bool allow_mult = 2;
    if (has_allow_mult()) {
      total_size += 1 + 1;
    }

    // optional bool last_write_wins = 3;
    if (has_last_write_wins()) {
      total_size += 1 + 1;
    }

    // optional bool has_precommit = 5 [default = false];
    if (has_has_precommit()) {
      total_size += 1 + 1;
    }

    // optional bool has_postcommit = 7 [default = false];
    if (has_has_postcommit()) {
      total_size += 1 + 1;
    }

    // optional .RpbModFun chash_keyfun = 8;
    if (has_chash_keyfun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chash_keyfun());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .RpbModFun linkfun = 9;
    if (has_linkfun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linkfun());
    }

    // optional uint32 old_vclock = 10;
    if (has_old_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_vclock());
    }

    // optional uint32 young_vclock = 11;
    if (has_young_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->young_vclock());
    }

    // optional uint32 big_vclock = 12;
    if (has_big_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->big_vclock());
    }

    // optional uint32 small_vclock = 13;
    if (has_small_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->small_vclock());
    }

    // optional uint32 pr = 14;
    if (has_pr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pr());
    }

    // optional uint32 r = 15;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 w = 16;
    if (has_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 pw = 17;
    if (has_pw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pw());
    }

    // optional uint32 dw = 18;
    if (has_dw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }

    // optional uint32 rw = 19;
    if (has_rw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rw());
    }

    // optional bool basic_quorum = 20;
    if (has_basic_quorum()) {
      total_size += 2 + 1;
    }

    // optional bool notfound_ok = 21;
    if (has_notfound_ok()) {
      total_size += 2 + 1;
    }

    // optional bytes backend = 22;
    if (has_backend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->backend());
    }

    // optional bool search = 23;
    if (has_search()) {
      total_size += 2 + 1;
    }

    // optional .RpbBucketProps.RpbReplMode repl = 24;
    if (has_repl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->repl());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bytes search_index = 25;
    if (has_search_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->search_index());
    }

    // optional bytes datatype = 26;
    if (has_datatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datatype());
    }

    // optional bool consistent = 27;
    if (has_consistent()) {
      total_size += 2 + 1;
    }

    // optional bool write_once = 28;
    if (has_write_once()) {
      total_size += 2 + 1;
    }

  }
  // repeated .RpbCommitHook precommit = 4;
  total_size += 1 * this->precommit_size();
  for (int i = 0; i < this->precommit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->precommit(i));
  }

  // repeated .RpbCommitHook postcommit = 6;
  total_size += 1 * this->postcommit_size();
  for (int i = 0; i < this->postcommit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->postcommit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbBucketProps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbBucketProps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbBucketProps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbBucketProps::MergeFrom(const RpbBucketProps& from) {
  GOOGLE_CHECK_NE(&from, this);
  precommit_.MergeFrom(from.precommit_);
  postcommit_.MergeFrom(from.postcommit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
    if (from.has_allow_mult()) {
      set_allow_mult(from.allow_mult());
    }
    if (from.has_last_write_wins()) {
      set_last_write_wins(from.last_write_wins());
    }
    if (from.has_has_precommit()) {
      set_has_precommit(from.has_precommit());
    }
    if (from.has_has_postcommit()) {
      set_has_postcommit(from.has_postcommit());
    }
    if (from.has_chash_keyfun()) {
      mutable_chash_keyfun()->::RpbModFun::MergeFrom(from.chash_keyfun());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_linkfun()) {
      mutable_linkfun()->::RpbModFun::MergeFrom(from.linkfun());
    }
    if (from.has_old_vclock()) {
      set_old_vclock(from.old_vclock());
    }
    if (from.has_young_vclock()) {
      set_young_vclock(from.young_vclock());
    }
    if (from.has_big_vclock()) {
      set_big_vclock(from.big_vclock());
    }
    if (from.has_small_vclock()) {
      set_small_vclock(from.small_vclock());
    }
    if (from.has_pr()) {
      set_pr(from.pr());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pw()) {
      set_pw(from.pw());
    }
    if (from.has_dw()) {
      set_dw(from.dw());
    }
    if (from.has_rw()) {
      set_rw(from.rw());
    }
    if (from.has_basic_quorum()) {
      set_basic_quorum(from.basic_quorum());
    }
    if (from.has_notfound_ok()) {
      set_notfound_ok(from.notfound_ok());
    }
    if (from.has_backend()) {
      set_backend(from.backend());
    }
    if (from.has_search()) {
      set_search(from.search());
    }
    if (from.has_repl()) {
      set_repl(from.repl());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_search_index()) {
      set_search_index(from.search_index());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_consistent()) {
      set_consistent(from.consistent());
    }
    if (from.has_write_once()) {
      set_write_once(from.write_once());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbBucketProps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbBucketProps::CopyFrom(const RpbBucketProps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbBucketProps::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->precommit())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->postcommit())) return false;
  if (has_chash_keyfun()) {
    if (!this->chash_keyfun().IsInitialized()) return false;
  }
  if (has_linkfun()) {
    if (!this->linkfun().IsInitialized()) return false;
  }
  return true;
}

void RpbBucketProps::Swap(RpbBucketProps* other) {
  if (other != this) {
    std::swap(n_val_, other->n_val_);
    std::swap(allow_mult_, other->allow_mult_);
    std::swap(last_write_wins_, other->last_write_wins_);
    precommit_.Swap(&other->precommit_);
    std::swap(has_precommit_, other->has_precommit_);
    postcommit_.Swap(&other->postcommit_);
    std::swap(has_postcommit_, other->has_postcommit_);
    std::swap(chash_keyfun_, other->chash_keyfun_);
    std::swap(linkfun_, other->linkfun_);
    std::swap(old_vclock_, other->old_vclock_);
    std::swap(young_vclock_, other->young_vclock_);
    std::swap(big_vclock_, other->big_vclock_);
    std::swap(small_vclock_, other->small_vclock_);
    std::swap(pr_, other->pr_);
    std::swap(r_, other->r_);
    std::swap(w_, other->w_);
    std::swap(pw_, other->pw_);
    std::swap(dw_, other->dw_);
    std::swap(rw_, other->rw_);
    std::swap(basic_quorum_, other->basic_quorum_);
    std::swap(notfound_ok_, other->notfound_ok_);
    std::swap(backend_, other->backend_);
    std::swap(search_, other->search_);
    std::swap(repl_, other->repl_);
    std::swap(search_index_, other->search_index_);
    std::swap(datatype_, other->datatype_);
    std::swap(consistent_, other->consistent_);
    std::swap(write_once_, other->write_once_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbBucketProps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbBucketProps_descriptor_;
  metadata.reflection = RpbBucketProps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbAuthReq::kUserFieldNumber;
const int RpbAuthReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

RpbAuthReq::RpbAuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbAuthReq)
}

void RpbAuthReq::InitAsDefaultInstance() {
}

RpbAuthReq::RpbAuthReq(const RpbAuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbAuthReq)
}

void RpbAuthReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbAuthReq::~RpbAuthReq() {
  // @@protoc_insertion_point(destructor:RpbAuthReq)
  SharedDtor();
}

void RpbAuthReq::SharedDtor() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void RpbAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbAuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbAuthReq_descriptor_;
}

const RpbAuthReq& RpbAuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbAuthReq* RpbAuthReq::default_instance_ = NULL;

RpbAuthReq* RpbAuthReq::New() const {
  return new RpbAuthReq;
}

void RpbAuthReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbAuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbAuthReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required bytes password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbAuthReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbAuthReq)
  return false;
#undef DO_
}

void RpbAuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbAuthReq)
  // required bytes user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user(), output);
  }

  // required bytes password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbAuthReq)
}

::google::protobuf::uint8* RpbAuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbAuthReq)
  // required bytes user = 1;
  if (has_user()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->user(), target);
  }

  // required bytes password = 2;
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbAuthReq)
  return target;
}

int RpbAuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // required bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbAuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbAuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbAuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbAuthReq::MergeFrom(const RpbAuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbAuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbAuthReq::CopyFrom(const RpbAuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbAuthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbAuthReq::Swap(RpbAuthReq* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbAuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbAuthReq_descriptor_;
  metadata.reflection = RpbAuthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbToggleEncodingReq::kUseNativeFieldNumber;
#endif  // !_MSC_VER

RpbToggleEncodingReq::RpbToggleEncodingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbToggleEncodingReq)
}

void RpbToggleEncodingReq::InitAsDefaultInstance() {
}

RpbToggleEncodingReq::RpbToggleEncodingReq(const RpbToggleEncodingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbToggleEncodingReq)
}

void RpbToggleEncodingReq::SharedCtor() {
  _cached_size_ = 0;
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbToggleEncodingReq::~RpbToggleEncodingReq() {
  // @@protoc_insertion_point(destructor:RpbToggleEncodingReq)
  SharedDtor();
}

void RpbToggleEncodingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbToggleEncodingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbToggleEncodingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbToggleEncodingReq_descriptor_;
}

const RpbToggleEncodingReq& RpbToggleEncodingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbToggleEncodingReq* RpbToggleEncodingReq::default_instance_ = NULL;

RpbToggleEncodingReq* RpbToggleEncodingReq::New() const {
  return new RpbToggleEncodingReq;
}

void RpbToggleEncodingReq::Clear() {
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbToggleEncodingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbToggleEncodingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool use_native = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_native_)));
          set_has_use_native();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbToggleEncodingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbToggleEncodingReq)
  return false;
#undef DO_
}

void RpbToggleEncodingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbToggleEncodingReq)
  // required bool use_native = 1;
  if (has_use_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_native(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbToggleEncodingReq)
}

::google::protobuf::uint8* RpbToggleEncodingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbToggleEncodingReq)
  // required bool use_native = 1;
  if (has_use_native()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_native(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbToggleEncodingReq)
  return target;
}

int RpbToggleEncodingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool use_native = 1;
    if (has_use_native()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbToggleEncodingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbToggleEncodingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbToggleEncodingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbToggleEncodingReq::MergeFrom(const RpbToggleEncodingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_native()) {
      set_use_native(from.use_native());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbToggleEncodingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbToggleEncodingReq::CopyFrom(const RpbToggleEncodingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbToggleEncodingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbToggleEncodingReq::Swap(RpbToggleEncodingReq* other) {
  if (other != this) {
    std::swap(use_native_, other->use_native_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbToggleEncodingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbToggleEncodingReq_descriptor_;
  metadata.reflection = RpbToggleEncodingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbToggleEncodingResp::kUseNativeFieldNumber;
#endif  // !_MSC_VER

RpbToggleEncodingResp::RpbToggleEncodingResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbToggleEncodingResp)
}

void RpbToggleEncodingResp::InitAsDefaultInstance() {
}

RpbToggleEncodingResp::RpbToggleEncodingResp(const RpbToggleEncodingResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbToggleEncodingResp)
}

void RpbToggleEncodingResp::SharedCtor() {
  _cached_size_ = 0;
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbToggleEncodingResp::~RpbToggleEncodingResp() {
  // @@protoc_insertion_point(destructor:RpbToggleEncodingResp)
  SharedDtor();
}

void RpbToggleEncodingResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbToggleEncodingResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbToggleEncodingResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbToggleEncodingResp_descriptor_;
}

const RpbToggleEncodingResp& RpbToggleEncodingResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbToggleEncodingResp* RpbToggleEncodingResp::default_instance_ = NULL;

RpbToggleEncodingResp* RpbToggleEncodingResp::New() const {
  return new RpbToggleEncodingResp;
}

void RpbToggleEncodingResp::Clear() {
  use_native_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbToggleEncodingResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbToggleEncodingResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool use_native = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_native_)));
          set_has_use_native();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbToggleEncodingResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbToggleEncodingResp)
  return false;
#undef DO_
}

void RpbToggleEncodingResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbToggleEncodingResp)
  // required bool use_native = 1;
  if (has_use_native()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_native(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbToggleEncodingResp)
}

::google::protobuf::uint8* RpbToggleEncodingResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbToggleEncodingResp)
  // required bool use_native = 1;
  if (has_use_native()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_native(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbToggleEncodingResp)
  return target;
}

int RpbToggleEncodingResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool use_native = 1;
    if (has_use_native()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbToggleEncodingResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbToggleEncodingResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbToggleEncodingResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbToggleEncodingResp::MergeFrom(const RpbToggleEncodingResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_native()) {
      set_use_native(from.use_native());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbToggleEncodingResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbToggleEncodingResp::CopyFrom(const RpbToggleEncodingResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbToggleEncodingResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbToggleEncodingResp::Swap(RpbToggleEncodingResp* other) {
  if (other != this) {
    std::swap(use_native_, other->use_native_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbToggleEncodingResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbToggleEncodingResp_descriptor_;
  metadata.reflection = RpbToggleEncodingResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSearchDoc::kFieldsFieldNumber;
#endif  // !_MSC_VER

RpbSearchDoc::RpbSearchDoc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSearchDoc)
}

void RpbSearchDoc::InitAsDefaultInstance() {
}

RpbSearchDoc::RpbSearchDoc(const RpbSearchDoc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSearchDoc)
}

void RpbSearchDoc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSearchDoc::~RpbSearchDoc() {
  // @@protoc_insertion_point(destructor:RpbSearchDoc)
  SharedDtor();
}

void RpbSearchDoc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbSearchDoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSearchDoc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSearchDoc_descriptor_;
}

const RpbSearchDoc& RpbSearchDoc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSearchDoc* RpbSearchDoc::default_instance_ = NULL;

RpbSearchDoc* RpbSearchDoc::New() const {
  return new RpbSearchDoc;
}

void RpbSearchDoc::Clear() {
  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSearchDoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSearchDoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbPair fields = 1;
      case 1: {
        if (tag == 10) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fields;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSearchDoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSearchDoc)
  return false;
#undef DO_
}

void RpbSearchDoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSearchDoc)
  // repeated .RpbPair fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fields(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSearchDoc)
}

::google::protobuf::uint8* RpbSearchDoc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSearchDoc)
  // repeated .RpbPair fields = 1;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fields(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSearchDoc)
  return target;
}

int RpbSearchDoc::ByteSize() const {
  int total_size = 0;

  // repeated .RpbPair fields = 1;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSearchDoc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSearchDoc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSearchDoc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSearchDoc::MergeFrom(const RpbSearchDoc& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSearchDoc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSearchDoc::CopyFrom(const RpbSearchDoc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSearchDoc::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fields())) return false;
  return true;
}

void RpbSearchDoc::Swap(RpbSearchDoc* other) {
  if (other != this) {
    fields_.Swap(&other->fields_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSearchDoc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSearchDoc_descriptor_;
  metadata.reflection = RpbSearchDoc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSearchQueryReq::kQFieldNumber;
const int RpbSearchQueryReq::kIndexFieldNumber;
const int RpbSearchQueryReq::kRowsFieldNumber;
const int RpbSearchQueryReq::kStartFieldNumber;
const int RpbSearchQueryReq::kSortFieldNumber;
const int RpbSearchQueryReq::kFilterFieldNumber;
const int RpbSearchQueryReq::kDfFieldNumber;
const int RpbSearchQueryReq::kOpFieldNumber;
const int RpbSearchQueryReq::kFlFieldNumber;
const int RpbSearchQueryReq::kPresortFieldNumber;
#endif  // !_MSC_VER

RpbSearchQueryReq::RpbSearchQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSearchQueryReq)
}

void RpbSearchQueryReq::InitAsDefaultInstance() {
}

RpbSearchQueryReq::RpbSearchQueryReq(const RpbSearchQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSearchQueryReq)
}

void RpbSearchQueryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  q_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rows_ = 0u;
  start_ = 0u;
  sort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  df_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presort_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSearchQueryReq::~RpbSearchQueryReq() {
  // @@protoc_insertion_point(destructor:RpbSearchQueryReq)
  SharedDtor();
}

void RpbSearchQueryReq::SharedDtor() {
  if (q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete q_;
  }
  if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete index_;
  }
  if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sort_;
  }
  if (filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filter_;
  }
  if (df_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete df_;
  }
  if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete op_;
  }
  if (presort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete presort_;
  }
  if (this != default_instance_) {
  }
}

void RpbSearchQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSearchQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSearchQueryReq_descriptor_;
}

const RpbSearchQueryReq& RpbSearchQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSearchQueryReq* RpbSearchQueryReq::default_instance_ = NULL;

RpbSearchQueryReq* RpbSearchQueryReq::New() const {
  return new RpbSearchQueryReq;
}

void RpbSearchQueryReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbSearchQueryReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rows_, start_);
    if (has_q()) {
      if (q_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        q_->clear();
      }
    }
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        index_->clear();
      }
    }
    if (has_sort()) {
      if (sort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sort_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filter_->clear();
      }
    }
    if (has_df()) {
      if (df_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        df_->clear();
      }
    }
    if (has_op()) {
      if (op_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        op_->clear();
      }
    }
  }
  if (has_presort()) {
    if (presort_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      presort_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSearchQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSearchQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes q = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_q()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // required bytes index = 2;
      case 2: {
        if (tag == 18) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rows;
        break;
      }

      // optional uint32 rows = 3;
      case 3: {
        if (tag == 24) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // optional uint32 start = 4;
      case 4: {
        if (tag == 32) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sort;
        break;
      }

      // optional bytes sort = 5;
      case 5: {
        if (tag == 42) {
         parse_sort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sort()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }

      // optional bytes filter = 6;
      case 6: {
        if (tag == 50) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_df;
        break;
      }

      // optional bytes df = 7;
      case 7: {
        if (tag == 58) {
         parse_df:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_df()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_op;
        break;
      }

      // optional bytes op = 8;
      case 8: {
        if (tag == 66) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_op()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_fl;
        break;
      }

      // repeated bytes fl = 9;
      case 9: {
        if (tag == 74) {
         parse_fl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_fl;
        if (input->ExpectTag(82)) goto parse_presort;
        break;
      }

      // optional bytes presort = 10;
      case 10: {
        if (tag == 82) {
         parse_presort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_presort()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSearchQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSearchQueryReq)
  return false;
#undef DO_
}

void RpbSearchQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSearchQueryReq)
  // required bytes q = 1;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->q(), output);
  }

  // required bytes index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->index(), output);
  }

  // optional uint32 rows = 3;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rows(), output);
  }

  // optional uint32 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start(), output);
  }

  // optional bytes sort = 5;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sort(), output);
  }

  // optional bytes filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->filter(), output);
  }

  // optional bytes df = 7;
  if (has_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->df(), output);
  }

  // optional bytes op = 8;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->op(), output);
  }

  // repeated bytes fl = 9;
  for (int i = 0; i < this->fl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->fl(i), output);
  }

  // optional bytes presort = 10;
  if (has_presort()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->presort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSearchQueryReq)
}

::google::protobuf::uint8* RpbSearchQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSearchQueryReq)
  // required bytes q = 1;
  if (has_q()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->q(), target);
  }

  // required bytes index = 2;
  if (has_index()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->index(), target);
  }

  // optional uint32 rows = 3;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rows(), target);
  }

  // optional uint32 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start(), target);
  }

  // optional bytes sort = 5;
  if (has_sort()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sort(), target);
  }

  // optional bytes filter = 6;
  if (has_filter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->filter(), target);
  }

  // optional bytes df = 7;
  if (has_df()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->df(), target);
  }

  // optional bytes op = 8;
  if (has_op()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->op(), target);
  }

  // repeated bytes fl = 9;
  for (int i = 0; i < this->fl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(9, this->fl(i), target);
  }

  // optional bytes presort = 10;
  if (has_presort()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->presort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSearchQueryReq)
  return target;
}

int RpbSearchQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes q = 1;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->q());
    }

    // required bytes index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->index());
    }

    // optional uint32 rows = 3;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // optional uint32 start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // optional bytes sort = 5;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sort());
    }

    // optional bytes filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filter());
    }

    // optional bytes df = 7;
    if (has_df()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->df());
    }

    // optional bytes op = 8;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->op());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bytes presort = 10;
    if (has_presort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->presort());
    }

  }
  // repeated bytes fl = 9;
  total_size += 1 * this->fl_size();
  for (int i = 0; i < this->fl_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fl(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSearchQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSearchQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSearchQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSearchQueryReq::MergeFrom(const RpbSearchQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  fl_.MergeFrom(from.fl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_df()) {
      set_df(from.df());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_presort()) {
      set_presort(from.presort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSearchQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSearchQueryReq::CopyFrom(const RpbSearchQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSearchQueryReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RpbSearchQueryReq::Swap(RpbSearchQueryReq* other) {
  if (other != this) {
    std::swap(q_, other->q_);
    std::swap(index_, other->index_);
    std::swap(rows_, other->rows_);
    std::swap(start_, other->start_);
    std::swap(sort_, other->sort_);
    std::swap(filter_, other->filter_);
    std::swap(df_, other->df_);
    std::swap(op_, other->op_);
    fl_.Swap(&other->fl_);
    std::swap(presort_, other->presort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSearchQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSearchQueryReq_descriptor_;
  metadata.reflection = RpbSearchQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbSearchQueryResp::kDocsFieldNumber;
const int RpbSearchQueryResp::kMaxScoreFieldNumber;
const int RpbSearchQueryResp::kNumFoundFieldNumber;
#endif  // !_MSC_VER

RpbSearchQueryResp::RpbSearchQueryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbSearchQueryResp)
}

void RpbSearchQueryResp::InitAsDefaultInstance() {
}

RpbSearchQueryResp::RpbSearchQueryResp(const RpbSearchQueryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbSearchQueryResp)
}

void RpbSearchQueryResp::SharedCtor() {
  _cached_size_ = 0;
  max_score_ = 0;
  num_found_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSearchQueryResp::~RpbSearchQueryResp() {
  // @@protoc_insertion_point(destructor:RpbSearchQueryResp)
  SharedDtor();
}

void RpbSearchQueryResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbSearchQueryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSearchQueryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSearchQueryResp_descriptor_;
}

const RpbSearchQueryResp& RpbSearchQueryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbSearchQueryResp* RpbSearchQueryResp::default_instance_ = NULL;

RpbSearchQueryResp* RpbSearchQueryResp::New() const {
  return new RpbSearchQueryResp;
}

void RpbSearchQueryResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RpbSearchQueryResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(max_score_, num_found_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  docs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSearchQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbSearchQueryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbSearchDoc docs = 1;
      case 1: {
        if (tag == 10) {
         parse_docs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_docs;
        if (input->ExpectTag(21)) goto parse_max_score;
        break;
      }

      // optional float max_score = 2;
      case 2: {
        if (tag == 21) {
         parse_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_score_)));
          set_has_max_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_found;
        break;
      }

      // optional uint32 num_found = 3;
      case 3: {
        if (tag == 24) {
         parse_num_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_found_)));
          set_has_num_found();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbSearchQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbSearchQueryResp)
  return false;
#undef DO_
}

void RpbSearchQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbSearchQueryResp)
  // repeated .RpbSearchDoc docs = 1;
  for (int i = 0; i < this->docs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->docs(i), output);
  }

  // optional float max_score = 2;
  if (has_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_score(), output);
  }

  // optional uint32 num_found = 3;
  if (has_num_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_found(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbSearchQueryResp)
}

::google::protobuf::uint8* RpbSearchQueryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbSearchQueryResp)
  // repeated .RpbSearchDoc docs = 1;
  for (int i = 0; i < this->docs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->docs(i), target);
  }

  // optional float max_score = 2;
  if (has_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_score(), target);
  }

  // optional uint32 num_found = 3;
  if (has_num_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_found(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbSearchQueryResp)
  return target;
}

int RpbSearchQueryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float max_score = 2;
    if (has_max_score()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_found = 3;
    if (has_num_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_found());
    }

  }
  // repeated .RpbSearchDoc docs = 1;
  total_size += 1 * this->docs_size();
  for (int i = 0; i < this->docs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->docs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSearchQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSearchQueryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSearchQueryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSearchQueryResp::MergeFrom(const RpbSearchQueryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  docs_.MergeFrom(from.docs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_max_score()) {
      set_max_score(from.max_score());
    }
    if (from.has_num_found()) {
      set_num_found(from.num_found());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSearchQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSearchQueryResp::CopyFrom(const RpbSearchQueryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSearchQueryResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->docs())) return false;
  return true;
}

void RpbSearchQueryResp::Swap(RpbSearchQueryResp* other) {
  if (other != this) {
    docs_.Swap(&other->docs_);
    std::swap(max_score_, other->max_score_);
    std::swap(num_found_, other->num_found_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSearchQueryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSearchQueryResp_descriptor_;
  metadata.reflection = RpbSearchQueryResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsQueryReq::kQueryFieldNumber;
const int TsQueryReq::kStreamFieldNumber;
const int TsQueryReq::kCoverContextFieldNumber;
#endif  // !_MSC_VER

TsQueryReq::TsQueryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsQueryReq)
}

void TsQueryReq::InitAsDefaultInstance() {
  query_ = const_cast< ::TsInterpolation*>(&::TsInterpolation::default_instance());
}

TsQueryReq::TsQueryReq(const TsQueryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsQueryReq)
}

void TsQueryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = NULL;
  stream_ = false;
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsQueryReq::~TsQueryReq() {
  // @@protoc_insertion_point(destructor:TsQueryReq)
  SharedDtor();
}

void TsQueryReq::SharedDtor() {
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
    delete query_;
  }
}

void TsQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsQueryReq_descriptor_;
}

const TsQueryReq& TsQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsQueryReq* TsQueryReq::default_instance_ = NULL;

TsQueryReq* TsQueryReq::New() const {
  return new TsQueryReq;
}

void TsQueryReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_query()) {
      if (query_ != NULL) query_->::TsInterpolation::Clear();
    }
    stream_ = false;
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TsInterpolation query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stream;
        break;
      }

      // optional bool stream = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cover_context;
        break;
      }

      // optional bytes cover_context = 3;
      case 3: {
        if (tag == 26) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsQueryReq)
  return false;
#undef DO_
}

void TsQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsQueryReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }

  // optional bool stream = 2 [default = false];
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stream(), output);
  }

  // optional bytes cover_context = 3;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cover_context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsQueryReq)
}

::google::protobuf::uint8* TsQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsQueryReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }

  // optional bool stream = 2 [default = false];
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stream(), target);
  }

  // optional bytes cover_context = 3;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cover_context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsQueryReq)
  return target;
}

int TsQueryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TsInterpolation query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }

    // optional bool stream = 2 [default = false];
    if (has_stream()) {
      total_size += 1 + 1;
    }

    // optional bytes cover_context = 3;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsQueryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsQueryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsQueryReq::MergeFrom(const TsQueryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      mutable_query()->::TsInterpolation::MergeFrom(from.query());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsQueryReq::CopyFrom(const TsQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsQueryReq::IsInitialized() const {

  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  return true;
}

void TsQueryReq::Swap(TsQueryReq* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(stream_, other->stream_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsQueryReq_descriptor_;
  metadata.reflection = TsQueryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsQueryResp::kColumnsFieldNumber;
const int TsQueryResp::kRowsFieldNumber;
const int TsQueryResp::kDoneFieldNumber;
#endif  // !_MSC_VER

TsQueryResp::TsQueryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsQueryResp)
}

void TsQueryResp::InitAsDefaultInstance() {
}

TsQueryResp::TsQueryResp(const TsQueryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsQueryResp)
}

void TsQueryResp::SharedCtor() {
  _cached_size_ = 0;
  done_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsQueryResp::~TsQueryResp() {
  // @@protoc_insertion_point(destructor:TsQueryResp)
  SharedDtor();
}

void TsQueryResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsQueryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsQueryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsQueryResp_descriptor_;
}

const TsQueryResp& TsQueryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsQueryResp* TsQueryResp::default_instance_ = NULL;

TsQueryResp* TsQueryResp::New() const {
  return new TsQueryResp;
}

void TsQueryResp::Clear() {
  done_ = true;
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsQueryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsQueryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsColumnDescription columns = 1;
      case 1: {
        if (tag == 10) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_columns;
        if (input->ExpectTag(18)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 2;
      case 2: {
        if (tag == 18) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rows;
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }

      // optional bool done = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsQueryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsQueryResp)
  return false;
#undef DO_
}

void TsQueryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsQueryResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(i), output);
  }

  // optional bool done = 3 [default = true];
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsQueryResp)
}

::google::protobuf::uint8* TsQueryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsQueryResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rows(i), target);
  }

  // optional bool done = 3 [default = true];
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsQueryResp)
  return target;
}

int TsQueryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool done = 3 [default = true];
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TsColumnDescription columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 2;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsQueryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsQueryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsQueryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsQueryResp::MergeFrom(const TsQueryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsQueryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsQueryResp::CopyFrom(const TsQueryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsQueryResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsQueryResp::Swap(TsQueryResp* other) {
  if (other != this) {
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsQueryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsQueryResp_descriptor_;
  metadata.reflection = TsQueryResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsGetReq::kTableFieldNumber;
const int TsGetReq::kKeyFieldNumber;
const int TsGetReq::kTimeoutFieldNumber;
#endif  // !_MSC_VER

TsGetReq::TsGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsGetReq)
}

void TsGetReq::InitAsDefaultInstance() {
}

TsGetReq::TsGetReq(const TsGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsGetReq)
}

void TsGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsGetReq::~TsGetReq() {
  // @@protoc_insertion_point(destructor:TsGetReq)
  SharedDtor();
}

void TsGetReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsGetReq_descriptor_;
}

const TsGetReq& TsGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsGetReq* TsGetReq::default_instance_ = NULL;

TsGetReq* TsGetReq::New() const {
  return new TsGetReq;
}

void TsGetReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    timeout_ = 0u;
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated .TsCell key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 3;
      case 3: {
        if (tag == 24) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsGetReq)
  return false;
#undef DO_
}

void TsGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsGetReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  // optional uint32 timeout = 3;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsGetReq)
}

::google::protobuf::uint8* TsGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsGetReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(i), target);
  }

  // optional uint32 timeout = 3;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsGetReq)
  return target;
}

int TsGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional uint32 timeout = 3;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  // repeated .TsCell key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsGetReq::MergeFrom(const TsGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsGetReq::CopyFrom(const TsGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TsGetReq::Swap(TsGetReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    key_.Swap(&other->key_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsGetReq_descriptor_;
  metadata.reflection = TsGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsGetResp::kColumnsFieldNumber;
const int TsGetResp::kRowsFieldNumber;
#endif  // !_MSC_VER

TsGetResp::TsGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsGetResp)
}

void TsGetResp::InitAsDefaultInstance() {
}

TsGetResp::TsGetResp(const TsGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsGetResp)
}

void TsGetResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsGetResp::~TsGetResp() {
  // @@protoc_insertion_point(destructor:TsGetResp)
  SharedDtor();
}

void TsGetResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsGetResp_descriptor_;
}

const TsGetResp& TsGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsGetResp* TsGetResp::default_instance_ = NULL;

TsGetResp* TsGetResp::New() const {
  return new TsGetResp;
}

void TsGetResp::Clear() {
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsColumnDescription columns = 1;
      case 1: {
        if (tag == 10) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_columns;
        if (input->ExpectTag(18)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 2;
      case 2: {
        if (tag == 18) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsGetResp)
  return false;
#undef DO_
}

void TsGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsGetResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsGetResp)
}

::google::protobuf::uint8* TsGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsGetResp)
  // repeated .TsColumnDescription columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }

  // repeated .TsRow rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsGetResp)
  return target;
}

int TsGetResp::ByteSize() const {
  int total_size = 0;

  // repeated .TsColumnDescription columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 2;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsGetResp::MergeFrom(const TsGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsGetResp::CopyFrom(const TsGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsGetResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsGetResp::Swap(TsGetResp* other) {
  if (other != this) {
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsGetResp_descriptor_;
  metadata.reflection = TsGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsPutReq::kTableFieldNumber;
const int TsPutReq::kColumnsFieldNumber;
const int TsPutReq::kRowsFieldNumber;
#endif  // !_MSC_VER

TsPutReq::TsPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsPutReq)
}

void TsPutReq::InitAsDefaultInstance() {
}

TsPutReq::TsPutReq(const TsPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsPutReq)
}

void TsPutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsPutReq::~TsPutReq() {
  // @@protoc_insertion_point(destructor:TsPutReq)
  SharedDtor();
}

void TsPutReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsPutReq_descriptor_;
}

const TsPutReq& TsPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsPutReq* TsPutReq::default_instance_ = NULL;

TsPutReq* TsPutReq::New() const {
  return new TsPutReq;
}

void TsPutReq::Clear() {
  if (has_table()) {
    if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_->clear();
    }
  }
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .TsColumnDescription columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        if (input->ExpectTag(26)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 3;
      case 3: {
        if (tag == 26) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsPutReq)
  return false;
#undef DO_
}

void TsPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsPutReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsPutReq)
}

::google::protobuf::uint8* TsPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsPutReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columns(i), target);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsPutReq)
  return target;
}

int TsPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

  }
  // repeated .TsColumnDescription columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 3;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsPutReq::MergeFrom(const TsPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsPutReq::CopyFrom(const TsPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsPutReq::Swap(TsPutReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsPutReq_descriptor_;
  metadata.reflection = TsPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsTtbPutReq::kTableFieldNumber;
const int TsTtbPutReq::kColumnsFieldNumber;
const int TsTtbPutReq::kRowsFieldNumber;
#endif  // !_MSC_VER

TsTtbPutReq::TsTtbPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsTtbPutReq)
}

void TsTtbPutReq::InitAsDefaultInstance() {
}

TsTtbPutReq::TsTtbPutReq(const TsTtbPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsTtbPutReq)
}

void TsTtbPutReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsTtbPutReq::~TsTtbPutReq() {
  // @@protoc_insertion_point(destructor:TsTtbPutReq)
  SharedDtor();
}

void TsTtbPutReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsTtbPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsTtbPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsTtbPutReq_descriptor_;
}

const TsTtbPutReq& TsTtbPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsTtbPutReq* TsTtbPutReq::default_instance_ = NULL;

TsTtbPutReq* TsTtbPutReq::New() const {
  return new TsTtbPutReq;
}

void TsTtbPutReq::Clear() {
  if (has_table()) {
    if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      table_->clear();
    }
  }
  columns_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsTtbPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsTtbPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }

      // repeated .TsColumnDescription columns = 2;
      case 2: {
        if (tag == 18) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        if (input->ExpectTag(26)) goto parse_rows;
        break;
      }

      // repeated .TsRow rows = 3;
      case 3: {
        if (tag == 26) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rows;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsTtbPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsTtbPutReq)
  return false;
#undef DO_
}

void TsTtbPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsTtbPutReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsTtbPutReq)
}

::google::protobuf::uint8* TsTtbPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsTtbPutReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsColumnDescription columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columns(i), target);
  }

  // repeated .TsRow rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsTtbPutReq)
  return target;
}

int TsTtbPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

  }
  // repeated .TsColumnDescription columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }

  // repeated .TsRow rows = 3;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsTtbPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsTtbPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsTtbPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsTtbPutReq::MergeFrom(const TsTtbPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsTtbPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsTtbPutReq::CopyFrom(const TsTtbPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsTtbPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void TsTtbPutReq::Swap(TsTtbPutReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    columns_.Swap(&other->columns_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsTtbPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsTtbPutReq_descriptor_;
  metadata.reflection = TsTtbPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TsPutResp::TsPutResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsPutResp)
}

void TsPutResp::InitAsDefaultInstance() {
}

TsPutResp::TsPutResp(const TsPutResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsPutResp)
}

void TsPutResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsPutResp::~TsPutResp() {
  // @@protoc_insertion_point(destructor:TsPutResp)
  SharedDtor();
}

void TsPutResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsPutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsPutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsPutResp_descriptor_;
}

const TsPutResp& TsPutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsPutResp* TsPutResp::default_instance_ = NULL;

TsPutResp* TsPutResp::New() const {
  return new TsPutResp;
}

void TsPutResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsPutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsPutResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TsPutResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsPutResp)
  return false;
#undef DO_
}

void TsPutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsPutResp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsPutResp)
}

::google::protobuf::uint8* TsPutResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsPutResp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsPutResp)
  return target;
}

int TsPutResp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsPutResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsPutResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsPutResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsPutResp::MergeFrom(const TsPutResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsPutResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsPutResp::CopyFrom(const TsPutResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsPutResp::IsInitialized() const {

  return true;
}

void TsPutResp::Swap(TsPutResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsPutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsPutResp_descriptor_;
  metadata.reflection = TsPutResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsDelReq::kTableFieldNumber;
const int TsDelReq::kKeyFieldNumber;
const int TsDelReq::kVclockFieldNumber;
const int TsDelReq::kTimeoutFieldNumber;
#endif  // !_MSC_VER

TsDelReq::TsDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsDelReq)
}

void TsDelReq::InitAsDefaultInstance() {
}

TsDelReq::TsDelReq(const TsDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsDelReq)
}

void TsDelReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vclock_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsDelReq::~TsDelReq() {
  // @@protoc_insertion_point(destructor:TsDelReq)
  SharedDtor();
}

void TsDelReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vclock_;
  }
  if (this != default_instance_) {
  }
}

void TsDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsDelReq_descriptor_;
}

const TsDelReq& TsDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsDelReq* TsDelReq::default_instance_ = NULL;

TsDelReq* TsDelReq::New() const {
  return new TsDelReq;
}

void TsDelReq::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_vclock()) {
      if (vclock_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vclock_->clear();
      }
    }
    timeout_ = 0u;
  }
  key_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsDelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // repeated .TsCell key = 2;
      case 2: {
        if (tag == 18) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_key;
        if (input->ExpectTag(26)) goto parse_vclock;
        break;
      }

      // optional bytes vclock = 3;
      case 3: {
        if (tag == 26) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsDelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsDelReq)
  return false;
#undef DO_
}

void TsDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsDelReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->key(i), output);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vclock(), output);
  }

  // optional uint32 timeout = 4;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsDelReq)
}

::google::protobuf::uint8* TsDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsDelReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // repeated .TsCell key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->key(i), target);
  }

  // optional bytes vclock = 3;
  if (has_vclock()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vclock(), target);
  }

  // optional uint32 timeout = 4;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsDelReq)
  return target;
}

int TsDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional bytes vclock = 3;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }

    // optional uint32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  // repeated .TsCell key = 2;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->key(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsDelReq::MergeFrom(const TsDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_vclock()) {
      set_vclock(from.vclock());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsDelReq::CopyFrom(const TsDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsDelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TsDelReq::Swap(TsDelReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    key_.Swap(&other->key_);
    std::swap(vclock_, other->vclock_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsDelReq_descriptor_;
  metadata.reflection = TsDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TsDelResp::TsDelResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsDelResp)
}

void TsDelResp::InitAsDefaultInstance() {
}

TsDelResp::TsDelResp(const TsDelResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsDelResp)
}

void TsDelResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsDelResp::~TsDelResp() {
  // @@protoc_insertion_point(destructor:TsDelResp)
  SharedDtor();
}

void TsDelResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsDelResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsDelResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsDelResp_descriptor_;
}

const TsDelResp& TsDelResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsDelResp* TsDelResp::default_instance_ = NULL;

TsDelResp* TsDelResp::New() const {
  return new TsDelResp;
}

void TsDelResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsDelResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsDelResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:TsDelResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsDelResp)
  return false;
#undef DO_
}

void TsDelResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsDelResp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsDelResp)
}

::google::protobuf::uint8* TsDelResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsDelResp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsDelResp)
  return target;
}

int TsDelResp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsDelResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsDelResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsDelResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsDelResp::MergeFrom(const TsDelResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsDelResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsDelResp::CopyFrom(const TsDelResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsDelResp::IsInitialized() const {

  return true;
}

void TsDelResp::Swap(TsDelResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsDelResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsDelResp_descriptor_;
  metadata.reflection = TsDelResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsInterpolation::kBaseFieldNumber;
const int TsInterpolation::kInterpolationsFieldNumber;
#endif  // !_MSC_VER

TsInterpolation::TsInterpolation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsInterpolation)
}

void TsInterpolation::InitAsDefaultInstance() {
}

TsInterpolation::TsInterpolation(const TsInterpolation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsInterpolation)
}

void TsInterpolation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  base_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsInterpolation::~TsInterpolation() {
  // @@protoc_insertion_point(destructor:TsInterpolation)
  SharedDtor();
}

void TsInterpolation::SharedDtor() {
  if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete base_;
  }
  if (this != default_instance_) {
  }
}

void TsInterpolation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsInterpolation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsInterpolation_descriptor_;
}

const TsInterpolation& TsInterpolation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsInterpolation* TsInterpolation::default_instance_ = NULL;

TsInterpolation* TsInterpolation::New() const {
  return new TsInterpolation;
}

void TsInterpolation::Clear() {
  if (has_base()) {
    if (base_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      base_->clear();
    }
  }
  interpolations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsInterpolation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsInterpolation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_interpolations;
        break;
      }

      // repeated .RpbPair interpolations = 2;
      case 2: {
        if (tag == 18) {
         parse_interpolations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interpolations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_interpolations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsInterpolation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsInterpolation)
  return false;
#undef DO_
}

void TsInterpolation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsInterpolation)
  // required bytes base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->base(), output);
  }

  // repeated .RpbPair interpolations = 2;
  for (int i = 0; i < this->interpolations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->interpolations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsInterpolation)
}

::google::protobuf::uint8* TsInterpolation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsInterpolation)
  // required bytes base = 1;
  if (has_base()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->base(), target);
  }

  // repeated .RpbPair interpolations = 2;
  for (int i = 0; i < this->interpolations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->interpolations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsInterpolation)
  return target;
}

int TsInterpolation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->base());
    }

  }
  // repeated .RpbPair interpolations = 2;
  total_size += 1 * this->interpolations_size();
  for (int i = 0; i < this->interpolations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interpolations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsInterpolation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsInterpolation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsInterpolation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsInterpolation::MergeFrom(const TsInterpolation& from) {
  GOOGLE_CHECK_NE(&from, this);
  interpolations_.MergeFrom(from.interpolations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      set_base(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsInterpolation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsInterpolation::CopyFrom(const TsInterpolation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsInterpolation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->interpolations())) return false;
  return true;
}

void TsInterpolation::Swap(TsInterpolation* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    interpolations_.Swap(&other->interpolations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsInterpolation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsInterpolation_descriptor_;
  metadata.reflection = TsInterpolation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsColumnDescription::kNameFieldNumber;
const int TsColumnDescription::kTypeFieldNumber;
#endif  // !_MSC_VER

TsColumnDescription::TsColumnDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsColumnDescription)
}

void TsColumnDescription::InitAsDefaultInstance() {
}

TsColumnDescription::TsColumnDescription(const TsColumnDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsColumnDescription)
}

void TsColumnDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsColumnDescription::~TsColumnDescription() {
  // @@protoc_insertion_point(destructor:TsColumnDescription)
  SharedDtor();
}

void TsColumnDescription::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TsColumnDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsColumnDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsColumnDescription_descriptor_;
}

const TsColumnDescription& TsColumnDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsColumnDescription* TsColumnDescription::default_instance_ = NULL;

TsColumnDescription* TsColumnDescription::New() const {
  return new TsColumnDescription;
}

void TsColumnDescription::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsColumnDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsColumnDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .TsColumnType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TsColumnType_IsValid(value)) {
            set_type(static_cast< ::TsColumnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsColumnDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsColumnDescription)
  return false;
#undef DO_
}

void TsColumnDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsColumnDescription)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required .TsColumnType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsColumnDescription)
}

::google::protobuf::uint8* TsColumnDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsColumnDescription)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required .TsColumnType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsColumnDescription)
  return target;
}

int TsColumnDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required .TsColumnType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsColumnDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsColumnDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsColumnDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsColumnDescription::MergeFrom(const TsColumnDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsColumnDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsColumnDescription::CopyFrom(const TsColumnDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsColumnDescription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TsColumnDescription::Swap(TsColumnDescription* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsColumnDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsColumnDescription_descriptor_;
  metadata.reflection = TsColumnDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsRow::kCellsFieldNumber;
#endif  // !_MSC_VER

TsRow::TsRow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsRow)
}

void TsRow::InitAsDefaultInstance() {
}

TsRow::TsRow(const TsRow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsRow)
}

void TsRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsRow::~TsRow() {
  // @@protoc_insertion_point(destructor:TsRow)
  SharedDtor();
}

void TsRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsRow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsRow_descriptor_;
}

const TsRow& TsRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsRow* TsRow::default_instance_ = NULL;

TsRow* TsRow::New() const {
  return new TsRow;
}

void TsRow::Clear() {
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsRow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsCell cells = 1;
      case 1: {
        if (tag == 10) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cells;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsRow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsRow)
  return false;
#undef DO_
}

void TsRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsRow)
  // repeated .TsCell cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cells(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsRow)
}

::google::protobuf::uint8* TsRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsRow)
  // repeated .TsCell cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cells(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsRow)
  return target;
}

int TsRow::ByteSize() const {
  int total_size = 0;

  // repeated .TsCell cells = 1;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsRow::MergeFrom(const TsRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  cells_.MergeFrom(from.cells_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsRow::CopyFrom(const TsRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsRow::IsInitialized() const {

  return true;
}

void TsRow::Swap(TsRow* other) {
  if (other != this) {
    cells_.Swap(&other->cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsRow_descriptor_;
  metadata.reflection = TsRow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCell::kVarcharValueFieldNumber;
const int TsCell::kSint64ValueFieldNumber;
const int TsCell::kTimestampValueFieldNumber;
const int TsCell::kBooleanValueFieldNumber;
const int TsCell::kDoubleValueFieldNumber;
#endif  // !_MSC_VER

TsCell::TsCell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCell)
}

void TsCell::InitAsDefaultInstance() {
}

TsCell::TsCell(const TsCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCell)
}

void TsCell::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  varchar_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sint64_value_ = GOOGLE_LONGLONG(0);
  timestamp_value_ = GOOGLE_LONGLONG(0);
  boolean_value_ = false;
  double_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCell::~TsCell() {
  // @@protoc_insertion_point(destructor:TsCell)
  SharedDtor();
}

void TsCell::SharedDtor() {
  if (varchar_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete varchar_value_;
  }
  if (this != default_instance_) {
  }
}

void TsCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCell_descriptor_;
}

const TsCell& TsCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsCell* TsCell::default_instance_ = NULL;

TsCell* TsCell::New() const {
  return new TsCell;
}

void TsCell::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TsCell*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sint64_value_, boolean_value_);
    if (has_varchar_value()) {
      if (varchar_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        varchar_value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes varchar_value = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_varchar_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sint64_value;
        break;
      }

      // optional sint64 sint64_value = 2;
      case 2: {
        if (tag == 16) {
         parse_sint64_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sint64_value_)));
          set_has_sint64_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp_value;
        break;
      }

      // optional sint64 timestamp_value = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_value_)));
          set_has_timestamp_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_boolean_value;
        break;
      }

      // optional bool boolean_value = 4;
      case 4: {
        if (tag == 32) {
         parse_boolean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_double_value;
        break;
      }

      // optional double double_value = 5;
      case 5: {
        if (tag == 41) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCell)
  return false;
#undef DO_
}

void TsCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCell)
  // optional bytes varchar_value = 1;
  if (has_varchar_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->varchar_value(), output);
  }

  // optional sint64 sint64_value = 2;
  if (has_sint64_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->sint64_value(), output);
  }

  // optional sint64 timestamp_value = 3;
  if (has_timestamp_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->timestamp_value(), output);
  }

  // optional bool boolean_value = 4;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolean_value(), output);
  }

  // optional double double_value = 5;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->double_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCell)
}

::google::protobuf::uint8* TsCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCell)
  // optional bytes varchar_value = 1;
  if (has_varchar_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->varchar_value(), target);
  }

  // optional sint64 sint64_value = 2;
  if (has_sint64_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->sint64_value(), target);
  }

  // optional sint64 timestamp_value = 3;
  if (has_timestamp_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->timestamp_value(), target);
  }

  // optional bool boolean_value = 4;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->boolean_value(), target);
  }

  // optional double double_value = 5;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->double_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCell)
  return target;
}

int TsCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes varchar_value = 1;
    if (has_varchar_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->varchar_value());
    }

    // optional sint64 sint64_value = 2;
    if (has_sint64_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sint64_value());
    }

    // optional sint64 timestamp_value = 3;
    if (has_timestamp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->timestamp_value());
    }

    // optional bool boolean_value = 4;
    if (has_boolean_value()) {
      total_size += 1 + 1;
    }

    // optional double double_value = 5;
    if (has_double_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCell::MergeFrom(const TsCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_varchar_value()) {
      set_varchar_value(from.varchar_value());
    }
    if (from.has_sint64_value()) {
      set_sint64_value(from.sint64_value());
    }
    if (from.has_timestamp_value()) {
      set_timestamp_value(from.timestamp_value());
    }
    if (from.has_boolean_value()) {
      set_boolean_value(from.boolean_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCell::CopyFrom(const TsCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCell::IsInitialized() const {

  return true;
}

void TsCell::Swap(TsCell* other) {
  if (other != this) {
    std::swap(varchar_value_, other->varchar_value_);
    std::swap(sint64_value_, other->sint64_value_);
    std::swap(timestamp_value_, other->timestamp_value_);
    std::swap(boolean_value_, other->boolean_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCell_descriptor_;
  metadata.reflection = TsCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsListKeysReq::kTableFieldNumber;
const int TsListKeysReq::kTimeoutFieldNumber;
#endif  // !_MSC_VER

TsListKeysReq::TsListKeysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsListKeysReq)
}

void TsListKeysReq::InitAsDefaultInstance() {
}

TsListKeysReq::TsListKeysReq(const TsListKeysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsListKeysReq)
}

void TsListKeysReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsListKeysReq::~TsListKeysReq() {
  // @@protoc_insertion_point(destructor:TsListKeysReq)
  SharedDtor();
}

void TsListKeysReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (this != default_instance_) {
  }
}

void TsListKeysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsListKeysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsListKeysReq_descriptor_;
}

const TsListKeysReq& TsListKeysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsListKeysReq* TsListKeysReq::default_instance_ = NULL;

TsListKeysReq* TsListKeysReq::New() const {
  return new TsListKeysReq;
}

void TsListKeysReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsListKeysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsListKeysReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsListKeysReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsListKeysReq)
  return false;
#undef DO_
}

void TsListKeysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsListKeysReq)
  // required bytes table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->table(), output);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsListKeysReq)
}

::google::protobuf::uint8* TsListKeysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsListKeysReq)
  // required bytes table = 1;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table(), target);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsListKeysReq)
  return target;
}

int TsListKeysReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsListKeysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsListKeysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsListKeysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsListKeysReq::MergeFrom(const TsListKeysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsListKeysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsListKeysReq::CopyFrom(const TsListKeysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsListKeysReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TsListKeysReq::Swap(TsListKeysReq* other) {
  if (other != this) {
    std::swap(table_, other->table_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsListKeysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsListKeysReq_descriptor_;
  metadata.reflection = TsListKeysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsListKeysResp::kKeysFieldNumber;
const int TsListKeysResp::kDoneFieldNumber;
#endif  // !_MSC_VER

TsListKeysResp::TsListKeysResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsListKeysResp)
}

void TsListKeysResp::InitAsDefaultInstance() {
}

TsListKeysResp::TsListKeysResp(const TsListKeysResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsListKeysResp)
}

void TsListKeysResp::SharedCtor() {
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsListKeysResp::~TsListKeysResp() {
  // @@protoc_insertion_point(destructor:TsListKeysResp)
  SharedDtor();
}

void TsListKeysResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsListKeysResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsListKeysResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsListKeysResp_descriptor_;
}

const TsListKeysResp& TsListKeysResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsListKeysResp* TsListKeysResp::default_instance_ = NULL;

TsListKeysResp* TsListKeysResp::New() const {
  return new TsListKeysResp;
}

void TsListKeysResp::Clear() {
  done_ = false;
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsListKeysResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsListKeysResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsRow keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // optional bool done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsListKeysResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsListKeysResp)
  return false;
#undef DO_
}

void TsListKeysResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsListKeysResp)
  // repeated .TsRow keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // optional bool done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsListKeysResp)
}

::google::protobuf::uint8* TsListKeysResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsListKeysResp)
  // repeated .TsRow keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keys(i), target);
  }

  // optional bool done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsListKeysResp)
  return target;
}

int TsListKeysResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool done = 2;
    if (has_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated .TsRow keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsListKeysResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsListKeysResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsListKeysResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsListKeysResp::MergeFrom(const TsListKeysResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_done()) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsListKeysResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsListKeysResp::CopyFrom(const TsListKeysResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsListKeysResp::IsInitialized() const {

  return true;
}

void TsListKeysResp::Swap(TsListKeysResp* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsListKeysResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsListKeysResp_descriptor_;
  metadata.reflection = TsListKeysResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCoverageReq::kQueryFieldNumber;
const int TsCoverageReq::kTableFieldNumber;
const int TsCoverageReq::kReplaceCoverFieldNumber;
const int TsCoverageReq::kUnavailableCoverFieldNumber;
#endif  // !_MSC_VER

TsCoverageReq::TsCoverageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCoverageReq)
}

void TsCoverageReq::InitAsDefaultInstance() {
  query_ = const_cast< ::TsInterpolation*>(&::TsInterpolation::default_instance());
}

TsCoverageReq::TsCoverageReq(const TsCoverageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCoverageReq)
}

void TsCoverageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = NULL;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replace_cover_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCoverageReq::~TsCoverageReq() {
  // @@protoc_insertion_point(destructor:TsCoverageReq)
  SharedDtor();
}

void TsCoverageReq::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete replace_cover_;
  }
  if (this != default_instance_) {
    delete query_;
  }
}

void TsCoverageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCoverageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCoverageReq_descriptor_;
}

const TsCoverageReq& TsCoverageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsCoverageReq* TsCoverageReq::default_instance_ = NULL;

TsCoverageReq* TsCoverageReq::New() const {
  return new TsCoverageReq;
}

void TsCoverageReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_query()) {
      if (query_ != NULL) query_->::TsInterpolation::Clear();
    }
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_replace_cover()) {
      if (replace_cover_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        replace_cover_->clear();
      }
    }
  }
  unavailable_cover_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCoverageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCoverageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TsInterpolation query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table;
        break;
      }

      // required bytes table = 2;
      case 2: {
        if (tag == 18) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_replace_cover;
        break;
      }

      // optional bytes replace_cover = 3;
      case 3: {
        if (tag == 26) {
         parse_replace_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replace_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unavailable_cover;
        break;
      }

      // repeated bytes unavailable_cover = 4;
      case 4: {
        if (tag == 34) {
         parse_unavailable_cover:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_unavailable_cover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unavailable_cover;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCoverageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCoverageReq)
  return false;
#undef DO_
}

void TsCoverageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCoverageReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query(), output);
  }

  // required bytes table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->table(), output);
  }

  // optional bytes replace_cover = 3;
  if (has_replace_cover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->replace_cover(), output);
  }

  // repeated bytes unavailable_cover = 4;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->unavailable_cover(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCoverageReq)
}

::google::protobuf::uint8* TsCoverageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCoverageReq)
  // optional .TsInterpolation query = 1;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query(), target);
  }

  // required bytes table = 2;
  if (has_table()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table(), target);
  }

  // optional bytes replace_cover = 3;
  if (has_replace_cover()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->replace_cover(), target);
  }

  // repeated bytes unavailable_cover = 4;
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->unavailable_cover(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCoverageReq)
  return target;
}

int TsCoverageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TsInterpolation query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }

    // required bytes table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table());
    }

    // optional bytes replace_cover = 3;
    if (has_replace_cover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replace_cover());
    }

  }
  // repeated bytes unavailable_cover = 4;
  total_size += 1 * this->unavailable_cover_size();
  for (int i = 0; i < this->unavailable_cover_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->unavailable_cover(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCoverageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCoverageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCoverageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCoverageReq::MergeFrom(const TsCoverageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  unavailable_cover_.MergeFrom(from.unavailable_cover_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      mutable_query()->::TsInterpolation::MergeFrom(from.query());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_replace_cover()) {
      set_replace_cover(from.replace_cover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCoverageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCoverageReq::CopyFrom(const TsCoverageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCoverageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  return true;
}

void TsCoverageReq::Swap(TsCoverageReq* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(table_, other->table_);
    std::swap(replace_cover_, other->replace_cover_);
    unavailable_cover_.Swap(&other->unavailable_cover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCoverageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCoverageReq_descriptor_;
  metadata.reflection = TsCoverageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCoverageResp::kEntriesFieldNumber;
#endif  // !_MSC_VER

TsCoverageResp::TsCoverageResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCoverageResp)
}

void TsCoverageResp::InitAsDefaultInstance() {
}

TsCoverageResp::TsCoverageResp(const TsCoverageResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCoverageResp)
}

void TsCoverageResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCoverageResp::~TsCoverageResp() {
  // @@protoc_insertion_point(destructor:TsCoverageResp)
  SharedDtor();
}

void TsCoverageResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TsCoverageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCoverageResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCoverageResp_descriptor_;
}

const TsCoverageResp& TsCoverageResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsCoverageResp* TsCoverageResp::default_instance_ = NULL;

TsCoverageResp* TsCoverageResp::New() const {
  return new TsCoverageResp;
}

void TsCoverageResp::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCoverageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCoverageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TsCoverageEntry entries = 1;
      case 1: {
        if (tag == 10) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCoverageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCoverageResp)
  return false;
#undef DO_
}

void TsCoverageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCoverageResp)
  // repeated .TsCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCoverageResp)
}

::google::protobuf::uint8* TsCoverageResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCoverageResp)
  // repeated .TsCoverageEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCoverageResp)
  return target;
}

int TsCoverageResp::ByteSize() const {
  int total_size = 0;

  // repeated .TsCoverageEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCoverageResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCoverageResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCoverageResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCoverageResp::MergeFrom(const TsCoverageResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCoverageResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCoverageResp::CopyFrom(const TsCoverageResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCoverageResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void TsCoverageResp::Swap(TsCoverageResp* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCoverageResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCoverageResp_descriptor_;
  metadata.reflection = TsCoverageResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsCoverageEntry::kIpFieldNumber;
const int TsCoverageEntry::kPortFieldNumber;
const int TsCoverageEntry::kCoverContextFieldNumber;
const int TsCoverageEntry::kRangeFieldNumber;
#endif  // !_MSC_VER

TsCoverageEntry::TsCoverageEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsCoverageEntry)
}

void TsCoverageEntry::InitAsDefaultInstance() {
  range_ = const_cast< ::TsRange*>(&::TsRange::default_instance());
}

TsCoverageEntry::TsCoverageEntry(const TsCoverageEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsCoverageEntry)
}

void TsCoverageEntry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  cover_context_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsCoverageEntry::~TsCoverageEntry() {
  // @@protoc_insertion_point(destructor:TsCoverageEntry)
  SharedDtor();
}

void TsCoverageEntry::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_context_;
  }
  if (this != default_instance_) {
    delete range_;
  }
}

void TsCoverageEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsCoverageEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsCoverageEntry_descriptor_;
}

const TsCoverageEntry& TsCoverageEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsCoverageEntry* TsCoverageEntry::default_instance_ = NULL;

TsCoverageEntry* TsCoverageEntry::New() const {
  return new TsCoverageEntry;
}

void TsCoverageEntry::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_cover_context()) {
      if (cover_context_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_context_->clear();
      }
    }
    if (has_range()) {
      if (range_ != NULL) range_->::TsRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsCoverageEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsCoverageEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cover_context;
        break;
      }

      // required bytes cover_context = 3;
      case 3: {
        if (tag == 26) {
         parse_cover_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cover_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_range;
        break;
      }

      // optional .TsRange range = 4;
      case 4: {
        if (tag == 34) {
         parse_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsCoverageEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsCoverageEntry)
  return false;
#undef DO_
}

void TsCoverageEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required bytes cover_context = 3;
  if (has_cover_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->cover_context(), output);
  }

  // optional .TsRange range = 4;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsCoverageEntry)
}

::google::protobuf::uint8* TsCoverageEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsCoverageEntry)
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required bytes cover_context = 3;
  if (has_cover_context()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cover_context(), target);
  }

  // optional .TsRange range = 4;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsCoverageEntry)
  return target;
}

int TsCoverageEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required bytes cover_context = 3;
    if (has_cover_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cover_context());
    }

    // optional .TsRange range = 4;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsCoverageEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsCoverageEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsCoverageEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsCoverageEntry::MergeFrom(const TsCoverageEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_cover_context()) {
      set_cover_context(from.cover_context());
    }
    if (from.has_range()) {
      mutable_range()->::TsRange::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsCoverageEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsCoverageEntry::CopyFrom(const TsCoverageEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsCoverageEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_range()) {
    if (!this->range().IsInitialized()) return false;
  }
  return true;
}

void TsCoverageEntry::Swap(TsCoverageEntry* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(cover_context_, other->cover_context_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsCoverageEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsCoverageEntry_descriptor_;
  metadata.reflection = TsCoverageEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TsRange::kFieldNameFieldNumber;
const int TsRange::kLowerBoundFieldNumber;
const int TsRange::kLowerBoundInclusiveFieldNumber;
const int TsRange::kUpperBoundFieldNumber;
const int TsRange::kUpperBoundInclusiveFieldNumber;
const int TsRange::kDescFieldNumber;
#endif  // !_MSC_VER

TsRange::TsRange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TsRange)
}

void TsRange::InitAsDefaultInstance() {
}

TsRange::TsRange(const TsRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TsRange)
}

void TsRange::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lower_bound_ = GOOGLE_LONGLONG(0);
  lower_bound_inclusive_ = false;
  upper_bound_ = GOOGLE_LONGLONG(0);
  upper_bound_inclusive_ = false;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TsRange::~TsRange() {
  // @@protoc_insertion_point(destructor:TsRange)
  SharedDtor();
}

void TsRange::SharedDtor() {
  if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field_name_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void TsRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TsRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TsRange_descriptor_;
}

const TsRange& TsRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

TsRange* TsRange::default_instance_ = NULL;

TsRange* TsRange::New() const {
  return new TsRange;
}

void TsRange::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TsRange*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lower_bound_, upper_bound_);
    ZR_(lower_bound_inclusive_, upper_bound_inclusive_);
    if (has_field_name()) {
      if (field_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field_name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TsRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TsRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes field_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_field_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lower_bound;
        break;
      }

      // required sint64 lower_bound = 2;
      case 2: {
        if (tag == 16) {
         parse_lower_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lower_bound_)));
          set_has_lower_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lower_bound_inclusive;
        break;
      }

      // required bool lower_bound_inclusive = 3;
      case 3: {
        if (tag == 24) {
         parse_lower_bound_inclusive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lower_bound_inclusive_)));
          set_has_lower_bound_inclusive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upper_bound;
        break;
      }

      // required sint64 upper_bound = 4;
      case 4: {
        if (tag == 32) {
         parse_upper_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &upper_bound_)));
          set_has_upper_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upper_bound_inclusive;
        break;
      }

      // required bool upper_bound_inclusive = 5;
      case 5: {
        if (tag == 40) {
         parse_upper_bound_inclusive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upper_bound_inclusive_)));
          set_has_upper_bound_inclusive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // required bytes desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TsRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TsRange)
  return false;
#undef DO_
}

void TsRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TsRange)
  // required bytes field_name = 1;
  if (has_field_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->field_name(), output);
  }

  // required sint64 lower_bound = 2;
  if (has_lower_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->lower_bound(), output);
  }

  // required bool lower_bound_inclusive = 3;
  if (has_lower_bound_inclusive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lower_bound_inclusive(), output);
  }

  // required sint64 upper_bound = 4;
  if (has_upper_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->upper_bound(), output);
  }

  // required bool upper_bound_inclusive = 5;
  if (has_upper_bound_inclusive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upper_bound_inclusive(), output);
  }

  // required bytes desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TsRange)
}

::google::protobuf::uint8* TsRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TsRange)
  // required bytes field_name = 1;
  if (has_field_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->field_name(), target);
  }

  // required sint64 lower_bound = 2;
  if (has_lower_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->lower_bound(), target);
  }

  // required bool lower_bound_inclusive = 3;
  if (has_lower_bound_inclusive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lower_bound_inclusive(), target);
  }

  // required sint64 upper_bound = 4;
  if (has_upper_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->upper_bound(), target);
  }

  // required bool upper_bound_inclusive = 5;
  if (has_upper_bound_inclusive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upper_bound_inclusive(), target);
  }

  // required bytes desc = 6;
  if (has_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TsRange)
  return target;
}

int TsRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes field_name = 1;
    if (has_field_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->field_name());
    }

    // required sint64 lower_bound = 2;
    if (has_lower_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lower_bound());
    }

    // required bool lower_bound_inclusive = 3;
    if (has_lower_bound_inclusive()) {
      total_size += 1 + 1;
    }

    // required sint64 upper_bound = 4;
    if (has_upper_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->upper_bound());
    }

    // required bool upper_bound_inclusive = 5;
    if (has_upper_bound_inclusive()) {
      total_size += 1 + 1;
    }

    // required bytes desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TsRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TsRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TsRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TsRange::MergeFrom(const TsRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_name()) {
      set_field_name(from.field_name());
    }
    if (from.has_lower_bound()) {
      set_lower_bound(from.lower_bound());
    }
    if (from.has_lower_bound_inclusive()) {
      set_lower_bound_inclusive(from.lower_bound_inclusive());
    }
    if (from.has_upper_bound()) {
      set_upper_bound(from.upper_bound());
    }
    if (from.has_upper_bound_inclusive()) {
      set_upper_bound_inclusive(from.upper_bound_inclusive());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TsRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TsRange::CopyFrom(const TsRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TsRange::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void TsRange::Swap(TsRange* other) {
  if (other != this) {
    std::swap(field_name_, other->field_name_);
    std::swap(lower_bound_, other->lower_bound_);
    std::swap(lower_bound_inclusive_, other->lower_bound_inclusive_);
    std::swap(upper_bound_, other->upper_bound_);
    std::swap(upper_bound_inclusive_, other->upper_bound_inclusive_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TsRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TsRange_descriptor_;
  metadata.reflection = TsRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaIndex::kNameFieldNumber;
const int RpbYokozunaIndex::kSchemaFieldNumber;
const int RpbYokozunaIndex::kNValFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaIndex::RpbYokozunaIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaIndex)
}

void RpbYokozunaIndex::InitAsDefaultInstance() {
}

RpbYokozunaIndex::RpbYokozunaIndex(const RpbYokozunaIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaIndex)
}

void RpbYokozunaIndex::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  n_val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaIndex::~RpbYokozunaIndex() {
  // @@protoc_insertion_point(destructor:RpbYokozunaIndex)
  SharedDtor();
}

void RpbYokozunaIndex::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete schema_;
  }
  if (this != default_instance_) {
  }
}

void RpbYokozunaIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaIndex_descriptor_;
}

const RpbYokozunaIndex& RpbYokozunaIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaIndex* RpbYokozunaIndex::default_instance_ = NULL;

RpbYokozunaIndex* RpbYokozunaIndex::New() const {
  return new RpbYokozunaIndex;
}

void RpbYokozunaIndex::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_schema()) {
      if (schema_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        schema_->clear();
      }
    }
    n_val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_schema;
        break;
      }

      // optional bytes schema = 2;
      case 2: {
        if (tag == 18) {
         parse_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_schema()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_n_val;
        break;
      }

      // optional uint32 n_val = 3;
      case 3: {
        if (tag == 24) {
         parse_n_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          set_has_n_val();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaIndex)
  return false;
#undef DO_
}

void RpbYokozunaIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaIndex)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes schema = 2;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->schema(), output);
  }

  // optional uint32 n_val = 3;
  if (has_n_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->n_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaIndex)
}

::google::protobuf::uint8* RpbYokozunaIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaIndex)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes schema = 2;
  if (has_schema()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->schema(), target);
  }

  // optional uint32 n_val = 3;
  if (has_n_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->n_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaIndex)
  return target;
}

int RpbYokozunaIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes schema = 2;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->schema());
    }

    // optional uint32 n_val = 3;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaIndex::MergeFrom(const RpbYokozunaIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_schema()) {
      set_schema(from.schema());
    }
    if (from.has_n_val()) {
      set_n_val(from.n_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaIndex::CopyFrom(const RpbYokozunaIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaIndex::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbYokozunaIndex::Swap(RpbYokozunaIndex* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(schema_, other->schema_);
    std::swap(n_val_, other->n_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaIndex_descriptor_;
  metadata.reflection = RpbYokozunaIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaIndexGetReq::kNameFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaIndexGetReq::RpbYokozunaIndexGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaIndexGetReq)
}

void RpbYokozunaIndexGetReq::InitAsDefaultInstance() {
}

RpbYokozunaIndexGetReq::RpbYokozunaIndexGetReq(const RpbYokozunaIndexGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaIndexGetReq)
}

void RpbYokozunaIndexGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaIndexGetReq::~RpbYokozunaIndexGetReq() {
  // @@protoc_insertion_point(destructor:RpbYokozunaIndexGetReq)
  SharedDtor();
}

void RpbYokozunaIndexGetReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RpbYokozunaIndexGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaIndexGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaIndexGetReq_descriptor_;
}

const RpbYokozunaIndexGetReq& RpbYokozunaIndexGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaIndexGetReq* RpbYokozunaIndexGetReq::default_instance_ = NULL;

RpbYokozunaIndexGetReq* RpbYokozunaIndexGetReq::New() const {
  return new RpbYokozunaIndexGetReq;
}

void RpbYokozunaIndexGetReq::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaIndexGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaIndexGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaIndexGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaIndexGetReq)
  return false;
#undef DO_
}

void RpbYokozunaIndexGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaIndexGetReq)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaIndexGetReq)
}

::google::protobuf::uint8* RpbYokozunaIndexGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaIndexGetReq)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaIndexGetReq)
  return target;
}

int RpbYokozunaIndexGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaIndexGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaIndexGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaIndexGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaIndexGetReq::MergeFrom(const RpbYokozunaIndexGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaIndexGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaIndexGetReq::CopyFrom(const RpbYokozunaIndexGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaIndexGetReq::IsInitialized() const {

  return true;
}

void RpbYokozunaIndexGetReq::Swap(RpbYokozunaIndexGetReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaIndexGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaIndexGetReq_descriptor_;
  metadata.reflection = RpbYokozunaIndexGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaIndexGetResp::kIndexFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaIndexGetResp::RpbYokozunaIndexGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaIndexGetResp)
}

void RpbYokozunaIndexGetResp::InitAsDefaultInstance() {
}

RpbYokozunaIndexGetResp::RpbYokozunaIndexGetResp(const RpbYokozunaIndexGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaIndexGetResp)
}

void RpbYokozunaIndexGetResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaIndexGetResp::~RpbYokozunaIndexGetResp() {
  // @@protoc_insertion_point(destructor:RpbYokozunaIndexGetResp)
  SharedDtor();
}

void RpbYokozunaIndexGetResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbYokozunaIndexGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaIndexGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaIndexGetResp_descriptor_;
}

const RpbYokozunaIndexGetResp& RpbYokozunaIndexGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaIndexGetResp* RpbYokozunaIndexGetResp::default_instance_ = NULL;

RpbYokozunaIndexGetResp* RpbYokozunaIndexGetResp::New() const {
  return new RpbYokozunaIndexGetResp;
}

void RpbYokozunaIndexGetResp::Clear() {
  index_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaIndexGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaIndexGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbYokozunaIndex index = 1;
      case 1: {
        if (tag == 10) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_index;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaIndexGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaIndexGetResp)
  return false;
#undef DO_
}

void RpbYokozunaIndexGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaIndexGetResp)
  // repeated .RpbYokozunaIndex index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaIndexGetResp)
}

::google::protobuf::uint8* RpbYokozunaIndexGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaIndexGetResp)
  // repeated .RpbYokozunaIndex index = 1;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->index(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaIndexGetResp)
  return target;
}

int RpbYokozunaIndexGetResp::ByteSize() const {
  int total_size = 0;

  // repeated .RpbYokozunaIndex index = 1;
  total_size += 1 * this->index_size();
  for (int i = 0; i < this->index_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->index(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaIndexGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaIndexGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaIndexGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaIndexGetResp::MergeFrom(const RpbYokozunaIndexGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaIndexGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaIndexGetResp::CopyFrom(const RpbYokozunaIndexGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaIndexGetResp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->index())) return false;
  return true;
}

void RpbYokozunaIndexGetResp::Swap(RpbYokozunaIndexGetResp* other) {
  if (other != this) {
    index_.Swap(&other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaIndexGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaIndexGetResp_descriptor_;
  metadata.reflection = RpbYokozunaIndexGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaIndexPutReq::kIndexFieldNumber;
const int RpbYokozunaIndexPutReq::kTimeoutFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaIndexPutReq::RpbYokozunaIndexPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaIndexPutReq)
}

void RpbYokozunaIndexPutReq::InitAsDefaultInstance() {
  index_ = const_cast< ::RpbYokozunaIndex*>(&::RpbYokozunaIndex::default_instance());
}

RpbYokozunaIndexPutReq::RpbYokozunaIndexPutReq(const RpbYokozunaIndexPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaIndexPutReq)
}

void RpbYokozunaIndexPutReq::SharedCtor() {
  _cached_size_ = 0;
  index_ = NULL;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaIndexPutReq::~RpbYokozunaIndexPutReq() {
  // @@protoc_insertion_point(destructor:RpbYokozunaIndexPutReq)
  SharedDtor();
}

void RpbYokozunaIndexPutReq::SharedDtor() {
  if (this != default_instance_) {
    delete index_;
  }
}

void RpbYokozunaIndexPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaIndexPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaIndexPutReq_descriptor_;
}

const RpbYokozunaIndexPutReq& RpbYokozunaIndexPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaIndexPutReq* RpbYokozunaIndexPutReq::default_instance_ = NULL;

RpbYokozunaIndexPutReq* RpbYokozunaIndexPutReq::New() const {
  return new RpbYokozunaIndexPutReq;
}

void RpbYokozunaIndexPutReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_index()) {
      if (index_ != NULL) index_->::RpbYokozunaIndex::Clear();
    }
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaIndexPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaIndexPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RpbYokozunaIndex index = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaIndexPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaIndexPutReq)
  return false;
#undef DO_
}

void RpbYokozunaIndexPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaIndexPutReq)
  // required .RpbYokozunaIndex index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->index(), output);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaIndexPutReq)
}

::google::protobuf::uint8* RpbYokozunaIndexPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaIndexPutReq)
  // required .RpbYokozunaIndex index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->index(), target);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaIndexPutReq)
  return target;
}

int RpbYokozunaIndexPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RpbYokozunaIndex index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->index());
    }

    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaIndexPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaIndexPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaIndexPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaIndexPutReq::MergeFrom(const RpbYokozunaIndexPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      mutable_index()->::RpbYokozunaIndex::MergeFrom(from.index());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaIndexPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaIndexPutReq::CopyFrom(const RpbYokozunaIndexPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaIndexPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_index()) {
    if (!this->index().IsInitialized()) return false;
  }
  return true;
}

void RpbYokozunaIndexPutReq::Swap(RpbYokozunaIndexPutReq* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaIndexPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaIndexPutReq_descriptor_;
  metadata.reflection = RpbYokozunaIndexPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaIndexDeleteReq::kNameFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaIndexDeleteReq::RpbYokozunaIndexDeleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaIndexDeleteReq)
}

void RpbYokozunaIndexDeleteReq::InitAsDefaultInstance() {
}

RpbYokozunaIndexDeleteReq::RpbYokozunaIndexDeleteReq(const RpbYokozunaIndexDeleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaIndexDeleteReq)
}

void RpbYokozunaIndexDeleteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaIndexDeleteReq::~RpbYokozunaIndexDeleteReq() {
  // @@protoc_insertion_point(destructor:RpbYokozunaIndexDeleteReq)
  SharedDtor();
}

void RpbYokozunaIndexDeleteReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RpbYokozunaIndexDeleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaIndexDeleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaIndexDeleteReq_descriptor_;
}

const RpbYokozunaIndexDeleteReq& RpbYokozunaIndexDeleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaIndexDeleteReq* RpbYokozunaIndexDeleteReq::default_instance_ = NULL;

RpbYokozunaIndexDeleteReq* RpbYokozunaIndexDeleteReq::New() const {
  return new RpbYokozunaIndexDeleteReq;
}

void RpbYokozunaIndexDeleteReq::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaIndexDeleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaIndexDeleteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaIndexDeleteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaIndexDeleteReq)
  return false;
#undef DO_
}

void RpbYokozunaIndexDeleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaIndexDeleteReq)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaIndexDeleteReq)
}

::google::protobuf::uint8* RpbYokozunaIndexDeleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaIndexDeleteReq)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaIndexDeleteReq)
  return target;
}

int RpbYokozunaIndexDeleteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaIndexDeleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaIndexDeleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaIndexDeleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaIndexDeleteReq::MergeFrom(const RpbYokozunaIndexDeleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaIndexDeleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaIndexDeleteReq::CopyFrom(const RpbYokozunaIndexDeleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaIndexDeleteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbYokozunaIndexDeleteReq::Swap(RpbYokozunaIndexDeleteReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaIndexDeleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaIndexDeleteReq_descriptor_;
  metadata.reflection = RpbYokozunaIndexDeleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaSchema::kNameFieldNumber;
const int RpbYokozunaSchema::kContentFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaSchema::RpbYokozunaSchema()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaSchema)
}

void RpbYokozunaSchema::InitAsDefaultInstance() {
}

RpbYokozunaSchema::RpbYokozunaSchema(const RpbYokozunaSchema& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaSchema)
}

void RpbYokozunaSchema::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaSchema::~RpbYokozunaSchema() {
  // @@protoc_insertion_point(destructor:RpbYokozunaSchema)
  SharedDtor();
}

void RpbYokozunaSchema::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void RpbYokozunaSchema::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaSchema::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaSchema_descriptor_;
}

const RpbYokozunaSchema& RpbYokozunaSchema::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaSchema* RpbYokozunaSchema::default_instance_ = NULL;

RpbYokozunaSchema* RpbYokozunaSchema::New() const {
  return new RpbYokozunaSchema;
}

void RpbYokozunaSchema::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaSchema)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaSchema)
  return false;
#undef DO_
}

void RpbYokozunaSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaSchema)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaSchema)
}

::google::protobuf::uint8* RpbYokozunaSchema::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaSchema)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaSchema)
  return target;
}

int RpbYokozunaSchema::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaSchema::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaSchema* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaSchema*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaSchema::MergeFrom(const RpbYokozunaSchema& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaSchema::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaSchema::CopyFrom(const RpbYokozunaSchema& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaSchema::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbYokozunaSchema::Swap(RpbYokozunaSchema* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaSchema::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaSchema_descriptor_;
  metadata.reflection = RpbYokozunaSchema_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaSchemaPutReq::kSchemaFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaSchemaPutReq::RpbYokozunaSchemaPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaSchemaPutReq)
}

void RpbYokozunaSchemaPutReq::InitAsDefaultInstance() {
  schema_ = const_cast< ::RpbYokozunaSchema*>(&::RpbYokozunaSchema::default_instance());
}

RpbYokozunaSchemaPutReq::RpbYokozunaSchemaPutReq(const RpbYokozunaSchemaPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaSchemaPutReq)
}

void RpbYokozunaSchemaPutReq::SharedCtor() {
  _cached_size_ = 0;
  schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaSchemaPutReq::~RpbYokozunaSchemaPutReq() {
  // @@protoc_insertion_point(destructor:RpbYokozunaSchemaPutReq)
  SharedDtor();
}

void RpbYokozunaSchemaPutReq::SharedDtor() {
  if (this != default_instance_) {
    delete schema_;
  }
}

void RpbYokozunaSchemaPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaSchemaPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaSchemaPutReq_descriptor_;
}

const RpbYokozunaSchemaPutReq& RpbYokozunaSchemaPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaSchemaPutReq* RpbYokozunaSchemaPutReq::default_instance_ = NULL;

RpbYokozunaSchemaPutReq* RpbYokozunaSchemaPutReq::New() const {
  return new RpbYokozunaSchemaPutReq;
}

void RpbYokozunaSchemaPutReq::Clear() {
  if (has_schema()) {
    if (schema_ != NULL) schema_->::RpbYokozunaSchema::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaSchemaPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaSchemaPutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RpbYokozunaSchema schema = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaSchemaPutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaSchemaPutReq)
  return false;
#undef DO_
}

void RpbYokozunaSchemaPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaSchemaPutReq)
  // required .RpbYokozunaSchema schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaSchemaPutReq)
}

::google::protobuf::uint8* RpbYokozunaSchemaPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaSchemaPutReq)
  // required .RpbYokozunaSchema schema = 1;
  if (has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaSchemaPutReq)
  return target;
}

int RpbYokozunaSchemaPutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RpbYokozunaSchema schema = 1;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaSchemaPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaSchemaPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaSchemaPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaSchemaPutReq::MergeFrom(const RpbYokozunaSchemaPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema()) {
      mutable_schema()->::RpbYokozunaSchema::MergeFrom(from.schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaSchemaPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaSchemaPutReq::CopyFrom(const RpbYokozunaSchemaPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaSchemaPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_schema()) {
    if (!this->schema().IsInitialized()) return false;
  }
  return true;
}

void RpbYokozunaSchemaPutReq::Swap(RpbYokozunaSchemaPutReq* other) {
  if (other != this) {
    std::swap(schema_, other->schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaSchemaPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaSchemaPutReq_descriptor_;
  metadata.reflection = RpbYokozunaSchemaPutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaSchemaGetReq::kNameFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaSchemaGetReq::RpbYokozunaSchemaGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaSchemaGetReq)
}

void RpbYokozunaSchemaGetReq::InitAsDefaultInstance() {
}

RpbYokozunaSchemaGetReq::RpbYokozunaSchemaGetReq(const RpbYokozunaSchemaGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaSchemaGetReq)
}

void RpbYokozunaSchemaGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaSchemaGetReq::~RpbYokozunaSchemaGetReq() {
  // @@protoc_insertion_point(destructor:RpbYokozunaSchemaGetReq)
  SharedDtor();
}

void RpbYokozunaSchemaGetReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RpbYokozunaSchemaGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaSchemaGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaSchemaGetReq_descriptor_;
}

const RpbYokozunaSchemaGetReq& RpbYokozunaSchemaGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaSchemaGetReq* RpbYokozunaSchemaGetReq::default_instance_ = NULL;

RpbYokozunaSchemaGetReq* RpbYokozunaSchemaGetReq::New() const {
  return new RpbYokozunaSchemaGetReq;
}

void RpbYokozunaSchemaGetReq::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaSchemaGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaSchemaGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaSchemaGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaSchemaGetReq)
  return false;
#undef DO_
}

void RpbYokozunaSchemaGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaSchemaGetReq)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaSchemaGetReq)
}

::google::protobuf::uint8* RpbYokozunaSchemaGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaSchemaGetReq)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaSchemaGetReq)
  return target;
}

int RpbYokozunaSchemaGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaSchemaGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaSchemaGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaSchemaGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaSchemaGetReq::MergeFrom(const RpbYokozunaSchemaGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaSchemaGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaSchemaGetReq::CopyFrom(const RpbYokozunaSchemaGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaSchemaGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpbYokozunaSchemaGetReq::Swap(RpbYokozunaSchemaGetReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaSchemaGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaSchemaGetReq_descriptor_;
  metadata.reflection = RpbYokozunaSchemaGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbYokozunaSchemaGetResp::kSchemaFieldNumber;
#endif  // !_MSC_VER

RpbYokozunaSchemaGetResp::RpbYokozunaSchemaGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpbYokozunaSchemaGetResp)
}

void RpbYokozunaSchemaGetResp::InitAsDefaultInstance() {
  schema_ = const_cast< ::RpbYokozunaSchema*>(&::RpbYokozunaSchema::default_instance());
}

RpbYokozunaSchemaGetResp::RpbYokozunaSchemaGetResp(const RpbYokozunaSchemaGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RpbYokozunaSchemaGetResp)
}

void RpbYokozunaSchemaGetResp::SharedCtor() {
  _cached_size_ = 0;
  schema_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbYokozunaSchemaGetResp::~RpbYokozunaSchemaGetResp() {
  // @@protoc_insertion_point(destructor:RpbYokozunaSchemaGetResp)
  SharedDtor();
}

void RpbYokozunaSchemaGetResp::SharedDtor() {
  if (this != default_instance_) {
    delete schema_;
  }
}

void RpbYokozunaSchemaGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbYokozunaSchemaGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbYokozunaSchemaGetResp_descriptor_;
}

const RpbYokozunaSchemaGetResp& RpbYokozunaSchemaGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riak_2eproto();
  return *default_instance_;
}

RpbYokozunaSchemaGetResp* RpbYokozunaSchemaGetResp::default_instance_ = NULL;

RpbYokozunaSchemaGetResp* RpbYokozunaSchemaGetResp::New() const {
  return new RpbYokozunaSchemaGetResp;
}

void RpbYokozunaSchemaGetResp::Clear() {
  if (has_schema()) {
    if (schema_ != NULL) schema_->::RpbYokozunaSchema::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbYokozunaSchemaGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpbYokozunaSchemaGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RpbYokozunaSchema schema = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpbYokozunaSchemaGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpbYokozunaSchemaGetResp)
  return false;
#undef DO_
}

void RpbYokozunaSchemaGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpbYokozunaSchemaGetResp)
  // required .RpbYokozunaSchema schema = 1;
  if (has_schema()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpbYokozunaSchemaGetResp)
}

::google::protobuf::uint8* RpbYokozunaSchemaGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RpbYokozunaSchemaGetResp)
  // required .RpbYokozunaSchema schema = 1;
  if (has_schema()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpbYokozunaSchemaGetResp)
  return target;
}

int RpbYokozunaSchemaGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RpbYokozunaSchema schema = 1;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->schema());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbYokozunaSchemaGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbYokozunaSchemaGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbYokozunaSchemaGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbYokozunaSchemaGetResp::MergeFrom(const RpbYokozunaSchemaGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_schema()) {
      mutable_schema()->::RpbYokozunaSchema::MergeFrom(from.schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbYokozunaSchemaGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbYokozunaSchemaGetResp::CopyFrom(const RpbYokozunaSchemaGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbYokozunaSchemaGetResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_schema()) {
    if (!this->schema().IsInitialized()) return false;
  }
  return true;
}

void RpbYokozunaSchemaGetResp::Swap(RpbYokozunaSchemaGetResp* other) {
  if (other != this) {
    std::swap(schema_, other->schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbYokozunaSchemaGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbYokozunaSchemaGetResp_descriptor_;
  metadata.reflection = RpbYokozunaSchemaGetResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
